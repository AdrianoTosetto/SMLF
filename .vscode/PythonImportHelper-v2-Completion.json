[
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractclassmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractclassmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractclassmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractclassmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "CommonLayer",
        "importPath": "api.common_layer",
        "description": "api.common_layer",
        "isExtraImport": true,
        "detail": "api.common_layer",
        "documentation": {}
    },
    {
        "label": "CommonLayer",
        "importPath": "api.common_layer",
        "description": "api.common_layer",
        "isExtraImport": true,
        "detail": "api.common_layer",
        "documentation": {}
    },
    {
        "label": "CommonLayer",
        "importPath": "api.common_layer",
        "description": "api.common_layer",
        "isExtraImport": true,
        "detail": "api.common_layer",
        "documentation": {}
    },
    {
        "label": "CommonLayer",
        "importPath": "api.common_layer",
        "description": "api.common_layer",
        "isExtraImport": true,
        "detail": "api.common_layer",
        "documentation": {}
    },
    {
        "label": "CommonLayer",
        "importPath": "api.common_layer",
        "description": "api.common_layer",
        "isExtraImport": true,
        "detail": "api.common_layer",
        "documentation": {}
    },
    {
        "label": "CommonLayer",
        "importPath": "api.common_layer",
        "description": "api.common_layer",
        "isExtraImport": true,
        "detail": "api.common_layer",
        "documentation": {}
    },
    {
        "label": "CommonLayer",
        "importPath": "api.common_layer",
        "description": "api.common_layer",
        "isExtraImport": true,
        "detail": "api.common_layer",
        "documentation": {}
    },
    {
        "label": "CommonLayer",
        "importPath": "api.common_layer",
        "description": "api.common_layer",
        "isExtraImport": true,
        "detail": "api.common_layer",
        "documentation": {}
    },
    {
        "label": "CommonLayer",
        "importPath": "api.common_layer",
        "description": "api.common_layer",
        "isExtraImport": true,
        "detail": "api.common_layer",
        "documentation": {}
    },
    {
        "label": "CommonLayer",
        "importPath": "api.common_layer",
        "description": "api.common_layer",
        "isExtraImport": true,
        "detail": "api.common_layer",
        "documentation": {}
    },
    {
        "label": "CommonLayer",
        "importPath": "api.common_layer",
        "description": "api.common_layer",
        "isExtraImport": true,
        "detail": "api.common_layer",
        "documentation": {}
    },
    {
        "label": "CommonLayer",
        "importPath": "api.common_layer",
        "description": "api.common_layer",
        "isExtraImport": true,
        "detail": "api.common_layer",
        "documentation": {}
    },
    {
        "label": "CommonLayer",
        "importPath": "api.common_layer",
        "description": "api.common_layer",
        "isExtraImport": true,
        "detail": "api.common_layer",
        "documentation": {}
    },
    {
        "label": "CommonLayer",
        "importPath": "api.common_layer",
        "description": "api.common_layer",
        "isExtraImport": true,
        "detail": "api.common_layer",
        "documentation": {}
    },
    {
        "label": "CommonLayer",
        "importPath": "api.common_layer",
        "description": "api.common_layer",
        "isExtraImport": true,
        "detail": "api.common_layer",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "common_layer",
        "importPath": "api",
        "description": "api",
        "isExtraImport": true,
        "detail": "api",
        "documentation": {}
    },
    {
        "label": "common_layer",
        "importPath": "api",
        "description": "api",
        "isExtraImport": true,
        "detail": "api",
        "documentation": {}
    },
    {
        "label": "common_layer",
        "importPath": "api",
        "description": "api",
        "isExtraImport": true,
        "detail": "api",
        "documentation": {}
    },
    {
        "label": "common_layer",
        "importPath": "api",
        "description": "api",
        "isExtraImport": true,
        "detail": "api",
        "documentation": {}
    },
    {
        "label": "common_layer",
        "importPath": "api",
        "description": "api",
        "isExtraImport": true,
        "detail": "api",
        "documentation": {}
    },
    {
        "label": "SMLFComponent",
        "importPath": "api.internal.smlf_component",
        "description": "api.internal.smlf_component",
        "isExtraImport": true,
        "detail": "api.internal.smlf_component",
        "documentation": {}
    },
    {
        "label": "SMLFComponent",
        "importPath": "api.internal.smlf_component",
        "description": "api.internal.smlf_component",
        "isExtraImport": true,
        "detail": "api.internal.smlf_component",
        "documentation": {}
    },
    {
        "label": "SMLFComponent",
        "importPath": "api.internal.smlf_component",
        "description": "api.internal.smlf_component",
        "isExtraImport": true,
        "detail": "api.internal.smlf_component",
        "documentation": {}
    },
    {
        "label": "SMLFComponent",
        "importPath": "api.internal.smlf_component",
        "description": "api.internal.smlf_component",
        "isExtraImport": true,
        "detail": "api.internal.smlf_component",
        "documentation": {}
    },
    {
        "label": "SMLFComponent",
        "importPath": "api.internal.smlf_component",
        "description": "api.internal.smlf_component",
        "isExtraImport": true,
        "detail": "api.internal.smlf_component",
        "documentation": {}
    },
    {
        "label": "SMLFComponent",
        "importPath": "api.internal.smlf_component",
        "description": "api.internal.smlf_component",
        "isExtraImport": true,
        "detail": "api.internal.smlf_component",
        "documentation": {}
    },
    {
        "label": "SMLFComponent",
        "importPath": "api.internal.smlf_component",
        "description": "api.internal.smlf_component",
        "isExtraImport": true,
        "detail": "api.internal.smlf_component",
        "documentation": {}
    },
    {
        "label": "SMLFComponent",
        "importPath": "api.internal.smlf_component",
        "description": "api.internal.smlf_component",
        "isExtraImport": true,
        "detail": "api.internal.smlf_component",
        "documentation": {}
    },
    {
        "label": "SMLFComponent",
        "importPath": "api.internal.smlf_component",
        "description": "api.internal.smlf_component",
        "isExtraImport": true,
        "detail": "api.internal.smlf_component",
        "documentation": {}
    },
    {
        "label": "SMLFComponent",
        "importPath": "api.internal.smlf_component",
        "description": "api.internal.smlf_component",
        "isExtraImport": true,
        "detail": "api.internal.smlf_component",
        "documentation": {}
    },
    {
        "label": "SMLFComponent",
        "importPath": "api.internal.smlf_component",
        "description": "api.internal.smlf_component",
        "isExtraImport": true,
        "detail": "api.internal.smlf_component",
        "documentation": {}
    },
    {
        "label": "SMLFComponent",
        "importPath": "api.internal.smlf_component",
        "description": "api.internal.smlf_component",
        "isExtraImport": true,
        "detail": "api.internal.smlf_component",
        "documentation": {}
    },
    {
        "label": "SMLFComponent",
        "importPath": "api.internal.smlf_component",
        "description": "api.internal.smlf_component",
        "isExtraImport": true,
        "detail": "api.internal.smlf_component",
        "documentation": {}
    },
    {
        "label": "ActivationCommon",
        "importPath": "api.layers.activation.activation_common",
        "description": "api.layers.activation.activation_common",
        "isExtraImport": true,
        "detail": "api.layers.activation.activation_common",
        "documentation": {}
    },
    {
        "label": "ActivationCommon",
        "importPath": "api.layers.activation.activation_common",
        "description": "api.layers.activation.activation_common",
        "isExtraImport": true,
        "detail": "api.layers.activation.activation_common",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "SFMLComponentJsonBuilder",
        "importPath": "api.internal.builders.json_builder.sfml_component_json_builder",
        "description": "api.internal.builders.json_builder.sfml_component_json_builder",
        "isExtraImport": true,
        "detail": "api.internal.builders.json_builder.sfml_component_json_builder",
        "documentation": {}
    },
    {
        "label": "SFMLComponentJsonBuilder",
        "importPath": "api.internal.builders.json_builder.sfml_component_json_builder",
        "description": "api.internal.builders.json_builder.sfml_component_json_builder",
        "isExtraImport": true,
        "detail": "api.internal.builders.json_builder.sfml_component_json_builder",
        "documentation": {}
    },
    {
        "label": "ReLU",
        "importPath": "api.layers.activation.relu",
        "description": "api.layers.activation.relu",
        "isExtraImport": true,
        "detail": "api.layers.activation.relu",
        "documentation": {}
    },
    {
        "label": "ReLU",
        "importPath": "api.layers.activation.relu",
        "description": "api.layers.activation.relu",
        "isExtraImport": true,
        "detail": "api.layers.activation.relu",
        "documentation": {}
    },
    {
        "label": "ReLU",
        "importPath": "api.layers.activation.relu",
        "description": "api.layers.activation.relu",
        "isExtraImport": true,
        "detail": "api.layers.activation.relu",
        "documentation": {}
    },
    {
        "label": "ReLU",
        "importPath": "api.layers.activation.relu",
        "description": "api.layers.activation.relu",
        "isExtraImport": true,
        "detail": "api.layers.activation.relu",
        "documentation": {}
    },
    {
        "label": "ReLU",
        "importPath": "api.layers.activation.relu",
        "description": "api.layers.activation.relu",
        "isExtraImport": true,
        "detail": "api.layers.activation.relu",
        "documentation": {}
    },
    {
        "label": "ReLU",
        "importPath": "api.layers.activation.relu",
        "description": "api.layers.activation.relu",
        "isExtraImport": true,
        "detail": "api.layers.activation.relu",
        "documentation": {}
    },
    {
        "label": "ReLU",
        "importPath": "api.layers.activation.relu",
        "description": "api.layers.activation.relu",
        "isExtraImport": true,
        "detail": "api.layers.activation.relu",
        "documentation": {}
    },
    {
        "label": "ReLU",
        "importPath": "api.layers.activation.relu",
        "description": "api.layers.activation.relu",
        "isExtraImport": true,
        "detail": "api.layers.activation.relu",
        "documentation": {}
    },
    {
        "label": "ReLU",
        "importPath": "api.layers.activation.relu",
        "description": "api.layers.activation.relu",
        "isExtraImport": true,
        "detail": "api.layers.activation.relu",
        "documentation": {}
    },
    {
        "label": "ReLU",
        "importPath": "api.layers.activation.relu",
        "description": "api.layers.activation.relu",
        "isExtraImport": true,
        "detail": "api.layers.activation.relu",
        "documentation": {}
    },
    {
        "label": "ReLU",
        "importPath": "api.layers.activation.relu",
        "description": "api.layers.activation.relu",
        "isExtraImport": true,
        "detail": "api.layers.activation.relu",
        "documentation": {}
    },
    {
        "label": "ReLU",
        "importPath": "api.layers.activation.relu",
        "description": "api.layers.activation.relu",
        "isExtraImport": true,
        "detail": "api.layers.activation.relu",
        "documentation": {}
    },
    {
        "label": "ReLU",
        "importPath": "api.layers.activation.relu",
        "description": "api.layers.activation.relu",
        "isExtraImport": true,
        "detail": "api.layers.activation.relu",
        "documentation": {}
    },
    {
        "label": "ReLU",
        "importPath": "api.layers.activation.relu",
        "description": "api.layers.activation.relu",
        "isExtraImport": true,
        "detail": "api.layers.activation.relu",
        "documentation": {}
    },
    {
        "label": "Sigmoid",
        "importPath": "api.layers.activation.sigmoid",
        "description": "api.layers.activation.sigmoid",
        "isExtraImport": true,
        "detail": "api.layers.activation.sigmoid",
        "documentation": {}
    },
    {
        "label": "Sigmoid",
        "importPath": "api.layers.activation.sigmoid",
        "description": "api.layers.activation.sigmoid",
        "isExtraImport": true,
        "detail": "api.layers.activation.sigmoid",
        "documentation": {}
    },
    {
        "label": "Sigmoid",
        "importPath": "api.layers.activation.sigmoid",
        "description": "api.layers.activation.sigmoid",
        "isExtraImport": true,
        "detail": "api.layers.activation.sigmoid",
        "documentation": {}
    },
    {
        "label": "Sigmoid",
        "importPath": "api.layers.activation.sigmoid",
        "description": "api.layers.activation.sigmoid",
        "isExtraImport": true,
        "detail": "api.layers.activation.sigmoid",
        "documentation": {}
    },
    {
        "label": "Sigmoid",
        "importPath": "api.layers.activation.sigmoid",
        "description": "api.layers.activation.sigmoid",
        "isExtraImport": true,
        "detail": "api.layers.activation.sigmoid",
        "documentation": {}
    },
    {
        "label": "Sigmoid",
        "importPath": "api.layers.activation.sigmoid",
        "description": "api.layers.activation.sigmoid",
        "isExtraImport": true,
        "detail": "api.layers.activation.sigmoid",
        "documentation": {}
    },
    {
        "label": "Sigmoid",
        "importPath": "api.layers.activation.sigmoid",
        "description": "api.layers.activation.sigmoid",
        "isExtraImport": true,
        "detail": "api.layers.activation.sigmoid",
        "documentation": {}
    },
    {
        "label": "Sigmoid",
        "importPath": "api.layers.activation.sigmoid",
        "description": "api.layers.activation.sigmoid",
        "isExtraImport": true,
        "detail": "api.layers.activation.sigmoid",
        "documentation": {}
    },
    {
        "label": "Sigmoid",
        "importPath": "api.layers.activation.sigmoid",
        "description": "api.layers.activation.sigmoid",
        "isExtraImport": true,
        "detail": "api.layers.activation.sigmoid",
        "documentation": {}
    },
    {
        "label": "Sigmoid",
        "importPath": "api.layers.activation.sigmoid",
        "description": "api.layers.activation.sigmoid",
        "isExtraImport": true,
        "detail": "api.layers.activation.sigmoid",
        "documentation": {}
    },
    {
        "label": "Sigmoid",
        "importPath": "api.layers.activation.sigmoid",
        "description": "api.layers.activation.sigmoid",
        "isExtraImport": true,
        "detail": "api.layers.activation.sigmoid",
        "documentation": {}
    },
    {
        "label": "Sigmoid",
        "importPath": "api.layers.activation.sigmoid",
        "description": "api.layers.activation.sigmoid",
        "isExtraImport": true,
        "detail": "api.layers.activation.sigmoid",
        "documentation": {}
    },
    {
        "label": "Dense",
        "importPath": "api.layers.dense",
        "description": "api.layers.dense",
        "isExtraImport": true,
        "detail": "api.layers.dense",
        "documentation": {}
    },
    {
        "label": "Dense",
        "importPath": "api.layers.dense",
        "description": "api.layers.dense",
        "isExtraImport": true,
        "detail": "api.layers.dense",
        "documentation": {}
    },
    {
        "label": "Dense",
        "importPath": "api.layers.dense",
        "description": "api.layers.dense",
        "isExtraImport": true,
        "detail": "api.layers.dense",
        "documentation": {}
    },
    {
        "label": "Dense",
        "importPath": "api.layers.dense",
        "description": "api.layers.dense",
        "isExtraImport": true,
        "detail": "api.layers.dense",
        "documentation": {}
    },
    {
        "label": "Dense",
        "importPath": "api.layers.dense",
        "description": "api.layers.dense",
        "isExtraImport": true,
        "detail": "api.layers.dense",
        "documentation": {}
    },
    {
        "label": "Dense",
        "importPath": "api.layers.dense",
        "description": "api.layers.dense",
        "isExtraImport": true,
        "detail": "api.layers.dense",
        "documentation": {}
    },
    {
        "label": "Dense",
        "importPath": "api.layers.dense",
        "description": "api.layers.dense",
        "isExtraImport": true,
        "detail": "api.layers.dense",
        "documentation": {}
    },
    {
        "label": "Dense",
        "importPath": "api.layers.dense",
        "description": "api.layers.dense",
        "isExtraImport": true,
        "detail": "api.layers.dense",
        "documentation": {}
    },
    {
        "label": "Dense",
        "importPath": "api.layers.dense",
        "description": "api.layers.dense",
        "isExtraImport": true,
        "detail": "api.layers.dense",
        "documentation": {}
    },
    {
        "label": "Dense",
        "importPath": "api.layers.dense",
        "description": "api.layers.dense",
        "isExtraImport": true,
        "detail": "api.layers.dense",
        "documentation": {}
    },
    {
        "label": "Dense",
        "importPath": "api.layers.dense",
        "description": "api.layers.dense",
        "isExtraImport": true,
        "detail": "api.layers.dense",
        "documentation": {}
    },
    {
        "label": "Dense",
        "importPath": "api.layers.dense",
        "description": "api.layers.dense",
        "isExtraImport": true,
        "detail": "api.layers.dense",
        "documentation": {}
    },
    {
        "label": "Dense",
        "importPath": "api.layers.dense",
        "description": "api.layers.dense",
        "isExtraImport": true,
        "detail": "api.layers.dense",
        "documentation": {}
    },
    {
        "label": "Dense",
        "importPath": "api.layers.dense",
        "description": "api.layers.dense",
        "isExtraImport": true,
        "detail": "api.layers.dense",
        "documentation": {}
    },
    {
        "label": "Dense",
        "importPath": "api.layers.dense",
        "description": "api.layers.dense",
        "isExtraImport": true,
        "detail": "api.layers.dense",
        "documentation": {}
    },
    {
        "label": "Dense",
        "importPath": "api.layers.dense",
        "description": "api.layers.dense",
        "isExtraImport": true,
        "detail": "api.layers.dense",
        "documentation": {}
    },
    {
        "label": "Dense",
        "importPath": "api.layers.dense",
        "description": "api.layers.dense",
        "isExtraImport": true,
        "detail": "api.layers.dense",
        "documentation": {}
    },
    {
        "label": "Dense",
        "importPath": "api.layers.dense",
        "description": "api.layers.dense",
        "isExtraImport": true,
        "detail": "api.layers.dense",
        "documentation": {}
    },
    {
        "label": "Dense",
        "importPath": "api.layers.dense",
        "description": "api.layers.dense",
        "isExtraImport": true,
        "detail": "api.layers.dense",
        "documentation": {}
    },
    {
        "label": "Dense",
        "importPath": "api.layers.dense",
        "description": "api.layers.dense",
        "isExtraImport": true,
        "detail": "api.layers.dense",
        "documentation": {}
    },
    {
        "label": "Dense",
        "importPath": "api.layers.dense",
        "description": "api.layers.dense",
        "isExtraImport": true,
        "detail": "api.layers.dense",
        "documentation": {}
    },
    {
        "label": "Dense",
        "importPath": "api.layers.dense",
        "description": "api.layers.dense",
        "isExtraImport": true,
        "detail": "api.layers.dense",
        "documentation": {}
    },
    {
        "label": "Dense",
        "importPath": "api.layers.dense",
        "description": "api.layers.dense",
        "isExtraImport": true,
        "detail": "api.layers.dense",
        "documentation": {}
    },
    {
        "label": "Dense",
        "importPath": "api.layers.dense",
        "description": "api.layers.dense",
        "isExtraImport": true,
        "detail": "api.layers.dense",
        "documentation": {}
    },
    {
        "label": "Dense",
        "importPath": "api.layers.dense",
        "description": "api.layers.dense",
        "isExtraImport": true,
        "detail": "api.layers.dense",
        "documentation": {}
    },
    {
        "label": "Dense",
        "importPath": "api.layers.dense",
        "description": "api.layers.dense",
        "isExtraImport": true,
        "detail": "api.layers.dense",
        "documentation": {}
    },
    {
        "label": "DenseDecorator",
        "importPath": "api.layers.dense_decorator",
        "description": "api.layers.dense_decorator",
        "isExtraImport": true,
        "detail": "api.layers.dense_decorator",
        "documentation": {}
    },
    {
        "label": "DenseDecorator",
        "importPath": "api.layers.dense_decorator",
        "description": "api.layers.dense_decorator",
        "isExtraImport": true,
        "detail": "api.layers.dense_decorator",
        "documentation": {}
    },
    {
        "label": "tensorflow",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tensorflow",
        "description": "tensorflow",
        "detail": "tensorflow",
        "documentation": {}
    },
    {
        "label": "common_loss",
        "importPath": "api.losses",
        "description": "api.losses",
        "isExtraImport": true,
        "detail": "api.losses",
        "documentation": {}
    },
    {
        "label": "CommonLoss",
        "importPath": "api.losses.common_loss",
        "description": "api.losses.common_loss",
        "isExtraImport": true,
        "detail": "api.losses.common_loss",
        "documentation": {}
    },
    {
        "label": "CommonLoss",
        "importPath": "api.losses.common_loss",
        "description": "api.losses.common_loss",
        "isExtraImport": true,
        "detail": "api.losses.common_loss",
        "documentation": {}
    },
    {
        "label": "CommonLoss",
        "importPath": "api.losses.common_loss",
        "description": "api.losses.common_loss",
        "isExtraImport": true,
        "detail": "api.losses.common_loss",
        "documentation": {}
    },
    {
        "label": "CommonLoss",
        "importPath": "api.losses.common_loss",
        "description": "api.losses.common_loss",
        "isExtraImport": true,
        "detail": "api.losses.common_loss",
        "documentation": {}
    },
    {
        "label": "CommonLoss",
        "importPath": "api.losses.common_loss",
        "description": "api.losses.common_loss",
        "isExtraImport": true,
        "detail": "api.losses.common_loss",
        "documentation": {}
    },
    {
        "label": "CommonLoss",
        "importPath": "api.losses.common_loss",
        "description": "api.losses.common_loss",
        "isExtraImport": true,
        "detail": "api.losses.common_loss",
        "documentation": {}
    },
    {
        "label": "CommonLoss",
        "importPath": "api.losses.common_loss",
        "description": "api.losses.common_loss",
        "isExtraImport": true,
        "detail": "api.losses.common_loss",
        "documentation": {}
    },
    {
        "label": "CommonLoss",
        "importPath": "api.losses.common_loss",
        "description": "api.losses.common_loss",
        "isExtraImport": true,
        "detail": "api.losses.common_loss",
        "documentation": {}
    },
    {
        "label": "Metric",
        "importPath": "api.metrics.metric",
        "description": "api.metrics.metric",
        "isExtraImport": true,
        "detail": "api.metrics.metric",
        "documentation": {}
    },
    {
        "label": "Metric",
        "importPath": "api.metrics.metric",
        "description": "api.metrics.metric",
        "isExtraImport": true,
        "detail": "api.metrics.metric",
        "documentation": {}
    },
    {
        "label": "Metric",
        "importPath": "api.metrics.metric",
        "description": "api.metrics.metric",
        "isExtraImport": true,
        "detail": "api.metrics.metric",
        "documentation": {}
    },
    {
        "label": "BatchDenseNormalization",
        "importPath": "api.batch_dense_normalization",
        "description": "api.batch_dense_normalization",
        "isExtraImport": true,
        "detail": "api.batch_dense_normalization",
        "documentation": {}
    },
    {
        "label": "BatchDenseNormalization",
        "importPath": "api.batch_dense_normalization",
        "description": "api.batch_dense_normalization",
        "isExtraImport": true,
        "detail": "api.batch_dense_normalization",
        "documentation": {}
    },
    {
        "label": "BatchDenseNormalization",
        "importPath": "api.batch_dense_normalization",
        "description": "api.batch_dense_normalization",
        "isExtraImport": true,
        "detail": "api.batch_dense_normalization",
        "documentation": {}
    },
    {
        "label": "BatchDenseNormalization",
        "importPath": "api.batch_dense_normalization",
        "description": "api.batch_dense_normalization",
        "isExtraImport": true,
        "detail": "api.batch_dense_normalization",
        "documentation": {}
    },
    {
        "label": "BatchDenseNormalization",
        "importPath": "api.batch_dense_normalization",
        "description": "api.batch_dense_normalization",
        "isExtraImport": true,
        "detail": "api.batch_dense_normalization",
        "documentation": {}
    },
    {
        "label": "BatchDenseNormalization",
        "importPath": "api.batch_dense_normalization",
        "description": "api.batch_dense_normalization",
        "isExtraImport": true,
        "detail": "api.batch_dense_normalization",
        "documentation": {}
    },
    {
        "label": "BatchDenseNormalization",
        "importPath": "api.batch_dense_normalization",
        "description": "api.batch_dense_normalization",
        "isExtraImport": true,
        "detail": "api.batch_dense_normalization",
        "documentation": {}
    },
    {
        "label": "BatchDenseNormalization",
        "importPath": "api.batch_dense_normalization",
        "description": "api.batch_dense_normalization",
        "isExtraImport": true,
        "detail": "api.batch_dense_normalization",
        "documentation": {}
    },
    {
        "label": "BatchDenseNormalization",
        "importPath": "api.batch_dense_normalization",
        "description": "api.batch_dense_normalization",
        "isExtraImport": true,
        "detail": "api.batch_dense_normalization",
        "documentation": {}
    },
    {
        "label": "BatchDenseNormalization",
        "importPath": "api.batch_dense_normalization",
        "description": "api.batch_dense_normalization",
        "isExtraImport": true,
        "detail": "api.batch_dense_normalization",
        "documentation": {}
    },
    {
        "label": "BatchDenseNormalization",
        "importPath": "api.batch_dense_normalization",
        "description": "api.batch_dense_normalization",
        "isExtraImport": true,
        "detail": "api.batch_dense_normalization",
        "documentation": {}
    },
    {
        "label": "BatchDenseNormalization",
        "importPath": "api.batch_dense_normalization",
        "description": "api.batch_dense_normalization",
        "isExtraImport": true,
        "detail": "api.batch_dense_normalization",
        "documentation": {}
    },
    {
        "label": "BatchDenseNormalization",
        "importPath": "api.batch_dense_normalization",
        "description": "api.batch_dense_normalization",
        "isExtraImport": true,
        "detail": "api.batch_dense_normalization",
        "documentation": {}
    },
    {
        "label": "OptimizerCommon",
        "importPath": "api.optimizers.optimizer_common",
        "description": "api.optimizers.optimizer_common",
        "isExtraImport": true,
        "detail": "api.optimizers.optimizer_common",
        "documentation": {}
    },
    {
        "label": "OptimizerCommon",
        "importPath": "api.optimizers.optimizer_common",
        "description": "api.optimizers.optimizer_common",
        "isExtraImport": true,
        "detail": "api.optimizers.optimizer_common",
        "documentation": {}
    },
    {
        "label": "OptimizerCommon",
        "importPath": "api.optimizers.optimizer_common",
        "description": "api.optimizers.optimizer_common",
        "isExtraImport": true,
        "detail": "api.optimizers.optimizer_common",
        "documentation": {}
    },
    {
        "label": "OptimizerCommon",
        "importPath": "api.optimizers.optimizer_common",
        "description": "api.optimizers.optimizer_common",
        "isExtraImport": true,
        "detail": "api.optimizers.optimizer_common",
        "documentation": {}
    },
    {
        "label": "dense",
        "importPath": "api.layers",
        "description": "api.layers",
        "isExtraImport": true,
        "detail": "api.layers",
        "documentation": {}
    },
    {
        "label": "typing",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "typing",
        "description": "typing",
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "PipelineContext",
        "importPath": "api.sequential.pipeline.pipeline_context",
        "description": "api.sequential.pipeline.pipeline_context",
        "isExtraImport": true,
        "detail": "api.sequential.pipeline.pipeline_context",
        "documentation": {}
    },
    {
        "label": "PipelineState",
        "importPath": "api.sequential.pipeline.pipeline_context",
        "description": "api.sequential.pipeline.pipeline_context",
        "isExtraImport": true,
        "detail": "api.sequential.pipeline.pipeline_context",
        "documentation": {}
    },
    {
        "label": "PipelineContext",
        "importPath": "api.sequential.pipeline.pipeline_context",
        "description": "api.sequential.pipeline.pipeline_context",
        "isExtraImport": true,
        "detail": "api.sequential.pipeline.pipeline_context",
        "documentation": {}
    },
    {
        "label": "PipelineState",
        "importPath": "api.sequential.pipeline.pipeline_context",
        "description": "api.sequential.pipeline.pipeline_context",
        "isExtraImport": true,
        "detail": "api.sequential.pipeline.pipeline_context",
        "documentation": {}
    },
    {
        "label": "PipelineContext",
        "importPath": "api.sequential.pipeline.pipeline_context",
        "description": "api.sequential.pipeline.pipeline_context",
        "isExtraImport": true,
        "detail": "api.sequential.pipeline.pipeline_context",
        "documentation": {}
    },
    {
        "label": "PipelineState",
        "importPath": "api.sequential.pipeline.pipeline_context",
        "description": "api.sequential.pipeline.pipeline_context",
        "isExtraImport": true,
        "detail": "api.sequential.pipeline.pipeline_context",
        "documentation": {}
    },
    {
        "label": "PipelineContext",
        "importPath": "api.sequential.pipeline.pipeline_context",
        "description": "api.sequential.pipeline.pipeline_context",
        "isExtraImport": true,
        "detail": "api.sequential.pipeline.pipeline_context",
        "documentation": {}
    },
    {
        "label": "PipelineState",
        "importPath": "api.sequential.pipeline.pipeline_context",
        "description": "api.sequential.pipeline.pipeline_context",
        "isExtraImport": true,
        "detail": "api.sequential.pipeline.pipeline_context",
        "documentation": {}
    },
    {
        "label": "PipelineContext",
        "importPath": "api.sequential.pipeline.pipeline_context",
        "description": "api.sequential.pipeline.pipeline_context",
        "isExtraImport": true,
        "detail": "api.sequential.pipeline.pipeline_context",
        "documentation": {}
    },
    {
        "label": "PipelineState",
        "importPath": "api.sequential.pipeline.pipeline_context",
        "description": "api.sequential.pipeline.pipeline_context",
        "isExtraImport": true,
        "detail": "api.sequential.pipeline.pipeline_context",
        "documentation": {}
    },
    {
        "label": "PipelineContext",
        "importPath": "api.sequential.pipeline.pipeline_context",
        "description": "api.sequential.pipeline.pipeline_context",
        "isExtraImport": true,
        "detail": "api.sequential.pipeline.pipeline_context",
        "documentation": {}
    },
    {
        "label": "PipelineState",
        "importPath": "api.sequential.pipeline.pipeline_context",
        "description": "api.sequential.pipeline.pipeline_context",
        "isExtraImport": true,
        "detail": "api.sequential.pipeline.pipeline_context",
        "documentation": {}
    },
    {
        "label": "PipelineContext",
        "importPath": "api.sequential.pipeline.pipeline_context",
        "description": "api.sequential.pipeline.pipeline_context",
        "isExtraImport": true,
        "detail": "api.sequential.pipeline.pipeline_context",
        "documentation": {}
    },
    {
        "label": "PipelineState",
        "importPath": "api.sequential.pipeline.pipeline_context",
        "description": "api.sequential.pipeline.pipeline_context",
        "isExtraImport": true,
        "detail": "api.sequential.pipeline.pipeline_context",
        "documentation": {}
    },
    {
        "label": "PipelineContext",
        "importPath": "api.sequential.pipeline.pipeline_context",
        "description": "api.sequential.pipeline.pipeline_context",
        "isExtraImport": true,
        "detail": "api.sequential.pipeline.pipeline_context",
        "documentation": {}
    },
    {
        "label": "PipelineMode",
        "importPath": "api.sequential.pipeline.pipeline_context",
        "description": "api.sequential.pipeline.pipeline_context",
        "isExtraImport": true,
        "detail": "api.sequential.pipeline.pipeline_context",
        "documentation": {}
    },
    {
        "label": "PipelineState",
        "importPath": "api.sequential.pipeline.pipeline_context",
        "description": "api.sequential.pipeline.pipeline_context",
        "isExtraImport": true,
        "detail": "api.sequential.pipeline.pipeline_context",
        "documentation": {}
    },
    {
        "label": "BinaryCrossEntropy",
        "importPath": "api.losses.binary_cross_entropy",
        "description": "api.losses.binary_cross_entropy",
        "isExtraImport": true,
        "detail": "api.losses.binary_cross_entropy",
        "documentation": {}
    },
    {
        "label": "BinaryCrossEntropy",
        "importPath": "api.losses.binary_cross_entropy",
        "description": "api.losses.binary_cross_entropy",
        "isExtraImport": true,
        "detail": "api.losses.binary_cross_entropy",
        "documentation": {}
    },
    {
        "label": "BinaryCrossEntropy",
        "importPath": "api.losses.binary_cross_entropy",
        "description": "api.losses.binary_cross_entropy",
        "isExtraImport": true,
        "detail": "api.losses.binary_cross_entropy",
        "documentation": {}
    },
    {
        "label": "BinaryCrossEntropy",
        "importPath": "api.losses.binary_cross_entropy",
        "description": "api.losses.binary_cross_entropy",
        "isExtraImport": true,
        "detail": "api.losses.binary_cross_entropy",
        "documentation": {}
    },
    {
        "label": "BinaryCrossEntropy",
        "importPath": "api.losses.binary_cross_entropy",
        "description": "api.losses.binary_cross_entropy",
        "isExtraImport": true,
        "detail": "api.losses.binary_cross_entropy",
        "documentation": {}
    },
    {
        "label": "BinaryCrossEntropy",
        "importPath": "api.losses.binary_cross_entropy",
        "description": "api.losses.binary_cross_entropy",
        "isExtraImport": true,
        "detail": "api.losses.binary_cross_entropy",
        "documentation": {}
    },
    {
        "label": "BinaryCrossEntropy",
        "importPath": "api.losses.binary_cross_entropy",
        "description": "api.losses.binary_cross_entropy",
        "isExtraImport": true,
        "detail": "api.losses.binary_cross_entropy",
        "documentation": {}
    },
    {
        "label": "MeanSquareError",
        "importPath": "api.losses.regression.mean_squared_loss",
        "description": "api.losses.regression.mean_squared_loss",
        "isExtraImport": true,
        "detail": "api.losses.regression.mean_squared_loss",
        "documentation": {}
    },
    {
        "label": "MeanSquareError",
        "importPath": "api.losses.regression.mean_squared_loss",
        "description": "api.losses.regression.mean_squared_loss",
        "isExtraImport": true,
        "detail": "api.losses.regression.mean_squared_loss",
        "documentation": {}
    },
    {
        "label": "MeanSquareError",
        "importPath": "api.losses.regression.mean_squared_loss",
        "description": "api.losses.regression.mean_squared_loss",
        "isExtraImport": true,
        "detail": "api.losses.regression.mean_squared_loss",
        "documentation": {}
    },
    {
        "label": "MeanSquareError",
        "importPath": "api.losses.regression.mean_squared_loss",
        "description": "api.losses.regression.mean_squared_loss",
        "isExtraImport": true,
        "detail": "api.losses.regression.mean_squared_loss",
        "documentation": {}
    },
    {
        "label": "MeanSquareError",
        "importPath": "api.losses.regression.mean_squared_loss",
        "description": "api.losses.regression.mean_squared_loss",
        "isExtraImport": true,
        "detail": "api.losses.regression.mean_squared_loss",
        "documentation": {}
    },
    {
        "label": "MeanSquareError",
        "importPath": "api.losses.regression.mean_squared_loss",
        "description": "api.losses.regression.mean_squared_loss",
        "isExtraImport": true,
        "detail": "api.losses.regression.mean_squared_loss",
        "documentation": {}
    },
    {
        "label": "MeanSquareError",
        "importPath": "api.losses.regression.mean_squared_loss",
        "description": "api.losses.regression.mean_squared_loss",
        "isExtraImport": true,
        "detail": "api.losses.regression.mean_squared_loss",
        "documentation": {}
    },
    {
        "label": "MeanSquareError",
        "importPath": "api.losses.regression.mean_squared_loss",
        "description": "api.losses.regression.mean_squared_loss",
        "isExtraImport": true,
        "detail": "api.losses.regression.mean_squared_loss",
        "documentation": {}
    },
    {
        "label": "MeanSquareError",
        "importPath": "api.losses.regression.mean_squared_loss",
        "description": "api.losses.regression.mean_squared_loss",
        "isExtraImport": true,
        "detail": "api.losses.regression.mean_squared_loss",
        "documentation": {}
    },
    {
        "label": "MeanSquareError",
        "importPath": "api.losses.regression.mean_squared_loss",
        "description": "api.losses.regression.mean_squared_loss",
        "isExtraImport": true,
        "detail": "api.losses.regression.mean_squared_loss",
        "documentation": {}
    },
    {
        "label": "MeanSquareError",
        "importPath": "api.losses.regression.mean_squared_loss",
        "description": "api.losses.regression.mean_squared_loss",
        "isExtraImport": true,
        "detail": "api.losses.regression.mean_squared_loss",
        "documentation": {}
    },
    {
        "label": "MeanSquareError",
        "importPath": "api.losses.regression.mean_squared_loss",
        "description": "api.losses.regression.mean_squared_loss",
        "isExtraImport": true,
        "detail": "api.losses.regression.mean_squared_loss",
        "documentation": {}
    },
    {
        "label": "MeanSquareError",
        "importPath": "api.losses.regression.mean_squared_loss",
        "description": "api.losses.regression.mean_squared_loss",
        "isExtraImport": true,
        "detail": "api.losses.regression.mean_squared_loss",
        "documentation": {}
    },
    {
        "label": "AdagradOptmizer",
        "importPath": "api.optimizers.adagrad_optimizer",
        "description": "api.optimizers.adagrad_optimizer",
        "isExtraImport": true,
        "detail": "api.optimizers.adagrad_optimizer",
        "documentation": {}
    },
    {
        "label": "AdagradOptmizer",
        "importPath": "api.optimizers.adagrad_optimizer",
        "description": "api.optimizers.adagrad_optimizer",
        "isExtraImport": true,
        "detail": "api.optimizers.adagrad_optimizer",
        "documentation": {}
    },
    {
        "label": "AdagradOptmizer",
        "importPath": "api.optimizers.adagrad_optimizer",
        "description": "api.optimizers.adagrad_optimizer",
        "isExtraImport": true,
        "detail": "api.optimizers.adagrad_optimizer",
        "documentation": {}
    },
    {
        "label": "AdagradOptmizer",
        "importPath": "api.optimizers.adagrad_optimizer",
        "description": "api.optimizers.adagrad_optimizer",
        "isExtraImport": true,
        "detail": "api.optimizers.adagrad_optimizer",
        "documentation": {}
    },
    {
        "label": "AdagradOptmizer",
        "importPath": "api.optimizers.adagrad_optimizer",
        "description": "api.optimizers.adagrad_optimizer",
        "isExtraImport": true,
        "detail": "api.optimizers.adagrad_optimizer",
        "documentation": {}
    },
    {
        "label": "AdagradOptmizer",
        "importPath": "api.optimizers.adagrad_optimizer",
        "description": "api.optimizers.adagrad_optimizer",
        "isExtraImport": true,
        "detail": "api.optimizers.adagrad_optimizer",
        "documentation": {}
    },
    {
        "label": "AdagradOptmizer",
        "importPath": "api.optimizers.adagrad_optimizer",
        "description": "api.optimizers.adagrad_optimizer",
        "isExtraImport": true,
        "detail": "api.optimizers.adagrad_optimizer",
        "documentation": {}
    },
    {
        "label": "AdagradOptmizer",
        "importPath": "api.optimizers.adagrad_optimizer",
        "description": "api.optimizers.adagrad_optimizer",
        "isExtraImport": true,
        "detail": "api.optimizers.adagrad_optimizer",
        "documentation": {}
    },
    {
        "label": "AdagradOptmizer",
        "importPath": "api.optimizers.adagrad_optimizer",
        "description": "api.optimizers.adagrad_optimizer",
        "isExtraImport": true,
        "detail": "api.optimizers.adagrad_optimizer",
        "documentation": {}
    },
    {
        "label": "AdagradOptmizer",
        "importPath": "api.optimizers.adagrad_optimizer",
        "description": "api.optimizers.adagrad_optimizer",
        "isExtraImport": true,
        "detail": "api.optimizers.adagrad_optimizer",
        "documentation": {}
    },
    {
        "label": "AdagradOptmizer",
        "importPath": "api.optimizers.adagrad_optimizer",
        "description": "api.optimizers.adagrad_optimizer",
        "isExtraImport": true,
        "detail": "api.optimizers.adagrad_optimizer",
        "documentation": {}
    },
    {
        "label": "AdagradOptmizer",
        "importPath": "api.optimizers.adagrad_optimizer",
        "description": "api.optimizers.adagrad_optimizer",
        "isExtraImport": true,
        "detail": "api.optimizers.adagrad_optimizer",
        "documentation": {}
    },
    {
        "label": "StochasticGradientDescent",
        "importPath": "api.optimizers.stochastic_gradient_descent",
        "description": "api.optimizers.stochastic_gradient_descent",
        "isExtraImport": true,
        "detail": "api.optimizers.stochastic_gradient_descent",
        "documentation": {}
    },
    {
        "label": "StochasticGradientDescent",
        "importPath": "api.optimizers.stochastic_gradient_descent",
        "description": "api.optimizers.stochastic_gradient_descent",
        "isExtraImport": true,
        "detail": "api.optimizers.stochastic_gradient_descent",
        "documentation": {}
    },
    {
        "label": "StochasticGradientDescent",
        "importPath": "api.optimizers.stochastic_gradient_descent",
        "description": "api.optimizers.stochastic_gradient_descent",
        "isExtraImport": true,
        "detail": "api.optimizers.stochastic_gradient_descent",
        "documentation": {}
    },
    {
        "label": "StochasticGradientDescent",
        "importPath": "api.optimizers.stochastic_gradient_descent",
        "description": "api.optimizers.stochastic_gradient_descent",
        "isExtraImport": true,
        "detail": "api.optimizers.stochastic_gradient_descent",
        "documentation": {}
    },
    {
        "label": "StochasticGradientDescent",
        "importPath": "api.optimizers.stochastic_gradient_descent",
        "description": "api.optimizers.stochastic_gradient_descent",
        "isExtraImport": true,
        "detail": "api.optimizers.stochastic_gradient_descent",
        "documentation": {}
    },
    {
        "label": "StochasticGradientDescent",
        "importPath": "api.optimizers.stochastic_gradient_descent",
        "description": "api.optimizers.stochastic_gradient_descent",
        "isExtraImport": true,
        "detail": "api.optimizers.stochastic_gradient_descent",
        "documentation": {}
    },
    {
        "label": "StochasticGradientDescent",
        "importPath": "api.optimizers.stochastic_gradient_descent",
        "description": "api.optimizers.stochastic_gradient_descent",
        "isExtraImport": true,
        "detail": "api.optimizers.stochastic_gradient_descent",
        "documentation": {}
    },
    {
        "label": "StochasticGradientDescent",
        "importPath": "api.optimizers.stochastic_gradient_descent",
        "description": "api.optimizers.stochastic_gradient_descent",
        "isExtraImport": true,
        "detail": "api.optimizers.stochastic_gradient_descent",
        "documentation": {}
    },
    {
        "label": "StochasticGradientDescent",
        "importPath": "api.optimizers.stochastic_gradient_descent",
        "description": "api.optimizers.stochastic_gradient_descent",
        "isExtraImport": true,
        "detail": "api.optimizers.stochastic_gradient_descent",
        "documentation": {}
    },
    {
        "label": "StochasticGradientDescent",
        "importPath": "api.optimizers.stochastic_gradient_descent",
        "description": "api.optimizers.stochastic_gradient_descent",
        "isExtraImport": true,
        "detail": "api.optimizers.stochastic_gradient_descent",
        "documentation": {}
    },
    {
        "label": "StochasticGradientDescent",
        "importPath": "api.optimizers.stochastic_gradient_descent",
        "description": "api.optimizers.stochastic_gradient_descent",
        "isExtraImport": true,
        "detail": "api.optimizers.stochastic_gradient_descent",
        "documentation": {}
    },
    {
        "label": "StochasticGradientDescent",
        "importPath": "api.optimizers.stochastic_gradient_descent",
        "description": "api.optimizers.stochastic_gradient_descent",
        "isExtraImport": true,
        "detail": "api.optimizers.stochastic_gradient_descent",
        "documentation": {}
    },
    {
        "label": "StochasticGradientDescent",
        "importPath": "api.optimizers.stochastic_gradient_descent",
        "description": "api.optimizers.stochastic_gradient_descent",
        "isExtraImport": true,
        "detail": "api.optimizers.stochastic_gradient_descent",
        "documentation": {}
    },
    {
        "label": "InvDropout",
        "importPath": "api.layers.inv_dropout",
        "description": "api.layers.inv_dropout",
        "isExtraImport": true,
        "detail": "api.layers.inv_dropout",
        "documentation": {}
    },
    {
        "label": "InvDropout",
        "importPath": "api.layers.inv_dropout",
        "description": "api.layers.inv_dropout",
        "isExtraImport": true,
        "detail": "api.layers.inv_dropout",
        "documentation": {}
    },
    {
        "label": "InvDropout",
        "importPath": "api.layers.inv_dropout",
        "description": "api.layers.inv_dropout",
        "isExtraImport": true,
        "detail": "api.layers.inv_dropout",
        "documentation": {}
    },
    {
        "label": "Dropout",
        "importPath": "api.layers.inv_dropout",
        "description": "api.layers.inv_dropout",
        "isExtraImport": true,
        "detail": "api.layers.inv_dropout",
        "documentation": {}
    },
    {
        "label": "InvDropout",
        "importPath": "api.layers.inv_dropout",
        "description": "api.layers.inv_dropout",
        "isExtraImport": true,
        "detail": "api.layers.inv_dropout",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "enum",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "enum",
        "description": "enum",
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Event",
        "importPath": "api.sequential.design_patterns.observer.observable",
        "description": "api.sequential.design_patterns.observer.observable",
        "isExtraImport": true,
        "detail": "api.sequential.design_patterns.observer.observable",
        "documentation": {}
    },
    {
        "label": "Observable",
        "importPath": "api.sequential.design_patterns.observer.observable",
        "description": "api.sequential.design_patterns.observer.observable",
        "isExtraImport": true,
        "detail": "api.sequential.design_patterns.observer.observable",
        "documentation": {}
    },
    {
        "label": "Event",
        "importPath": "api.sequential.design_patterns.observer.observable",
        "description": "api.sequential.design_patterns.observer.observable",
        "isExtraImport": true,
        "detail": "api.sequential.design_patterns.observer.observable",
        "documentation": {}
    },
    {
        "label": "Event",
        "importPath": "api.sequential.design_patterns.observer.observable",
        "description": "api.sequential.design_patterns.observer.observable",
        "isExtraImport": true,
        "detail": "api.sequential.design_patterns.observer.observable",
        "documentation": {}
    },
    {
        "label": "BatchNormalizationDecorator",
        "importPath": "api.sequential.pipeline.decorators.batch_normalization_decorator",
        "description": "api.sequential.pipeline.decorators.batch_normalization_decorator",
        "isExtraImport": true,
        "detail": "api.sequential.pipeline.decorators.batch_normalization_decorator",
        "documentation": {}
    },
    {
        "label": "BinaryCrossEntropyNextDecorator",
        "importPath": "api.sequential.pipeline.decorators.binary_cross_entropy_next_step_decorator",
        "description": "api.sequential.pipeline.decorators.binary_cross_entropy_next_step_decorator",
        "isExtraImport": true,
        "detail": "api.sequential.pipeline.decorators.binary_cross_entropy_next_step_decorator",
        "documentation": {}
    },
    {
        "label": "DenseNextStepDecorator",
        "importPath": "api.sequential.pipeline.decorators.dense_next_step_decorator",
        "description": "api.sequential.pipeline.decorators.dense_next_step_decorator",
        "isExtraImport": true,
        "detail": "api.sequential.pipeline.decorators.dense_next_step_decorator",
        "documentation": {}
    },
    {
        "label": "DenseNextStepDecorator",
        "importPath": "api.sequential.pipeline.decorators.dense_next_step_decorator",
        "description": "api.sequential.pipeline.decorators.dense_next_step_decorator",
        "isExtraImport": true,
        "detail": "api.sequential.pipeline.decorators.dense_next_step_decorator",
        "documentation": {}
    },
    {
        "label": "MeanSquaredLossNextDecorator",
        "importPath": "api.sequential.pipeline.decorators.mean_squared_loss_next_decorator",
        "description": "api.sequential.pipeline.decorators.mean_squared_loss_next_decorator",
        "isExtraImport": true,
        "detail": "api.sequential.pipeline.decorators.mean_squared_loss_next_decorator",
        "documentation": {}
    },
    {
        "label": "ReLUNextStepDecorator",
        "importPath": "api.sequential.pipeline.decorators.relu_decorator",
        "description": "api.sequential.pipeline.decorators.relu_decorator",
        "isExtraImport": true,
        "detail": "api.sequential.pipeline.decorators.relu_decorator",
        "documentation": {}
    },
    {
        "label": "ReLUNextStepDecorator",
        "importPath": "api.sequential.pipeline.decorators.relu_decorator",
        "description": "api.sequential.pipeline.decorators.relu_decorator",
        "isExtraImport": true,
        "detail": "api.sequential.pipeline.decorators.relu_decorator",
        "documentation": {}
    },
    {
        "label": "SigmoidNextStepDecorator",
        "importPath": "api.sequential.pipeline.decorators.sigmoid_decorator",
        "description": "api.sequential.pipeline.decorators.sigmoid_decorator",
        "isExtraImport": true,
        "detail": "api.sequential.pipeline.decorators.sigmoid_decorator",
        "documentation": {}
    },
    {
        "label": "PipelineMode",
        "importPath": "api.sequential.pipeline.pipeline_mode",
        "description": "api.sequential.pipeline.pipeline_mode",
        "isExtraImport": true,
        "detail": "api.sequential.pipeline.pipeline_mode",
        "documentation": {}
    },
    {
        "label": "PipelineMode",
        "importPath": "api.sequential.pipeline.pipeline_mode",
        "description": "api.sequential.pipeline.pipeline_mode",
        "isExtraImport": true,
        "detail": "api.sequential.pipeline.pipeline_mode",
        "documentation": {}
    },
    {
        "label": "PipelineState",
        "importPath": "api.sequential.pipeline.pipeline_state",
        "description": "api.sequential.pipeline.pipeline_state",
        "isExtraImport": true,
        "detail": "api.sequential.pipeline.pipeline_state",
        "documentation": {}
    },
    {
        "label": "PipelineState",
        "importPath": "api.sequential.pipeline.pipeline_state",
        "description": "api.sequential.pipeline.pipeline_state",
        "isExtraImport": true,
        "detail": "api.sequential.pipeline.pipeline_state",
        "documentation": {}
    },
    {
        "label": "PipelineState",
        "importPath": "api.sequential.pipeline.pipeline_state",
        "description": "api.sequential.pipeline.pipeline_state",
        "isExtraImport": true,
        "detail": "api.sequential.pipeline.pipeline_state",
        "documentation": {}
    },
    {
        "label": "PipelineState",
        "importPath": "api.sequential.pipeline.pipeline_state",
        "description": "api.sequential.pipeline.pipeline_state",
        "isExtraImport": true,
        "detail": "api.sequential.pipeline.pipeline_state",
        "documentation": {}
    },
    {
        "label": "PipelineState",
        "importPath": "api.sequential.pipeline.pipeline_state",
        "description": "api.sequential.pipeline.pipeline_state",
        "isExtraImport": true,
        "detail": "api.sequential.pipeline.pipeline_state",
        "documentation": {}
    },
    {
        "label": "PipelineState",
        "importPath": "api.sequential.pipeline.pipeline_state",
        "description": "api.sequential.pipeline.pipeline_state",
        "isExtraImport": true,
        "detail": "api.sequential.pipeline.pipeline_state",
        "documentation": {}
    },
    {
        "label": "PipelineState",
        "importPath": "api.sequential.pipeline.pipeline_state",
        "description": "api.sequential.pipeline.pipeline_state",
        "isExtraImport": true,
        "detail": "api.sequential.pipeline.pipeline_state",
        "documentation": {}
    },
    {
        "label": "PipelineState",
        "importPath": "api.sequential.pipeline.pipeline_state",
        "description": "api.sequential.pipeline.pipeline_state",
        "isExtraImport": true,
        "detail": "api.sequential.pipeline.pipeline_state",
        "documentation": {}
    },
    {
        "label": "PipelineState",
        "importPath": "api.sequential.pipeline.pipeline_state",
        "description": "api.sequential.pipeline.pipeline_state",
        "isExtraImport": true,
        "detail": "api.sequential.pipeline.pipeline_state",
        "documentation": {}
    },
    {
        "label": "PipelineState",
        "importPath": "api.sequential.pipeline.pipeline_state",
        "description": "api.sequential.pipeline.pipeline_state",
        "isExtraImport": true,
        "detail": "api.sequential.pipeline.pipeline_state",
        "documentation": {}
    },
    {
        "label": "PipelineState",
        "importPath": "api.sequential.pipeline.pipeline_state",
        "description": "api.sequential.pipeline.pipeline_state",
        "isExtraImport": true,
        "detail": "api.sequential.pipeline.pipeline_state",
        "documentation": {}
    },
    {
        "label": "PipelineState",
        "importPath": "api.sequential.pipeline.pipeline_state",
        "description": "api.sequential.pipeline.pipeline_state",
        "isExtraImport": true,
        "detail": "api.sequential.pipeline.pipeline_state",
        "documentation": {}
    },
    {
        "label": "PipelineState",
        "importPath": "api.sequential.pipeline.pipeline_state",
        "description": "api.sequential.pipeline.pipeline_state",
        "isExtraImport": true,
        "detail": "api.sequential.pipeline.pipeline_state",
        "documentation": {}
    },
    {
        "label": "sklearn.utils",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sklearn.utils",
        "description": "sklearn.utils",
        "detail": "sklearn.utils",
        "documentation": {}
    },
    {
        "label": "shuffle",
        "importPath": "sklearn.utils",
        "description": "sklearn.utils",
        "isExtraImport": true,
        "detail": "sklearn.utils",
        "documentation": {}
    },
    {
        "label": "shuffle",
        "importPath": "sklearn.utils",
        "description": "sklearn.utils",
        "isExtraImport": true,
        "detail": "sklearn.utils",
        "documentation": {}
    },
    {
        "label": "shuffle",
        "importPath": "sklearn.utils",
        "description": "sklearn.utils",
        "isExtraImport": true,
        "detail": "sklearn.utils",
        "documentation": {}
    },
    {
        "label": "shuffle",
        "importPath": "sklearn.utils",
        "description": "sklearn.utils",
        "isExtraImport": true,
        "detail": "sklearn.utils",
        "documentation": {}
    },
    {
        "label": "shuffle",
        "importPath": "sklearn.utils",
        "description": "sklearn.utils",
        "isExtraImport": true,
        "detail": "sklearn.utils",
        "documentation": {}
    },
    {
        "label": "Softmax",
        "importPath": "api.layers.activation.softmax",
        "description": "api.layers.activation.softmax",
        "isExtraImport": true,
        "detail": "api.layers.activation.softmax",
        "documentation": {}
    },
    {
        "label": "SoftmaxCategoricalCrossEntropyOptimization",
        "importPath": "api.layers.activation.softmax",
        "description": "api.layers.activation.softmax",
        "isExtraImport": true,
        "detail": "api.layers.activation.softmax",
        "documentation": {}
    },
    {
        "label": "Softmax",
        "importPath": "api.layers.activation.softmax",
        "description": "api.layers.activation.softmax",
        "isExtraImport": true,
        "detail": "api.layers.activation.softmax",
        "documentation": {}
    },
    {
        "label": "Softmax",
        "importPath": "api.layers.activation.softmax",
        "description": "api.layers.activation.softmax",
        "isExtraImport": true,
        "detail": "api.layers.activation.softmax",
        "documentation": {}
    },
    {
        "label": "Softmax",
        "importPath": "api.layers.activation.softmax",
        "description": "api.layers.activation.softmax",
        "isExtraImport": true,
        "detail": "api.layers.activation.softmax",
        "documentation": {}
    },
    {
        "label": "Softmax",
        "importPath": "api.layers.activation.softmax",
        "description": "api.layers.activation.softmax",
        "isExtraImport": true,
        "detail": "api.layers.activation.softmax",
        "documentation": {}
    },
    {
        "label": "Softmax",
        "importPath": "api.layers.activation.softmax",
        "description": "api.layers.activation.softmax",
        "isExtraImport": true,
        "detail": "api.layers.activation.softmax",
        "documentation": {}
    },
    {
        "label": "Softmax",
        "importPath": "api.layers.activation.softmax",
        "description": "api.layers.activation.softmax",
        "isExtraImport": true,
        "detail": "api.layers.activation.softmax",
        "documentation": {}
    },
    {
        "label": "Softmax",
        "importPath": "api.layers.activation.softmax",
        "description": "api.layers.activation.softmax",
        "isExtraImport": true,
        "detail": "api.layers.activation.softmax",
        "documentation": {}
    },
    {
        "label": "DenseL1Regularized",
        "importPath": "api.layers.dense_l1_regularized",
        "description": "api.layers.dense_l1_regularized",
        "isExtraImport": true,
        "detail": "api.layers.dense_l1_regularized",
        "documentation": {}
    },
    {
        "label": "DenseL2Regularized",
        "importPath": "api.layers.dense_l2_regularized",
        "description": "api.layers.dense_l2_regularized",
        "isExtraImport": true,
        "detail": "api.layers.dense_l2_regularized",
        "documentation": {}
    },
    {
        "label": "DenseRegularizedDecorator",
        "importPath": "api.layers.dense_l2_regularized",
        "description": "api.layers.dense_l2_regularized",
        "isExtraImport": true,
        "detail": "api.layers.dense_l2_regularized",
        "documentation": {}
    },
    {
        "label": "SoftmaxCategoricalCrossEntropyLayer",
        "importPath": "api.layers.softmax_categorical_cross_entropy_layer",
        "description": "api.layers.softmax_categorical_cross_entropy_layer",
        "isExtraImport": true,
        "detail": "api.layers.softmax_categorical_cross_entropy_layer",
        "documentation": {}
    },
    {
        "label": "SoftmaxCategoricalCrossEntropyLayer",
        "importPath": "api.layers.softmax_categorical_cross_entropy_layer",
        "description": "api.layers.softmax_categorical_cross_entropy_layer",
        "isExtraImport": true,
        "detail": "api.layers.softmax_categorical_cross_entropy_layer",
        "documentation": {}
    },
    {
        "label": "SoftmaxCategoricalCrossEntropyLayer",
        "importPath": "api.layers.softmax_categorical_cross_entropy_layer",
        "description": "api.layers.softmax_categorical_cross_entropy_layer",
        "isExtraImport": true,
        "detail": "api.layers.softmax_categorical_cross_entropy_layer",
        "documentation": {}
    },
    {
        "label": "SoftmaxCategoricalCrossEntropyLayer",
        "importPath": "api.layers.softmax_categorical_cross_entropy_layer",
        "description": "api.layers.softmax_categorical_cross_entropy_layer",
        "isExtraImport": true,
        "detail": "api.layers.softmax_categorical_cross_entropy_layer",
        "documentation": {}
    },
    {
        "label": "SoftmaxCategoricalCrossEntropyLayer",
        "importPath": "api.layers.softmax_categorical_cross_entropy_layer",
        "description": "api.layers.softmax_categorical_cross_entropy_layer",
        "isExtraImport": true,
        "detail": "api.layers.softmax_categorical_cross_entropy_layer",
        "documentation": {}
    },
    {
        "label": "CategoricalCrossEntropy",
        "importPath": "api.losses.categorical_cross_entropy",
        "description": "api.losses.categorical_cross_entropy",
        "isExtraImport": true,
        "detail": "api.losses.categorical_cross_entropy",
        "documentation": {}
    },
    {
        "label": "signal",
        "importPath": "scipy",
        "description": "scipy",
        "isExtraImport": true,
        "detail": "scipy",
        "documentation": {}
    },
    {
        "label": "signal",
        "importPath": "scipy",
        "description": "scipy",
        "isExtraImport": true,
        "detail": "scipy",
        "documentation": {}
    },
    {
        "label": "Dense",
        "importPath": "api.dense",
        "description": "api.dense",
        "isExtraImport": true,
        "detail": "api.dense",
        "documentation": {}
    },
    {
        "label": "ReLU",
        "importPath": "relu_layer",
        "description": "relu_layer",
        "isExtraImport": true,
        "detail": "relu_layer",
        "documentation": {}
    },
    {
        "label": "SoftmaxCategoricalCrossEntropyLayer",
        "importPath": "softmax_categorical_cross_entropy_layer",
        "description": "softmax_categorical_cross_entropy_layer",
        "isExtraImport": true,
        "detail": "softmax_categorical_cross_entropy_layer",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "pyplot",
        "importPath": "matplotlib",
        "description": "matplotlib",
        "isExtraImport": true,
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "pyplot",
        "importPath": "matplotlib",
        "description": "matplotlib",
        "isExtraImport": true,
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "pyplot",
        "importPath": "matplotlib",
        "description": "matplotlib",
        "isExtraImport": true,
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "pyplot",
        "importPath": "matplotlib",
        "description": "matplotlib",
        "isExtraImport": true,
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "pyplot",
        "importPath": "matplotlib",
        "description": "matplotlib",
        "isExtraImport": true,
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "pyplot",
        "importPath": "matplotlib",
        "description": "matplotlib",
        "isExtraImport": true,
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "pyplot",
        "importPath": "matplotlib",
        "description": "matplotlib",
        "isExtraImport": true,
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "pyplot",
        "importPath": "matplotlib",
        "description": "matplotlib",
        "isExtraImport": true,
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "pyplot",
        "importPath": "matplotlib",
        "description": "matplotlib",
        "isExtraImport": true,
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "pyplot",
        "importPath": "matplotlib",
        "description": "matplotlib",
        "isExtraImport": true,
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "pyplot",
        "importPath": "matplotlib",
        "description": "matplotlib",
        "isExtraImport": true,
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "read_csv",
        "importPath": "pandas",
        "description": "pandas",
        "isExtraImport": true,
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "LabelEncoder",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "OneHotEncoder",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "StandardScaler",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "normalize",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "OneHotEncoder",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "StandardScaler",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "normalize",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "Dropout",
        "importPath": "api.layers.dropout",
        "description": "api.layers.dropout",
        "isExtraImport": true,
        "detail": "api.layers.dropout",
        "documentation": {}
    },
    {
        "label": "BinaryAccuracy",
        "importPath": "api.metrics.accuracy.binary_accuracy",
        "description": "api.metrics.accuracy.binary_accuracy",
        "isExtraImport": true,
        "detail": "api.metrics.accuracy.binary_accuracy",
        "documentation": {}
    },
    {
        "label": "BinaryCrossEntropy",
        "importPath": "api.metrics.probabilistic.binary_cross_entropy",
        "description": "api.metrics.probabilistic.binary_cross_entropy",
        "isExtraImport": true,
        "detail": "api.metrics.probabilistic.binary_cross_entropy",
        "documentation": {}
    },
    {
        "label": "SequentialModel",
        "importPath": "api.sequential.model",
        "description": "api.sequential.model",
        "isExtraImport": true,
        "detail": "api.sequential.model",
        "documentation": {}
    },
    {
        "label": "SequentialModel",
        "importPath": "api.sequential.model",
        "description": "api.sequential.model",
        "isExtraImport": true,
        "detail": "api.sequential.model",
        "documentation": {}
    },
    {
        "label": "SequentialModel",
        "importPath": "api.sequential.model",
        "description": "api.sequential.model",
        "isExtraImport": true,
        "detail": "api.sequential.model",
        "documentation": {}
    },
    {
        "label": "SequentialModel",
        "importPath": "api.sequential.model",
        "description": "api.sequential.model",
        "isExtraImport": true,
        "detail": "api.sequential.model",
        "documentation": {}
    },
    {
        "label": "SequentialModel",
        "importPath": "api.sequential.model",
        "description": "api.sequential.model",
        "isExtraImport": true,
        "detail": "api.sequential.model",
        "documentation": {}
    },
    {
        "label": "SequentialModel",
        "importPath": "api.sequential.model",
        "description": "api.sequential.model",
        "isExtraImport": true,
        "detail": "api.sequential.model",
        "documentation": {}
    },
    {
        "label": "SequentialModel",
        "importPath": "api.sequential.model",
        "description": "api.sequential.model",
        "isExtraImport": true,
        "detail": "api.sequential.model",
        "documentation": {}
    },
    {
        "label": "SequentialModel",
        "importPath": "api.sequential.model",
        "description": "api.sequential.model",
        "isExtraImport": true,
        "detail": "api.sequential.model",
        "documentation": {}
    },
    {
        "label": "SequentialModel",
        "importPath": "api.sequential.model",
        "description": "api.sequential.model",
        "isExtraImport": true,
        "detail": "api.sequential.model",
        "documentation": {}
    },
    {
        "label": "Conv2DLayer",
        "importPath": "api.conv2d_layer",
        "description": "api.conv2d_layer",
        "isExtraImport": true,
        "detail": "api.conv2d_layer",
        "documentation": {}
    },
    {
        "label": "Conv2DLayer",
        "importPath": "api.conv2d_layer",
        "description": "api.conv2d_layer",
        "isExtraImport": true,
        "detail": "api.conv2d_layer",
        "documentation": {}
    },
    {
        "label": "Conv2DLayer",
        "importPath": "api.conv2d_layer",
        "description": "api.conv2d_layer",
        "isExtraImport": true,
        "detail": "api.conv2d_layer",
        "documentation": {}
    },
    {
        "label": "sklearn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sklearn",
        "description": "sklearn",
        "detail": "sklearn",
        "documentation": {}
    },
    {
        "label": "preprocessing",
        "importPath": "sklearn",
        "description": "sklearn",
        "isExtraImport": true,
        "detail": "sklearn",
        "documentation": {}
    },
    {
        "label": "train_test_split",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "train_test_split",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "train_test_split",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "load_iris",
        "importPath": "sklearn.datasets",
        "description": "sklearn.datasets",
        "isExtraImport": true,
        "detail": "sklearn.datasets",
        "documentation": {}
    },
    {
        "label": "load_iris",
        "importPath": "sklearn.datasets",
        "description": "sklearn.datasets",
        "isExtraImport": true,
        "detail": "sklearn.datasets",
        "documentation": {}
    },
    {
        "label": "CategoricalAccuracy",
        "importPath": "api.metrics.accuracy.categorical_accuracy",
        "description": "api.metrics.accuracy.categorical_accuracy",
        "isExtraImport": true,
        "detail": "api.metrics.accuracy.categorical_accuracy",
        "documentation": {}
    },
    {
        "label": "qtawesome",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "qtawesome",
        "description": "qtawesome",
        "detail": "qtawesome",
        "documentation": {}
    },
    {
        "label": "PyQt5.QtCore",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "pyqtSlot",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "pyqtSignal",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QMimeData",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QPoint",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QRect",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QRectF",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QObject",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QVariantAnimation",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QPoint",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QRectF",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QRectF",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QRectF",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QRectF",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QPoint",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QBrush",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPen",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QBrush",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPen",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QMouseEvent",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QBrush",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPen",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QBrush",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPen",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QMouseEvent",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QBrush",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPen",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QBrush",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPen",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QBrush",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPen",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QCursor",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QDrag",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPixmap",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QBrush",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPen",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QBrush",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QColor",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QBrush",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPen",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QBrush",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPen",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QMouseEvent",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QMouseEvent",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QMouseEvent",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPen",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QMouseEvent",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QBrush",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QMouseEvent",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPen",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QMouseEvent",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QBrush",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QMouseEvent",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPen",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QMouseEvent",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QMouseEvent",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QMouseEvent",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QBrush",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QMouseEvent",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPen",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QMouseEvent",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QMouseEvent",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QMouseEvent",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPen",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QColor",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPen",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPen",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QBrush",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPen",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QBrush",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPainter",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPen",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "PyQt5.QtWidgets",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QComboBox",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QSlider",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QSlider",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "dispatch",
        "importPath": "multipledispatch",
        "description": "multipledispatch",
        "isExtraImport": true,
        "detail": "multipledispatch",
        "documentation": {}
    },
    {
        "label": "dispatch",
        "importPath": "multipledispatch",
        "description": "multipledispatch",
        "isExtraImport": true,
        "detail": "multipledispatch",
        "documentation": {}
    },
    {
        "label": "dispatch",
        "importPath": "multipledispatch",
        "description": "multipledispatch",
        "isExtraImport": true,
        "detail": "multipledispatch",
        "documentation": {}
    },
    {
        "label": "dispatch",
        "importPath": "multipledispatch",
        "description": "multipledispatch",
        "isExtraImport": true,
        "detail": "multipledispatch",
        "documentation": {}
    },
    {
        "label": "dispatch",
        "importPath": "multipledispatch",
        "description": "multipledispatch",
        "isExtraImport": true,
        "detail": "multipledispatch",
        "documentation": {}
    },
    {
        "label": "Pipeline",
        "importPath": "api.sequential.pipeline.pipeline",
        "description": "api.sequential.pipeline.pipeline",
        "isExtraImport": true,
        "detail": "api.sequential.pipeline.pipeline",
        "documentation": {}
    },
    {
        "label": "Pipeline",
        "importPath": "api.sequential.pipeline.pipeline",
        "description": "api.sequential.pipeline.pipeline",
        "isExtraImport": true,
        "detail": "api.sequential.pipeline.pipeline",
        "documentation": {}
    },
    {
        "label": "EditingBatchNormalization",
        "importPath": "nn_visualizer.application_context.editing_layers",
        "description": "nn_visualizer.application_context.editing_layers",
        "isExtraImport": true,
        "detail": "nn_visualizer.application_context.editing_layers",
        "documentation": {}
    },
    {
        "label": "EditingBinaryCrossEntropy",
        "importPath": "nn_visualizer.application_context.editing_layers",
        "description": "nn_visualizer.application_context.editing_layers",
        "isExtraImport": true,
        "detail": "nn_visualizer.application_context.editing_layers",
        "documentation": {}
    },
    {
        "label": "EditingDense",
        "importPath": "nn_visualizer.application_context.editing_layers",
        "description": "nn_visualizer.application_context.editing_layers",
        "isExtraImport": true,
        "detail": "nn_visualizer.application_context.editing_layers",
        "documentation": {}
    },
    {
        "label": "EditingDropout",
        "importPath": "nn_visualizer.application_context.editing_layers",
        "description": "nn_visualizer.application_context.editing_layers",
        "isExtraImport": true,
        "detail": "nn_visualizer.application_context.editing_layers",
        "documentation": {}
    },
    {
        "label": "EditingInput",
        "importPath": "nn_visualizer.application_context.editing_layers",
        "description": "nn_visualizer.application_context.editing_layers",
        "isExtraImport": true,
        "detail": "nn_visualizer.application_context.editing_layers",
        "documentation": {}
    },
    {
        "label": "EditingLayer",
        "importPath": "nn_visualizer.application_context.editing_layers",
        "description": "nn_visualizer.application_context.editing_layers",
        "isExtraImport": true,
        "detail": "nn_visualizer.application_context.editing_layers",
        "documentation": {}
    },
    {
        "label": "EditingMeanSquaredError",
        "importPath": "nn_visualizer.application_context.editing_layers",
        "description": "nn_visualizer.application_context.editing_layers",
        "isExtraImport": true,
        "detail": "nn_visualizer.application_context.editing_layers",
        "documentation": {}
    },
    {
        "label": "EditingReLU",
        "importPath": "nn_visualizer.application_context.editing_layers",
        "description": "nn_visualizer.application_context.editing_layers",
        "isExtraImport": true,
        "detail": "nn_visualizer.application_context.editing_layers",
        "documentation": {}
    },
    {
        "label": "EditingSigmoid",
        "importPath": "nn_visualizer.application_context.editing_layers",
        "description": "nn_visualizer.application_context.editing_layers",
        "isExtraImport": true,
        "detail": "nn_visualizer.application_context.editing_layers",
        "documentation": {}
    },
    {
        "label": "EditingSoftmax",
        "importPath": "nn_visualizer.application_context.editing_layers",
        "description": "nn_visualizer.application_context.editing_layers",
        "isExtraImport": true,
        "detail": "nn_visualizer.application_context.editing_layers",
        "documentation": {}
    },
    {
        "label": "EditingBatchNormalization",
        "importPath": "nn_visualizer.application_context.editing_layers",
        "description": "nn_visualizer.application_context.editing_layers",
        "isExtraImport": true,
        "detail": "nn_visualizer.application_context.editing_layers",
        "documentation": {}
    },
    {
        "label": "EditingLayer",
        "importPath": "nn_visualizer.application_context.editing_layers",
        "description": "nn_visualizer.application_context.editing_layers",
        "isExtraImport": true,
        "detail": "nn_visualizer.application_context.editing_layers",
        "documentation": {}
    },
    {
        "label": "EditingLayer",
        "importPath": "nn_visualizer.application_context.editing_layers",
        "description": "nn_visualizer.application_context.editing_layers",
        "isExtraImport": true,
        "detail": "nn_visualizer.application_context.editing_layers",
        "documentation": {}
    },
    {
        "label": "EditingLayer",
        "importPath": "nn_visualizer.application_context.editing_layers",
        "description": "nn_visualizer.application_context.editing_layers",
        "isExtraImport": true,
        "detail": "nn_visualizer.application_context.editing_layers",
        "documentation": {}
    },
    {
        "label": "EditingReLU",
        "importPath": "nn_visualizer.application_context.editing_layers",
        "description": "nn_visualizer.application_context.editing_layers",
        "isExtraImport": true,
        "detail": "nn_visualizer.application_context.editing_layers",
        "documentation": {}
    },
    {
        "label": "EditingReLU",
        "importPath": "nn_visualizer.application_context.editing_layers",
        "description": "nn_visualizer.application_context.editing_layers",
        "isExtraImport": true,
        "detail": "nn_visualizer.application_context.editing_layers",
        "documentation": {}
    },
    {
        "label": "EditingSigmoid",
        "importPath": "nn_visualizer.application_context.editing_layers",
        "description": "nn_visualizer.application_context.editing_layers",
        "isExtraImport": true,
        "detail": "nn_visualizer.application_context.editing_layers",
        "documentation": {}
    },
    {
        "label": "EditingReLU",
        "importPath": "nn_visualizer.application_context.editing_layers",
        "description": "nn_visualizer.application_context.editing_layers",
        "isExtraImport": true,
        "detail": "nn_visualizer.application_context.editing_layers",
        "documentation": {}
    },
    {
        "label": "EditingSoftmax",
        "importPath": "nn_visualizer.application_context.editing_layers",
        "description": "nn_visualizer.application_context.editing_layers",
        "isExtraImport": true,
        "detail": "nn_visualizer.application_context.editing_layers",
        "documentation": {}
    },
    {
        "label": "EditingLayer",
        "importPath": "nn_visualizer.application_context.editing_layers",
        "description": "nn_visualizer.application_context.editing_layers",
        "isExtraImport": true,
        "detail": "nn_visualizer.application_context.editing_layers",
        "documentation": {}
    },
    {
        "label": "EditingBinaryCrossEntropy",
        "importPath": "nn_visualizer.application_context.editing_layers",
        "description": "nn_visualizer.application_context.editing_layers",
        "isExtraImport": true,
        "detail": "nn_visualizer.application_context.editing_layers",
        "documentation": {}
    },
    {
        "label": "EditingDropout",
        "importPath": "nn_visualizer.application_context.editing_layers",
        "description": "nn_visualizer.application_context.editing_layers",
        "isExtraImport": true,
        "detail": "nn_visualizer.application_context.editing_layers",
        "documentation": {}
    },
    {
        "label": "EditingLayer",
        "importPath": "nn_visualizer.application_context.editing_layers",
        "description": "nn_visualizer.application_context.editing_layers",
        "isExtraImport": true,
        "detail": "nn_visualizer.application_context.editing_layers",
        "documentation": {}
    },
    {
        "label": "EditingReLU",
        "importPath": "nn_visualizer.application_context.editing_layers",
        "description": "nn_visualizer.application_context.editing_layers",
        "isExtraImport": true,
        "detail": "nn_visualizer.application_context.editing_layers",
        "documentation": {}
    },
    {
        "label": "EditingSigmoid",
        "importPath": "nn_visualizer.application_context.editing_layers",
        "description": "nn_visualizer.application_context.editing_layers",
        "isExtraImport": true,
        "detail": "nn_visualizer.application_context.editing_layers",
        "documentation": {}
    },
    {
        "label": "EditingSoftmax",
        "importPath": "nn_visualizer.application_context.editing_layers",
        "description": "nn_visualizer.application_context.editing_layers",
        "isExtraImport": true,
        "detail": "nn_visualizer.application_context.editing_layers",
        "documentation": {}
    },
    {
        "label": "EditingBatchNormalization",
        "importPath": "nn_visualizer.application_context.editing_layers",
        "description": "nn_visualizer.application_context.editing_layers",
        "isExtraImport": true,
        "detail": "nn_visualizer.application_context.editing_layers",
        "documentation": {}
    },
    {
        "label": "EditingBinaryCrossEntropy",
        "importPath": "nn_visualizer.application_context.editing_layers",
        "description": "nn_visualizer.application_context.editing_layers",
        "isExtraImport": true,
        "detail": "nn_visualizer.application_context.editing_layers",
        "documentation": {}
    },
    {
        "label": "EditingDense",
        "importPath": "nn_visualizer.application_context.editing_layers",
        "description": "nn_visualizer.application_context.editing_layers",
        "isExtraImport": true,
        "detail": "nn_visualizer.application_context.editing_layers",
        "documentation": {}
    },
    {
        "label": "EditingDropout",
        "importPath": "nn_visualizer.application_context.editing_layers",
        "description": "nn_visualizer.application_context.editing_layers",
        "isExtraImport": true,
        "detail": "nn_visualizer.application_context.editing_layers",
        "documentation": {}
    },
    {
        "label": "EditingInput",
        "importPath": "nn_visualizer.application_context.editing_layers",
        "description": "nn_visualizer.application_context.editing_layers",
        "isExtraImport": true,
        "detail": "nn_visualizer.application_context.editing_layers",
        "documentation": {}
    },
    {
        "label": "EditingLayer",
        "importPath": "nn_visualizer.application_context.editing_layers",
        "description": "nn_visualizer.application_context.editing_layers",
        "isExtraImport": true,
        "detail": "nn_visualizer.application_context.editing_layers",
        "documentation": {}
    },
    {
        "label": "EditingMeanSquaredError",
        "importPath": "nn_visualizer.application_context.editing_layers",
        "description": "nn_visualizer.application_context.editing_layers",
        "isExtraImport": true,
        "detail": "nn_visualizer.application_context.editing_layers",
        "documentation": {}
    },
    {
        "label": "EditingReLU",
        "importPath": "nn_visualizer.application_context.editing_layers",
        "description": "nn_visualizer.application_context.editing_layers",
        "isExtraImport": true,
        "detail": "nn_visualizer.application_context.editing_layers",
        "documentation": {}
    },
    {
        "label": "EditingSigmoid",
        "importPath": "nn_visualizer.application_context.editing_layers",
        "description": "nn_visualizer.application_context.editing_layers",
        "isExtraImport": true,
        "detail": "nn_visualizer.application_context.editing_layers",
        "documentation": {}
    },
    {
        "label": "EditingSoftmax",
        "importPath": "nn_visualizer.application_context.editing_layers",
        "description": "nn_visualizer.application_context.editing_layers",
        "isExtraImport": true,
        "detail": "nn_visualizer.application_context.editing_layers",
        "documentation": {}
    },
    {
        "label": "LayoutData",
        "importPath": "nn_visualizer.layout_data",
        "description": "nn_visualizer.layout_data",
        "isExtraImport": true,
        "detail": "nn_visualizer.layout_data",
        "documentation": {}
    },
    {
        "label": "LayoutData",
        "importPath": "nn_visualizer.layout_data",
        "description": "nn_visualizer.layout_data",
        "isExtraImport": true,
        "detail": "nn_visualizer.layout_data",
        "documentation": {}
    },
    {
        "label": "DefaultDenseVisualizerLayoutData",
        "importPath": "nn_visualizer.ui_components.layout_data.default_dense_visualizer_layout_data",
        "description": "nn_visualizer.ui_components.layout_data.default_dense_visualizer_layout_data",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.layout_data.default_dense_visualizer_layout_data",
        "documentation": {}
    },
    {
        "label": "DefaultDenseVisualizerLayoutData",
        "importPath": "nn_visualizer.ui_components.layout_data.default_dense_visualizer_layout_data",
        "description": "nn_visualizer.ui_components.layout_data.default_dense_visualizer_layout_data",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.layout_data.default_dense_visualizer_layout_data",
        "documentation": {}
    },
    {
        "label": "DefaultDenseVisualizerLayoutData",
        "importPath": "nn_visualizer.ui_components.layout_data.default_dense_visualizer_layout_data",
        "description": "nn_visualizer.ui_components.layout_data.default_dense_visualizer_layout_data",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.layout_data.default_dense_visualizer_layout_data",
        "documentation": {}
    },
    {
        "label": "DefaultDropoutVisualizerLayoutData",
        "importPath": "nn_visualizer.ui_components.layout_data.default_dropout_visualizer_layout_data",
        "description": "nn_visualizer.ui_components.layout_data.default_dropout_visualizer_layout_data",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.layout_data.default_dropout_visualizer_layout_data",
        "documentation": {}
    },
    {
        "label": "DefaultDropoutVisualizerLayoutData",
        "importPath": "nn_visualizer.ui_components.layout_data.default_dropout_visualizer_layout_data",
        "description": "nn_visualizer.ui_components.layout_data.default_dropout_visualizer_layout_data",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.layout_data.default_dropout_visualizer_layout_data",
        "documentation": {}
    },
    {
        "label": "DefaultDropoutVisualizerLayoutData",
        "importPath": "nn_visualizer.ui_components.layout_data.default_dropout_visualizer_layout_data",
        "description": "nn_visualizer.ui_components.layout_data.default_dropout_visualizer_layout_data",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.layout_data.default_dropout_visualizer_layout_data",
        "documentation": {}
    },
    {
        "label": "DefaultInputVisualizerLayoutData",
        "importPath": "nn_visualizer.ui_components.layout_data.default_input_layout_data",
        "description": "nn_visualizer.ui_components.layout_data.default_input_layout_data",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.layout_data.default_input_layout_data",
        "documentation": {}
    },
    {
        "label": "DefaultInputVisualizerLayoutData",
        "importPath": "nn_visualizer.ui_components.layout_data.default_input_layout_data",
        "description": "nn_visualizer.ui_components.layout_data.default_input_layout_data",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.layout_data.default_input_layout_data",
        "documentation": {}
    },
    {
        "label": "DefaultInputVisualizerLayoutData",
        "importPath": "nn_visualizer.ui_components.layout_data.default_input_layout_data",
        "description": "nn_visualizer.ui_components.layout_data.default_input_layout_data",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.layout_data.default_input_layout_data",
        "documentation": {}
    },
    {
        "label": "BatchNormalizationUnitVisualizer",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.batch_normalization_visualizer.batch_normalization_unit_visualizer",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.batch_normalization_visualizer.batch_normalization_unit_visualizer",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.batch_normalization_visualizer.batch_normalization_unit_visualizer",
        "documentation": {}
    },
    {
        "label": "BatchNormalizationUnitVisualizer",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.batch_normalization_visualizer.batch_normalization_unit_visualizer",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.batch_normalization_visualizer.batch_normalization_unit_visualizer",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.batch_normalization_visualizer.batch_normalization_unit_visualizer",
        "documentation": {}
    },
    {
        "label": "BatchNormalizationUnitVisualizer",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.batch_normalization_visualizer.batch_normalization_unit_visualizer",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.batch_normalization_visualizer.batch_normalization_unit_visualizer",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.batch_normalization_visualizer.batch_normalization_unit_visualizer",
        "documentation": {}
    },
    {
        "label": "BatchNormalizationUnitVisualizer",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.batch_normalization_visualizer.batch_normalization_unit_visualizer",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.batch_normalization_visualizer.batch_normalization_unit_visualizer",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.batch_normalization_visualizer.batch_normalization_unit_visualizer",
        "documentation": {}
    },
    {
        "label": "BatchNormalizationUnitVisualizer",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.batch_normalization_visualizer.batch_normalization_unit_visualizer",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.batch_normalization_visualizer.batch_normalization_unit_visualizer",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.batch_normalization_visualizer.batch_normalization_unit_visualizer",
        "documentation": {}
    },
    {
        "label": "BatchNormalizationVisualizer",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.batch_normalization_visualizer.batch_normalization_visualizer",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.batch_normalization_visualizer.batch_normalization_visualizer",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.batch_normalization_visualizer.batch_normalization_visualizer",
        "documentation": {}
    },
    {
        "label": "BatchNormalizationVisualizer",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.batch_normalization_visualizer.batch_normalization_visualizer",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.batch_normalization_visualizer.batch_normalization_visualizer",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.batch_normalization_visualizer.batch_normalization_visualizer",
        "documentation": {}
    },
    {
        "label": "BatchNormalizationVisualizer",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.batch_normalization_visualizer.batch_normalization_visualizer",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.batch_normalization_visualizer.batch_normalization_visualizer",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.batch_normalization_visualizer.batch_normalization_visualizer",
        "documentation": {}
    },
    {
        "label": "DenseVisualizer",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.dense_visualizer.visualizer_dense_layer",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.dense_visualizer.visualizer_dense_layer",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.dense_visualizer.visualizer_dense_layer",
        "documentation": {}
    },
    {
        "label": "DenseVisualizer",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.dense_visualizer.visualizer_dense_layer",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.dense_visualizer.visualizer_dense_layer",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.dense_visualizer.visualizer_dense_layer",
        "documentation": {}
    },
    {
        "label": "DenseVisualizer",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.dense_visualizer.visualizer_dense_layer",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.dense_visualizer.visualizer_dense_layer",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.dense_visualizer.visualizer_dense_layer",
        "documentation": {}
    },
    {
        "label": "DropoutVisualizer",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.dropout_visualizer.dropout_visualizer",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.dropout_visualizer.dropout_visualizer",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.dropout_visualizer.dropout_visualizer",
        "documentation": {}
    },
    {
        "label": "DropoutVisualizer",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.dropout_visualizer.dropout_visualizer",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.dropout_visualizer.dropout_visualizer",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.dropout_visualizer.dropout_visualizer",
        "documentation": {}
    },
    {
        "label": "DropoutVisualizer",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.dropout_visualizer.dropout_visualizer",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.dropout_visualizer.dropout_visualizer",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.dropout_visualizer.dropout_visualizer",
        "documentation": {}
    },
    {
        "label": "InputVisualizer",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.input_visualizer.input_visualizer",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.input_visualizer.input_visualizer",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.input_visualizer.input_visualizer",
        "documentation": {}
    },
    {
        "label": "InputVisualizer",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.input_visualizer.input_visualizer",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.input_visualizer.input_visualizer",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.input_visualizer.input_visualizer",
        "documentation": {}
    },
    {
        "label": "InputVisualizer",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.input_visualizer.input_visualizer",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.input_visualizer.input_visualizer",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.input_visualizer.input_visualizer",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "nn_visualizer.infra.file_manager.file_manager",
        "description": "nn_visualizer.infra.file_manager.file_manager",
        "isExtraImport": true,
        "detail": "nn_visualizer.infra.file_manager.file_manager",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "nn_visualizer.infra.file_manager.file_manager",
        "description": "nn_visualizer.infra.file_manager.file_manager",
        "isExtraImport": true,
        "detail": "nn_visualizer.infra.file_manager.file_manager",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "pow",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "PyQt5",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "PyQt5",
        "description": "PyQt5",
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "Point",
        "importPath": "nn_visualizer.geometry.point",
        "description": "nn_visualizer.geometry.point",
        "isExtraImport": true,
        "detail": "nn_visualizer.geometry.point",
        "documentation": {}
    },
    {
        "label": "Point",
        "importPath": "nn_visualizer.geometry.point",
        "description": "nn_visualizer.geometry.point",
        "isExtraImport": true,
        "detail": "nn_visualizer.geometry.point",
        "documentation": {}
    },
    {
        "label": "Point",
        "importPath": "nn_visualizer.geometry.point",
        "description": "nn_visualizer.geometry.point",
        "isExtraImport": true,
        "detail": "nn_visualizer.geometry.point",
        "documentation": {}
    },
    {
        "label": "Point",
        "importPath": "nn_visualizer.geometry.point",
        "description": "nn_visualizer.geometry.point",
        "isExtraImport": true,
        "detail": "nn_visualizer.geometry.point",
        "documentation": {}
    },
    {
        "label": "Point",
        "importPath": "nn_visualizer.geometry.point",
        "description": "nn_visualizer.geometry.point",
        "isExtraImport": true,
        "detail": "nn_visualizer.geometry.point",
        "documentation": {}
    },
    {
        "label": "Point",
        "importPath": "nn_visualizer.geometry.point",
        "description": "nn_visualizer.geometry.point",
        "isExtraImport": true,
        "detail": "nn_visualizer.geometry.point",
        "documentation": {}
    },
    {
        "label": "Point",
        "importPath": "nn_visualizer.geometry.point",
        "description": "nn_visualizer.geometry.point",
        "isExtraImport": true,
        "detail": "nn_visualizer.geometry.point",
        "documentation": {}
    },
    {
        "label": "Point",
        "importPath": "nn_visualizer.geometry.point",
        "description": "nn_visualizer.geometry.point",
        "isExtraImport": true,
        "detail": "nn_visualizer.geometry.point",
        "documentation": {}
    },
    {
        "label": "Point",
        "importPath": "nn_visualizer.geometry.point",
        "description": "nn_visualizer.geometry.point",
        "isExtraImport": true,
        "detail": "nn_visualizer.geometry.point",
        "documentation": {}
    },
    {
        "label": "Point",
        "importPath": "nn_visualizer.geometry.point",
        "description": "nn_visualizer.geometry.point",
        "isExtraImport": true,
        "detail": "nn_visualizer.geometry.point",
        "documentation": {}
    },
    {
        "label": "Point",
        "importPath": "nn_visualizer.geometry.point",
        "description": "nn_visualizer.geometry.point",
        "isExtraImport": true,
        "detail": "nn_visualizer.geometry.point",
        "documentation": {}
    },
    {
        "label": "Point",
        "importPath": "nn_visualizer.geometry.point",
        "description": "nn_visualizer.geometry.point",
        "isExtraImport": true,
        "detail": "nn_visualizer.geometry.point",
        "documentation": {}
    },
    {
        "label": "Point",
        "importPath": "nn_visualizer.geometry.point",
        "description": "nn_visualizer.geometry.point",
        "isExtraImport": true,
        "detail": "nn_visualizer.geometry.point",
        "documentation": {}
    },
    {
        "label": "Point",
        "importPath": "nn_visualizer.geometry.point",
        "description": "nn_visualizer.geometry.point",
        "isExtraImport": true,
        "detail": "nn_visualizer.geometry.point",
        "documentation": {}
    },
    {
        "label": "Point",
        "importPath": "nn_visualizer.geometry.point",
        "description": "nn_visualizer.geometry.point",
        "isExtraImport": true,
        "detail": "nn_visualizer.geometry.point",
        "documentation": {}
    },
    {
        "label": "Point",
        "importPath": "nn_visualizer.geometry.point",
        "description": "nn_visualizer.geometry.point",
        "isExtraImport": true,
        "detail": "nn_visualizer.geometry.point",
        "documentation": {}
    },
    {
        "label": "Point",
        "importPath": "nn_visualizer.geometry.point",
        "description": "nn_visualizer.geometry.point",
        "isExtraImport": true,
        "detail": "nn_visualizer.geometry.point",
        "documentation": {}
    },
    {
        "label": "Point",
        "importPath": "nn_visualizer.geometry.point",
        "description": "nn_visualizer.geometry.point",
        "isExtraImport": true,
        "detail": "nn_visualizer.geometry.point",
        "documentation": {}
    },
    {
        "label": "Point",
        "importPath": "nn_visualizer.geometry.point",
        "description": "nn_visualizer.geometry.point",
        "isExtraImport": true,
        "detail": "nn_visualizer.geometry.point",
        "documentation": {}
    },
    {
        "label": "Point",
        "importPath": "nn_visualizer.geometry.point",
        "description": "nn_visualizer.geometry.point",
        "isExtraImport": true,
        "detail": "nn_visualizer.geometry.point",
        "documentation": {}
    },
    {
        "label": "Point",
        "importPath": "nn_visualizer.geometry.point",
        "description": "nn_visualizer.geometry.point",
        "isExtraImport": true,
        "detail": "nn_visualizer.geometry.point",
        "documentation": {}
    },
    {
        "label": "copy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "copy",
        "description": "copy",
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "deepcopy",
        "importPath": "copy",
        "description": "copy",
        "isExtraImport": true,
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "functools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "functools",
        "description": "functools",
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "reduce",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "reduce",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "reduce",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "reduce",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "reduce",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "reduce",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "LineSegment",
        "importPath": "nn_visualizer.geometry.line_segment",
        "description": "nn_visualizer.geometry.line_segment",
        "isExtraImport": true,
        "detail": "nn_visualizer.geometry.line_segment",
        "documentation": {}
    },
    {
        "label": "LineSegment",
        "importPath": "nn_visualizer.geometry.line_segment",
        "description": "nn_visualizer.geometry.line_segment",
        "isExtraImport": true,
        "detail": "nn_visualizer.geometry.line_segment",
        "documentation": {}
    },
    {
        "label": "LineSegment",
        "importPath": "nn_visualizer.geometry.line_segment",
        "description": "nn_visualizer.geometry.line_segment",
        "isExtraImport": true,
        "detail": "nn_visualizer.geometry.line_segment",
        "documentation": {}
    },
    {
        "label": "LineSegment",
        "importPath": "nn_visualizer.geometry.line_segment",
        "description": "nn_visualizer.geometry.line_segment",
        "isExtraImport": true,
        "detail": "nn_visualizer.geometry.line_segment",
        "documentation": {}
    },
    {
        "label": "LineSegment",
        "importPath": "nn_visualizer.geometry.line_segment",
        "description": "nn_visualizer.geometry.line_segment",
        "isExtraImport": true,
        "detail": "nn_visualizer.geometry.line_segment",
        "documentation": {}
    },
    {
        "label": "LineSegment",
        "importPath": "nn_visualizer.geometry.line_segment",
        "description": "nn_visualizer.geometry.line_segment",
        "isExtraImport": true,
        "detail": "nn_visualizer.geometry.line_segment",
        "documentation": {}
    },
    {
        "label": "LineSegment",
        "importPath": "nn_visualizer.geometry.line_segment",
        "description": "nn_visualizer.geometry.line_segment",
        "isExtraImport": true,
        "detail": "nn_visualizer.geometry.line_segment",
        "documentation": {}
    },
    {
        "label": "LineSegment",
        "importPath": "nn_visualizer.geometry.line_segment",
        "description": "nn_visualizer.geometry.line_segment",
        "isExtraImport": true,
        "detail": "nn_visualizer.geometry.line_segment",
        "documentation": {}
    },
    {
        "label": "LineSegment",
        "importPath": "nn_visualizer.geometry.line_segment",
        "description": "nn_visualizer.geometry.line_segment",
        "isExtraImport": true,
        "detail": "nn_visualizer.geometry.line_segment",
        "documentation": {}
    },
    {
        "label": "LineSegment",
        "importPath": "nn_visualizer.geometry.line_segment",
        "description": "nn_visualizer.geometry.line_segment",
        "isExtraImport": true,
        "detail": "nn_visualizer.geometry.line_segment",
        "documentation": {}
    },
    {
        "label": "LineSegment",
        "importPath": "nn_visualizer.geometry.line_segment",
        "description": "nn_visualizer.geometry.line_segment",
        "isExtraImport": true,
        "detail": "nn_visualizer.geometry.line_segment",
        "documentation": {}
    },
    {
        "label": "LineSegment",
        "importPath": "nn_visualizer.geometry.line_segment",
        "description": "nn_visualizer.geometry.line_segment",
        "isExtraImport": true,
        "detail": "nn_visualizer.geometry.line_segment",
        "documentation": {}
    },
    {
        "label": "Circle",
        "importPath": "nn_visualizer.geometry.circle",
        "description": "nn_visualizer.geometry.circle",
        "isExtraImport": true,
        "detail": "nn_visualizer.geometry.circle",
        "documentation": {}
    },
    {
        "label": "Circle",
        "importPath": "nn_visualizer.geometry.circle",
        "description": "nn_visualizer.geometry.circle",
        "isExtraImport": true,
        "detail": "nn_visualizer.geometry.circle",
        "documentation": {}
    },
    {
        "label": "Circle",
        "importPath": "nn_visualizer.geometry.circle",
        "description": "nn_visualizer.geometry.circle",
        "isExtraImport": true,
        "detail": "nn_visualizer.geometry.circle",
        "documentation": {}
    },
    {
        "label": "Circle",
        "importPath": "nn_visualizer.geometry.circle",
        "description": "nn_visualizer.geometry.circle",
        "isExtraImport": true,
        "detail": "nn_visualizer.geometry.circle",
        "documentation": {}
    },
    {
        "label": "Circle",
        "importPath": "nn_visualizer.geometry.circle",
        "description": "nn_visualizer.geometry.circle",
        "isExtraImport": true,
        "detail": "nn_visualizer.geometry.circle",
        "documentation": {}
    },
    {
        "label": "Circle",
        "importPath": "nn_visualizer.geometry.circle",
        "description": "nn_visualizer.geometry.circle",
        "isExtraImport": true,
        "detail": "nn_visualizer.geometry.circle",
        "documentation": {}
    },
    {
        "label": "Circle",
        "importPath": "nn_visualizer.geometry.circle",
        "description": "nn_visualizer.geometry.circle",
        "isExtraImport": true,
        "detail": "nn_visualizer.geometry.circle",
        "documentation": {}
    },
    {
        "label": "Polygon",
        "importPath": "nn_visualizer.geometry.polygon",
        "description": "nn_visualizer.geometry.polygon",
        "isExtraImport": true,
        "detail": "nn_visualizer.geometry.polygon",
        "documentation": {}
    },
    {
        "label": "Polygon",
        "importPath": "nn_visualizer.geometry.polygon",
        "description": "nn_visualizer.geometry.polygon",
        "isExtraImport": true,
        "detail": "nn_visualizer.geometry.polygon",
        "documentation": {}
    },
    {
        "label": "Polygon",
        "importPath": "nn_visualizer.geometry.polygon",
        "description": "nn_visualizer.geometry.polygon",
        "isExtraImport": true,
        "detail": "nn_visualizer.geometry.polygon",
        "documentation": {}
    },
    {
        "label": "Polygon",
        "importPath": "nn_visualizer.geometry.polygon",
        "description": "nn_visualizer.geometry.polygon",
        "isExtraImport": true,
        "detail": "nn_visualizer.geometry.polygon",
        "documentation": {}
    },
    {
        "label": "Polygon",
        "importPath": "nn_visualizer.geometry.polygon",
        "description": "nn_visualizer.geometry.polygon",
        "isExtraImport": true,
        "detail": "nn_visualizer.geometry.polygon",
        "documentation": {}
    },
    {
        "label": "Polygon",
        "importPath": "nn_visualizer.geometry.polygon",
        "description": "nn_visualizer.geometry.polygon",
        "isExtraImport": true,
        "detail": "nn_visualizer.geometry.polygon",
        "documentation": {}
    },
    {
        "label": "Polygon",
        "importPath": "nn_visualizer.geometry.polygon",
        "description": "nn_visualizer.geometry.polygon",
        "isExtraImport": true,
        "detail": "nn_visualizer.geometry.polygon",
        "documentation": {}
    },
    {
        "label": "Polygon",
        "importPath": "nn_visualizer.geometry.polygon",
        "description": "nn_visualizer.geometry.polygon",
        "isExtraImport": true,
        "detail": "nn_visualizer.geometry.polygon",
        "documentation": {}
    },
    {
        "label": "Polygon",
        "importPath": "nn_visualizer.geometry.polygon",
        "description": "nn_visualizer.geometry.polygon",
        "isExtraImport": true,
        "detail": "nn_visualizer.geometry.polygon",
        "documentation": {}
    },
    {
        "label": "Polygon",
        "importPath": "nn_visualizer.geometry.polygon",
        "description": "nn_visualizer.geometry.polygon",
        "isExtraImport": true,
        "detail": "nn_visualizer.geometry.polygon",
        "documentation": {}
    },
    {
        "label": "Polygon",
        "importPath": "nn_visualizer.geometry.polygon",
        "description": "nn_visualizer.geometry.polygon",
        "isExtraImport": true,
        "detail": "nn_visualizer.geometry.polygon",
        "documentation": {}
    },
    {
        "label": "Polygon",
        "importPath": "nn_visualizer.geometry.polygon",
        "description": "nn_visualizer.geometry.polygon",
        "isExtraImport": true,
        "detail": "nn_visualizer.geometry.polygon",
        "documentation": {}
    },
    {
        "label": "Polygon",
        "importPath": "nn_visualizer.geometry.polygon",
        "description": "nn_visualizer.geometry.polygon",
        "isExtraImport": true,
        "detail": "nn_visualizer.geometry.polygon",
        "documentation": {}
    },
    {
        "label": "EditorContainer",
        "importPath": "nn_visualizer.ui_components.components_editors.editor_container",
        "description": "nn_visualizer.ui_components.components_editors.editor_container",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.components_editors.editor_container",
        "documentation": {}
    },
    {
        "label": "EditorContainer",
        "importPath": "nn_visualizer.ui_components.components_editors.editor_container",
        "description": "nn_visualizer.ui_components.components_editors.editor_container",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.components_editors.editor_container",
        "documentation": {}
    },
    {
        "label": "EditorContainer",
        "importPath": "nn_visualizer.ui_components.components_editors.editor_container",
        "description": "nn_visualizer.ui_components.components_editors.editor_container",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.components_editors.editor_container",
        "documentation": {}
    },
    {
        "label": "EditorContainer",
        "importPath": "nn_visualizer.ui_components.components_editors.editor_container",
        "description": "nn_visualizer.ui_components.components_editors.editor_container",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.components_editors.editor_container",
        "documentation": {}
    },
    {
        "label": "EditorContainer",
        "importPath": "nn_visualizer.ui_components.components_editors.editor_container",
        "description": "nn_visualizer.ui_components.components_editors.editor_container",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.components_editors.editor_container",
        "documentation": {}
    },
    {
        "label": "EditorContainer",
        "importPath": "nn_visualizer.ui_components.components_editors.editor_container",
        "description": "nn_visualizer.ui_components.components_editors.editor_container",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.components_editors.editor_container",
        "documentation": {}
    },
    {
        "label": "EditorContainer",
        "importPath": "nn_visualizer.ui_components.components_editors.editor_container",
        "description": "nn_visualizer.ui_components.components_editors.editor_container",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.components_editors.editor_container",
        "documentation": {}
    },
    {
        "label": "EditingDense",
        "importPath": "nn_visualizer.application_context.application_context",
        "description": "nn_visualizer.application_context.application_context",
        "isExtraImport": true,
        "detail": "nn_visualizer.application_context.application_context",
        "documentation": {}
    },
    {
        "label": "EditingDense",
        "importPath": "nn_visualizer.application_context.application_context",
        "description": "nn_visualizer.application_context.application_context",
        "isExtraImport": true,
        "detail": "nn_visualizer.application_context.application_context",
        "documentation": {}
    },
    {
        "label": "EditingDense",
        "importPath": "nn_visualizer.application_context.application_context",
        "description": "nn_visualizer.application_context.application_context",
        "isExtraImport": true,
        "detail": "nn_visualizer.application_context.application_context",
        "documentation": {}
    },
    {
        "label": "EditingDropout",
        "importPath": "nn_visualizer.application_context.application_context",
        "description": "nn_visualizer.application_context.application_context",
        "isExtraImport": true,
        "detail": "nn_visualizer.application_context.application_context",
        "documentation": {}
    },
    {
        "label": "EditingDense",
        "importPath": "nn_visualizer.application_context.application_context",
        "description": "nn_visualizer.application_context.application_context",
        "isExtraImport": true,
        "detail": "nn_visualizer.application_context.application_context",
        "documentation": {}
    },
    {
        "label": "EditingDense",
        "importPath": "nn_visualizer.application_context.application_context",
        "description": "nn_visualizer.application_context.application_context",
        "isExtraImport": true,
        "detail": "nn_visualizer.application_context.application_context",
        "documentation": {}
    },
    {
        "label": "EditingDropout",
        "importPath": "nn_visualizer.application_context.application_context",
        "description": "nn_visualizer.application_context.application_context",
        "isExtraImport": true,
        "detail": "nn_visualizer.application_context.application_context",
        "documentation": {}
    },
    {
        "label": "EditingDense",
        "importPath": "nn_visualizer.application_context.application_context",
        "description": "nn_visualizer.application_context.application_context",
        "isExtraImport": true,
        "detail": "nn_visualizer.application_context.application_context",
        "documentation": {}
    },
    {
        "label": "EditingLayer",
        "importPath": "nn_visualizer.application_context.application_context",
        "description": "nn_visualizer.application_context.application_context",
        "isExtraImport": true,
        "detail": "nn_visualizer.application_context.application_context",
        "documentation": {}
    },
    {
        "label": "EditingDense",
        "importPath": "nn_visualizer.application_context.application_context",
        "description": "nn_visualizer.application_context.application_context",
        "isExtraImport": true,
        "detail": "nn_visualizer.application_context.application_context",
        "documentation": {}
    },
    {
        "label": "EditingDropout",
        "importPath": "nn_visualizer.application_context.application_context",
        "description": "nn_visualizer.application_context.application_context",
        "isExtraImport": true,
        "detail": "nn_visualizer.application_context.application_context",
        "documentation": {}
    },
    {
        "label": "EditingDense",
        "importPath": "nn_visualizer.application_context.application_context",
        "description": "nn_visualizer.application_context.application_context",
        "isExtraImport": true,
        "detail": "nn_visualizer.application_context.application_context",
        "documentation": {}
    },
    {
        "label": "EditingDropout",
        "importPath": "nn_visualizer.application_context.application_context",
        "description": "nn_visualizer.application_context.application_context",
        "isExtraImport": true,
        "detail": "nn_visualizer.application_context.application_context",
        "documentation": {}
    },
    {
        "label": "ApplicationContext",
        "importPath": "nn_visualizer.application_context.application_context",
        "description": "nn_visualizer.application_context.application_context",
        "isExtraImport": true,
        "detail": "nn_visualizer.application_context.application_context",
        "documentation": {}
    },
    {
        "label": "ApplicationContext",
        "importPath": "nn_visualizer.application_context.application_context",
        "description": "nn_visualizer.application_context.application_context",
        "isExtraImport": true,
        "detail": "nn_visualizer.application_context.application_context",
        "documentation": {}
    },
    {
        "label": "ApplicationState",
        "importPath": "nn_visualizer.application_context.application_context",
        "description": "nn_visualizer.application_context.application_context",
        "isExtraImport": true,
        "detail": "nn_visualizer.application_context.application_context",
        "documentation": {}
    },
    {
        "label": "ApplicationContext",
        "importPath": "nn_visualizer.application_context.application_context",
        "description": "nn_visualizer.application_context.application_context",
        "isExtraImport": true,
        "detail": "nn_visualizer.application_context.application_context",
        "documentation": {}
    },
    {
        "label": "ApplicationState",
        "importPath": "nn_visualizer.application_context.application_context",
        "description": "nn_visualizer.application_context.application_context",
        "isExtraImport": true,
        "detail": "nn_visualizer.application_context.application_context",
        "documentation": {}
    },
    {
        "label": "ApplicationContext",
        "importPath": "nn_visualizer.application_context.application_context",
        "description": "nn_visualizer.application_context.application_context",
        "isExtraImport": true,
        "detail": "nn_visualizer.application_context.application_context",
        "documentation": {}
    },
    {
        "label": "ApplicationContext",
        "importPath": "nn_visualizer.application_context.application_context",
        "description": "nn_visualizer.application_context.application_context",
        "isExtraImport": true,
        "detail": "nn_visualizer.application_context.application_context",
        "documentation": {}
    },
    {
        "label": "ApplicationState",
        "importPath": "nn_visualizer.application_context.application_context",
        "description": "nn_visualizer.application_context.application_context",
        "isExtraImport": true,
        "detail": "nn_visualizer.application_context.application_context",
        "documentation": {}
    },
    {
        "label": "ApplicationState",
        "importPath": "nn_visualizer.application_context.application_context",
        "description": "nn_visualizer.application_context.application_context",
        "isExtraImport": true,
        "detail": "nn_visualizer.application_context.application_context",
        "documentation": {}
    },
    {
        "label": "ApplicationContext",
        "importPath": "nn_visualizer.application_context.application_context",
        "description": "nn_visualizer.application_context.application_context",
        "isExtraImport": true,
        "detail": "nn_visualizer.application_context.application_context",
        "documentation": {}
    },
    {
        "label": "ApplicationContext",
        "importPath": "nn_visualizer.application_context.application_context",
        "description": "nn_visualizer.application_context.application_context",
        "isExtraImport": true,
        "detail": "nn_visualizer.application_context.application_context",
        "documentation": {}
    },
    {
        "label": "ApplicationState",
        "importPath": "nn_visualizer.application_context.application_context",
        "description": "nn_visualizer.application_context.application_context",
        "isExtraImport": true,
        "detail": "nn_visualizer.application_context.application_context",
        "documentation": {}
    },
    {
        "label": "EditingBatchNormalization",
        "importPath": "nn_visualizer.application_context.application_context",
        "description": "nn_visualizer.application_context.application_context",
        "isExtraImport": true,
        "detail": "nn_visualizer.application_context.application_context",
        "documentation": {}
    },
    {
        "label": "EditingDense",
        "importPath": "nn_visualizer.application_context.application_context",
        "description": "nn_visualizer.application_context.application_context",
        "isExtraImport": true,
        "detail": "nn_visualizer.application_context.application_context",
        "documentation": {}
    },
    {
        "label": "EditingDropout",
        "importPath": "nn_visualizer.application_context.application_context",
        "description": "nn_visualizer.application_context.application_context",
        "isExtraImport": true,
        "detail": "nn_visualizer.application_context.application_context",
        "documentation": {}
    },
    {
        "label": "EditingInput",
        "importPath": "nn_visualizer.application_context.application_context",
        "description": "nn_visualizer.application_context.application_context",
        "isExtraImport": true,
        "detail": "nn_visualizer.application_context.application_context",
        "documentation": {}
    },
    {
        "label": "ActivationComboBox",
        "importPath": "nn_visualizer.ui_components.components_editors.dense_visualizer_editor.activation_combo_box",
        "description": "nn_visualizer.ui_components.components_editors.dense_visualizer_editor.activation_combo_box",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.components_editors.dense_visualizer_editor.activation_combo_box",
        "documentation": {}
    },
    {
        "label": "ActivationComboBox",
        "importPath": "nn_visualizer.ui_components.components_editors.dense_visualizer_editor.activation_combo_box",
        "description": "nn_visualizer.ui_components.components_editors.dense_visualizer_editor.activation_combo_box",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.components_editors.dense_visualizer_editor.activation_combo_box",
        "documentation": {}
    },
    {
        "label": "ComponentNameContainer",
        "importPath": "nn_visualizer.ui_components.components_editors.shared.component_name_container.component_name_container",
        "description": "nn_visualizer.ui_components.components_editors.shared.component_name_container.component_name_container",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.components_editors.shared.component_name_container.component_name_container",
        "documentation": {}
    },
    {
        "label": "ComponentNameContainer",
        "importPath": "nn_visualizer.ui_components.components_editors.shared.component_name_container.component_name_container",
        "description": "nn_visualizer.ui_components.components_editors.shared.component_name_container.component_name_container",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.components_editors.shared.component_name_container.component_name_container",
        "documentation": {}
    },
    {
        "label": "ComponentNameContainer",
        "importPath": "nn_visualizer.ui_components.components_editors.shared.component_name_container.component_name_container",
        "description": "nn_visualizer.ui_components.components_editors.shared.component_name_container.component_name_container",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.components_editors.shared.component_name_container.component_name_container",
        "documentation": {}
    },
    {
        "label": "ComponentNameContainer",
        "importPath": "nn_visualizer.ui_components.components_editors.shared.component_name_container.component_name_container",
        "description": "nn_visualizer.ui_components.components_editors.shared.component_name_container.component_name_container",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.components_editors.shared.component_name_container.component_name_container",
        "documentation": {}
    },
    {
        "label": "ComponentNameContainer",
        "importPath": "nn_visualizer.ui_components.components_editors.shared.component_name_container.component_name_container",
        "description": "nn_visualizer.ui_components.components_editors.shared.component_name_container.component_name_container",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.components_editors.shared.component_name_container.component_name_container",
        "documentation": {}
    },
    {
        "label": "ComponentNameContainer",
        "importPath": "nn_visualizer.ui_components.components_editors.shared.component_name_container.component_name_container",
        "description": "nn_visualizer.ui_components.components_editors.shared.component_name_container.component_name_container",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.components_editors.shared.component_name_container.component_name_container",
        "documentation": {}
    },
    {
        "label": "ComponentNameContainer",
        "importPath": "nn_visualizer.ui_components.components_editors.shared.component_name_container.component_name_container",
        "description": "nn_visualizer.ui_components.components_editors.shared.component_name_container.component_name_container",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.components_editors.shared.component_name_container.component_name_container",
        "documentation": {}
    },
    {
        "label": "UnitsNumberEditor",
        "importPath": "nn_visualizer.ui_components.components_editors.shared.units_number_change.units_number_change",
        "description": "nn_visualizer.ui_components.components_editors.shared.units_number_change.units_number_change",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.components_editors.shared.units_number_change.units_number_change",
        "documentation": {}
    },
    {
        "label": "UnitsNumberEditor",
        "importPath": "nn_visualizer.ui_components.components_editors.shared.units_number_change.units_number_change",
        "description": "nn_visualizer.ui_components.components_editors.shared.units_number_change.units_number_change",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.components_editors.shared.units_number_change.units_number_change",
        "documentation": {}
    },
    {
        "label": "UnitsNumberEditor",
        "importPath": "nn_visualizer.ui_components.components_editors.shared.units_number_change.units_number_change",
        "description": "nn_visualizer.ui_components.components_editors.shared.units_number_change.units_number_change",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.components_editors.shared.units_number_change.units_number_change",
        "documentation": {}
    },
    {
        "label": "UnitsNumberEditor",
        "importPath": "nn_visualizer.ui_components.components_editors.shared.units_number_change.units_number_change",
        "description": "nn_visualizer.ui_components.components_editors.shared.units_number_change.units_number_change",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.components_editors.shared.units_number_change.units_number_change",
        "documentation": {}
    },
    {
        "label": "UnitsNumberEditor",
        "importPath": "nn_visualizer.ui_components.components_editors.shared.units_number_change.units_number_change",
        "description": "nn_visualizer.ui_components.components_editors.shared.units_number_change.units_number_change",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.components_editors.shared.units_number_change.units_number_change",
        "documentation": {}
    },
    {
        "label": "UnitsNumberEditor",
        "importPath": "nn_visualizer.ui_components.components_editors.shared.units_number_change.units_number_change",
        "description": "nn_visualizer.ui_components.components_editors.shared.units_number_change.units_number_change",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.components_editors.shared.units_number_change.units_number_change",
        "documentation": {}
    },
    {
        "label": "UnitsNumberEditor",
        "importPath": "nn_visualizer.ui_components.components_editors.shared.units_number_change.units_number_change",
        "description": "nn_visualizer.ui_components.components_editors.shared.units_number_change.units_number_change",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.components_editors.shared.units_number_change.units_number_change",
        "documentation": {}
    },
    {
        "label": "ItemLabel",
        "importPath": "nn_visualizer.ui_components.customized.label.item_label",
        "description": "nn_visualizer.ui_components.customized.label.item_label",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.customized.label.item_label",
        "documentation": {}
    },
    {
        "label": "ItemLabel",
        "importPath": "nn_visualizer.ui_components.customized.label.item_label",
        "description": "nn_visualizer.ui_components.customized.label.item_label",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.customized.label.item_label",
        "documentation": {}
    },
    {
        "label": "ItemLabel",
        "importPath": "nn_visualizer.ui_components.customized.label.item_label",
        "description": "nn_visualizer.ui_components.customized.label.item_label",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.customized.label.item_label",
        "documentation": {}
    },
    {
        "label": "ItemLabel",
        "importPath": "nn_visualizer.ui_components.customized.label.item_label",
        "description": "nn_visualizer.ui_components.customized.label.item_label",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.customized.label.item_label",
        "documentation": {}
    },
    {
        "label": "ItemLabel",
        "importPath": "nn_visualizer.ui_components.customized.label.item_label",
        "description": "nn_visualizer.ui_components.customized.label.item_label",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.customized.label.item_label",
        "documentation": {}
    },
    {
        "label": "ItemLabel",
        "importPath": "nn_visualizer.ui_components.customized.label.item_label",
        "description": "nn_visualizer.ui_components.customized.label.item_label",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.customized.label.item_label",
        "documentation": {}
    },
    {
        "label": "ItemLabel",
        "importPath": "nn_visualizer.ui_components.customized.label.item_label",
        "description": "nn_visualizer.ui_components.customized.label.item_label",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.customized.label.item_label",
        "documentation": {}
    },
    {
        "label": "ItemLabel",
        "importPath": "nn_visualizer.ui_components.customized.label.item_label",
        "description": "nn_visualizer.ui_components.customized.label.item_label",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.customized.label.item_label",
        "documentation": {}
    },
    {
        "label": "ItemLabel",
        "importPath": "nn_visualizer.ui_components.customized.label.item_label",
        "description": "nn_visualizer.ui_components.customized.label.item_label",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.customized.label.item_label",
        "documentation": {}
    },
    {
        "label": "ItemLabel",
        "importPath": "nn_visualizer.ui_components.customized.label.item_label",
        "description": "nn_visualizer.ui_components.customized.label.item_label",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.customized.label.item_label",
        "documentation": {}
    },
    {
        "label": "ItemLabel",
        "importPath": "nn_visualizer.ui_components.customized.label.item_label",
        "description": "nn_visualizer.ui_components.customized.label.item_label",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.customized.label.item_label",
        "documentation": {}
    },
    {
        "label": "DoubleSlider",
        "importPath": "nn_visualizer.ui_components.customized.double_slider.double_slider",
        "description": "nn_visualizer.ui_components.customized.double_slider.double_slider",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.customized.double_slider.double_slider",
        "documentation": {}
    },
    {
        "label": "DoubleSlider",
        "importPath": "nn_visualizer.ui_components.customized.double_slider.double_slider",
        "description": "nn_visualizer.ui_components.customized.double_slider.double_slider",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.customized.double_slider.double_slider",
        "documentation": {}
    },
    {
        "label": "DoubleSlider",
        "importPath": "nn_visualizer.ui_components.customized.double_slider.double_slider",
        "description": "nn_visualizer.ui_components.customized.double_slider.double_slider",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.customized.double_slider.double_slider",
        "documentation": {}
    },
    {
        "label": "DoubleSlider",
        "importPath": "nn_visualizer.ui_components.customized.double_slider.double_slider",
        "description": "nn_visualizer.ui_components.customized.double_slider.double_slider",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.customized.double_slider.double_slider",
        "documentation": {}
    },
    {
        "label": "DoubleSlider",
        "importPath": "nn_visualizer.ui_components.customized.double_slider.double_slider",
        "description": "nn_visualizer.ui_components.customized.double_slider.double_slider",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.customized.double_slider.double_slider",
        "documentation": {}
    },
    {
        "label": "SMLFIconButton",
        "importPath": "nn_visualizer.ui_components.customized.button.smlf_icon_button",
        "description": "nn_visualizer.ui_components.customized.button.smlf_icon_button",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.customized.button.smlf_icon_button",
        "documentation": {}
    },
    {
        "label": "SMLFIconButton",
        "importPath": "nn_visualizer.ui_components.customized.button.smlf_icon_button",
        "description": "nn_visualizer.ui_components.customized.button.smlf_icon_button",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.customized.button.smlf_icon_button",
        "documentation": {}
    },
    {
        "label": "SMLFIconButton",
        "importPath": "nn_visualizer.ui_components.customized.button.smlf_icon_button",
        "description": "nn_visualizer.ui_components.customized.button.smlf_icon_button",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.customized.button.smlf_icon_button",
        "documentation": {}
    },
    {
        "label": "SMLFIconButton",
        "importPath": "nn_visualizer.ui_components.customized.button.smlf_icon_button",
        "description": "nn_visualizer.ui_components.customized.button.smlf_icon_button",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.customized.button.smlf_icon_button",
        "documentation": {}
    },
    {
        "label": "Colors",
        "importPath": "nn_visualizer.ui_components.theme.theme",
        "description": "nn_visualizer.ui_components.theme.theme",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.theme.theme",
        "documentation": {}
    },
    {
        "label": "TextSize",
        "importPath": "nn_visualizer.ui_components.theme.theme",
        "description": "nn_visualizer.ui_components.theme.theme",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.theme.theme",
        "documentation": {}
    },
    {
        "label": "Colors",
        "importPath": "nn_visualizer.ui_components.theme.theme",
        "description": "nn_visualizer.ui_components.theme.theme",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.theme.theme",
        "documentation": {}
    },
    {
        "label": "Colors",
        "importPath": "nn_visualizer.ui_components.theme.theme",
        "description": "nn_visualizer.ui_components.theme.theme",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.theme.theme",
        "documentation": {}
    },
    {
        "label": "SMLFIconRoundButton",
        "importPath": "nn_visualizer.ui_components.customized.button.smlf_icon_round_button",
        "description": "nn_visualizer.ui_components.customized.button.smlf_icon_round_button",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.customized.button.smlf_icon_round_button",
        "documentation": {}
    },
    {
        "label": "DenseVisualizerEditor",
        "importPath": "nn_visualizer.ui_components.components_editors.dense_visualizer_editor.dense_visualizer_editor",
        "description": "nn_visualizer.ui_components.components_editors.dense_visualizer_editor.dense_visualizer_editor",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.components_editors.dense_visualizer_editor.dense_visualizer_editor",
        "documentation": {}
    },
    {
        "label": "DenseVisualizerEditor",
        "importPath": "nn_visualizer.ui_components.components_editors.dense_visualizer_editor.dense_visualizer_editor",
        "description": "nn_visualizer.ui_components.components_editors.dense_visualizer_editor.dense_visualizer_editor",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.components_editors.dense_visualizer_editor.dense_visualizer_editor",
        "documentation": {}
    },
    {
        "label": "DenseVisualizerEditor",
        "importPath": "nn_visualizer.ui_components.components_editors.dense_visualizer_editor.dense_visualizer_editor",
        "description": "nn_visualizer.ui_components.components_editors.dense_visualizer_editor.dense_visualizer_editor",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.components_editors.dense_visualizer_editor.dense_visualizer_editor",
        "documentation": {}
    },
    {
        "label": "NextStepButton",
        "importPath": "nn_visualizer.ui_components.control_panel.buttons.step_buttons.next_step_button",
        "description": "nn_visualizer.ui_components.control_panel.buttons.step_buttons.next_step_button",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.control_panel.buttons.step_buttons.next_step_button",
        "documentation": {}
    },
    {
        "label": "NextStepButton",
        "importPath": "nn_visualizer.ui_components.control_panel.buttons.step_buttons.next_step_button",
        "description": "nn_visualizer.ui_components.control_panel.buttons.step_buttons.next_step_button",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.control_panel.buttons.step_buttons.next_step_button",
        "documentation": {}
    },
    {
        "label": "PlayFullButton",
        "importPath": "nn_visualizer.ui_components.control_panel.buttons.step_buttons.play_full_button",
        "description": "nn_visualizer.ui_components.control_panel.buttons.step_buttons.play_full_button",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.control_panel.buttons.step_buttons.play_full_button",
        "documentation": {}
    },
    {
        "label": "PlayFullButton",
        "importPath": "nn_visualizer.ui_components.control_panel.buttons.step_buttons.play_full_button",
        "description": "nn_visualizer.ui_components.control_panel.buttons.step_buttons.play_full_button",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.control_panel.buttons.step_buttons.play_full_button",
        "documentation": {}
    },
    {
        "label": "ResetButton",
        "importPath": "nn_visualizer.ui_components.control_panel.buttons.step_buttons.reset_button",
        "description": "nn_visualizer.ui_components.control_panel.buttons.step_buttons.reset_button",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.control_panel.buttons.step_buttons.reset_button",
        "documentation": {}
    },
    {
        "label": "ResetButton",
        "importPath": "nn_visualizer.ui_components.control_panel.buttons.step_buttons.reset_button",
        "description": "nn_visualizer.ui_components.control_panel.buttons.step_buttons.reset_button",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.control_panel.buttons.step_buttons.reset_button",
        "documentation": {}
    },
    {
        "label": "LearningRateSliderContainer",
        "importPath": "nn_visualizer.ui_components.control_panel.learning_rate_slider_container",
        "description": "nn_visualizer.ui_components.control_panel.learning_rate_slider_container",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.control_panel.learning_rate_slider_container",
        "documentation": {}
    },
    {
        "label": "LearningRateSliderContainer",
        "importPath": "nn_visualizer.ui_components.control_panel.learning_rate_slider_container",
        "description": "nn_visualizer.ui_components.control_panel.learning_rate_slider_container",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.control_panel.learning_rate_slider_container",
        "documentation": {}
    },
    {
        "label": "LossesPanel",
        "importPath": "nn_visualizer.ui_components.losses.losses_panel",
        "description": "nn_visualizer.ui_components.losses.losses_panel",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.losses.losses_panel",
        "documentation": {}
    },
    {
        "label": "LossesPanel",
        "importPath": "nn_visualizer.ui_components.losses.losses_panel",
        "description": "nn_visualizer.ui_components.losses.losses_panel",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.losses.losses_panel",
        "documentation": {}
    },
    {
        "label": "orientation",
        "importPath": "nn_visualizer.geometry.utils",
        "description": "nn_visualizer.geometry.utils",
        "isExtraImport": true,
        "detail": "nn_visualizer.geometry.utils",
        "documentation": {}
    },
    {
        "label": "point_lies_on_circle",
        "importPath": "nn_visualizer.geometry.utils",
        "description": "nn_visualizer.geometry.utils",
        "isExtraImport": true,
        "detail": "nn_visualizer.geometry.utils",
        "documentation": {}
    },
    {
        "label": "point_lies_on_polygon",
        "importPath": "nn_visualizer.geometry.utils",
        "description": "nn_visualizer.geometry.utils",
        "isExtraImport": true,
        "detail": "nn_visualizer.geometry.utils",
        "documentation": {}
    },
    {
        "label": "trace_path",
        "importPath": "nn_visualizer.geometry.utils",
        "description": "nn_visualizer.geometry.utils",
        "isExtraImport": true,
        "detail": "nn_visualizer.geometry.utils",
        "documentation": {}
    },
    {
        "label": "tracing_current_origin",
        "importPath": "nn_visualizer.geometry.utils",
        "description": "nn_visualizer.geometry.utils",
        "isExtraImport": true,
        "detail": "nn_visualizer.geometry.utils",
        "documentation": {}
    },
    {
        "label": "point_lies_on_circle",
        "importPath": "nn_visualizer.geometry.utils",
        "description": "nn_visualizer.geometry.utils",
        "isExtraImport": true,
        "detail": "nn_visualizer.geometry.utils",
        "documentation": {}
    },
    {
        "label": "point_lies_on_polygon",
        "importPath": "nn_visualizer.geometry.utils",
        "description": "nn_visualizer.geometry.utils",
        "isExtraImport": true,
        "detail": "nn_visualizer.geometry.utils",
        "documentation": {}
    },
    {
        "label": "point_lies_on_circle",
        "importPath": "nn_visualizer.geometry.utils",
        "description": "nn_visualizer.geometry.utils",
        "isExtraImport": true,
        "detail": "nn_visualizer.geometry.utils",
        "documentation": {}
    },
    {
        "label": "point_lies_on_polygon",
        "importPath": "nn_visualizer.geometry.utils",
        "description": "nn_visualizer.geometry.utils",
        "isExtraImport": true,
        "detail": "nn_visualizer.geometry.utils",
        "documentation": {}
    },
    {
        "label": "point_lies_on_polygon",
        "importPath": "nn_visualizer.geometry.utils",
        "description": "nn_visualizer.geometry.utils",
        "isExtraImport": true,
        "detail": "nn_visualizer.geometry.utils",
        "documentation": {}
    },
    {
        "label": "point_lies_on_circle",
        "importPath": "nn_visualizer.geometry.utils",
        "description": "nn_visualizer.geometry.utils",
        "isExtraImport": true,
        "detail": "nn_visualizer.geometry.utils",
        "documentation": {}
    },
    {
        "label": "point_lies_on_polygon",
        "importPath": "nn_visualizer.geometry.utils",
        "description": "nn_visualizer.geometry.utils",
        "isExtraImport": true,
        "detail": "nn_visualizer.geometry.utils",
        "documentation": {}
    },
    {
        "label": "point_lies_on_circle",
        "importPath": "nn_visualizer.geometry.utils",
        "description": "nn_visualizer.geometry.utils",
        "isExtraImport": true,
        "detail": "nn_visualizer.geometry.utils",
        "documentation": {}
    },
    {
        "label": "point_lies_on_polygon",
        "importPath": "nn_visualizer.geometry.utils",
        "description": "nn_visualizer.geometry.utils",
        "isExtraImport": true,
        "detail": "nn_visualizer.geometry.utils",
        "documentation": {}
    },
    {
        "label": "point_lies_on_polygon",
        "importPath": "nn_visualizer.geometry.utils",
        "description": "nn_visualizer.geometry.utils",
        "isExtraImport": true,
        "detail": "nn_visualizer.geometry.utils",
        "documentation": {}
    },
    {
        "label": "point_lies_on_circle",
        "importPath": "nn_visualizer.geometry.utils",
        "description": "nn_visualizer.geometry.utils",
        "isExtraImport": true,
        "detail": "nn_visualizer.geometry.utils",
        "documentation": {}
    },
    {
        "label": "point_lies_on_polygon",
        "importPath": "nn_visualizer.geometry.utils",
        "description": "nn_visualizer.geometry.utils",
        "isExtraImport": true,
        "detail": "nn_visualizer.geometry.utils",
        "documentation": {}
    },
    {
        "label": "point_lies_on_circle",
        "importPath": "nn_visualizer.geometry.utils",
        "description": "nn_visualizer.geometry.utils",
        "isExtraImport": true,
        "detail": "nn_visualizer.geometry.utils",
        "documentation": {}
    },
    {
        "label": "trace_path",
        "importPath": "nn_visualizer.geometry.utils",
        "description": "nn_visualizer.geometry.utils",
        "isExtraImport": true,
        "detail": "nn_visualizer.geometry.utils",
        "documentation": {}
    },
    {
        "label": "tracing_current_origin",
        "importPath": "nn_visualizer.geometry.utils",
        "description": "nn_visualizer.geometry.utils",
        "isExtraImport": true,
        "detail": "nn_visualizer.geometry.utils",
        "documentation": {}
    },
    {
        "label": "is_zero",
        "importPath": "nn_visualizer.geometry.utils",
        "description": "nn_visualizer.geometry.utils",
        "isExtraImport": true,
        "detail": "nn_visualizer.geometry.utils",
        "documentation": {}
    },
    {
        "label": "line_segments_intersects",
        "importPath": "nn_visualizer.geometry.utils",
        "description": "nn_visualizer.geometry.utils",
        "isExtraImport": true,
        "detail": "nn_visualizer.geometry.utils",
        "documentation": {}
    },
    {
        "label": "trace_path",
        "importPath": "nn_visualizer.geometry.utils",
        "description": "nn_visualizer.geometry.utils",
        "isExtraImport": true,
        "detail": "nn_visualizer.geometry.utils",
        "documentation": {}
    },
    {
        "label": "tracing_current_origin",
        "importPath": "nn_visualizer.geometry.utils",
        "description": "nn_visualizer.geometry.utils",
        "isExtraImport": true,
        "detail": "nn_visualizer.geometry.utils",
        "documentation": {}
    },
    {
        "label": "accumulate",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "starmap",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "accumulate",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "starmap",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "starmap",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "json_style_to_css",
        "importPath": "nn_visualizer.ui_components.theme.utils",
        "description": "nn_visualizer.ui_components.theme.utils",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.theme.utils",
        "documentation": {}
    },
    {
        "label": "json_style_to_css",
        "importPath": "nn_visualizer.ui_components.theme.utils",
        "description": "nn_visualizer.ui_components.theme.utils",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.theme.utils",
        "documentation": {}
    },
    {
        "label": "json_style_to_css",
        "importPath": "nn_visualizer.ui_components.theme.utils",
        "description": "nn_visualizer.ui_components.theme.utils",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.theme.utils",
        "documentation": {}
    },
    {
        "label": "CanvasDrawable",
        "importPath": "nn_visualizer.ui_components.canvas_drawable",
        "description": "nn_visualizer.ui_components.canvas_drawable",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.canvas_drawable",
        "documentation": {}
    },
    {
        "label": "CanvasDrawable",
        "importPath": "nn_visualizer.ui_components.canvas_drawable",
        "description": "nn_visualizer.ui_components.canvas_drawable",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.canvas_drawable",
        "documentation": {}
    },
    {
        "label": "CanvasDrawable",
        "importPath": "nn_visualizer.ui_components.canvas_drawable",
        "description": "nn_visualizer.ui_components.canvas_drawable",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.canvas_drawable",
        "documentation": {}
    },
    {
        "label": "CanvasDrawable",
        "importPath": "nn_visualizer.ui_components.canvas_drawable",
        "description": "nn_visualizer.ui_components.canvas_drawable",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.canvas_drawable",
        "documentation": {}
    },
    {
        "label": "CanvasDrawable",
        "importPath": "nn_visualizer.ui_components.canvas_drawable",
        "description": "nn_visualizer.ui_components.canvas_drawable",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.canvas_drawable",
        "documentation": {}
    },
    {
        "label": "CanvasDrawable",
        "importPath": "nn_visualizer.ui_components.canvas_drawable",
        "description": "nn_visualizer.ui_components.canvas_drawable",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.canvas_drawable",
        "documentation": {}
    },
    {
        "label": "CanvasDrawable",
        "importPath": "nn_visualizer.ui_components.canvas_drawable",
        "description": "nn_visualizer.ui_components.canvas_drawable",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.canvas_drawable",
        "documentation": {}
    },
    {
        "label": "CanvasDrawable",
        "importPath": "nn_visualizer.ui_components.canvas_drawable",
        "description": "nn_visualizer.ui_components.canvas_drawable",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.canvas_drawable",
        "documentation": {}
    },
    {
        "label": "CanvasDrawable",
        "importPath": "nn_visualizer.ui_components.canvas_drawable",
        "description": "nn_visualizer.ui_components.canvas_drawable",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.canvas_drawable",
        "documentation": {}
    },
    {
        "label": "CanvasDrawable",
        "importPath": "nn_visualizer.ui_components.canvas_drawable",
        "description": "nn_visualizer.ui_components.canvas_drawable",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.canvas_drawable",
        "documentation": {}
    },
    {
        "label": "CanvasDrawable",
        "importPath": "nn_visualizer.ui_components.canvas_drawable",
        "description": "nn_visualizer.ui_components.canvas_drawable",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.canvas_drawable",
        "documentation": {}
    },
    {
        "label": "CanvasDrawable",
        "importPath": "nn_visualizer.ui_components.canvas_drawable",
        "description": "nn_visualizer.ui_components.canvas_drawable",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.canvas_drawable",
        "documentation": {}
    },
    {
        "label": "CanvasDrawable",
        "importPath": "nn_visualizer.ui_components.canvas_drawable",
        "description": "nn_visualizer.ui_components.canvas_drawable",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.canvas_drawable",
        "documentation": {}
    },
    {
        "label": "CanvasDrawable",
        "importPath": "nn_visualizer.ui_components.canvas_drawable",
        "description": "nn_visualizer.ui_components.canvas_drawable",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.canvas_drawable",
        "documentation": {}
    },
    {
        "label": "CanvasDrawable",
        "importPath": "nn_visualizer.ui_components.canvas_drawable",
        "description": "nn_visualizer.ui_components.canvas_drawable",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.canvas_drawable",
        "documentation": {}
    },
    {
        "label": "CanvasDrawable",
        "importPath": "nn_visualizer.ui_components.canvas_drawable",
        "description": "nn_visualizer.ui_components.canvas_drawable",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.canvas_drawable",
        "documentation": {}
    },
    {
        "label": "CanvasDrawable",
        "importPath": "nn_visualizer.ui_components.canvas_drawable",
        "description": "nn_visualizer.ui_components.canvas_drawable",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.canvas_drawable",
        "documentation": {}
    },
    {
        "label": "CanvasDrawable",
        "importPath": "nn_visualizer.ui_components.canvas_drawable",
        "description": "nn_visualizer.ui_components.canvas_drawable",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.canvas_drawable",
        "documentation": {}
    },
    {
        "label": "CanvasDrawable",
        "importPath": "nn_visualizer.ui_components.canvas_drawable",
        "description": "nn_visualizer.ui_components.canvas_drawable",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.canvas_drawable",
        "documentation": {}
    },
    {
        "label": "AddLayerDragButton",
        "importPath": "nn_visualizer.ui_components.edit_panel.buttons.add_layer_drag_button",
        "description": "nn_visualizer.ui_components.edit_panel.buttons.add_layer_drag_button",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.edit_panel.buttons.add_layer_drag_button",
        "documentation": {}
    },
    {
        "label": "AddLayerDragButton",
        "importPath": "nn_visualizer.ui_components.edit_panel.buttons.add_layer_drag_button",
        "description": "nn_visualizer.ui_components.edit_panel.buttons.add_layer_drag_button",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.edit_panel.buttons.add_layer_drag_button",
        "documentation": {}
    },
    {
        "label": "AddLayerDragButton",
        "importPath": "nn_visualizer.ui_components.edit_panel.buttons.add_layer_drag_button",
        "description": "nn_visualizer.ui_components.edit_panel.buttons.add_layer_drag_button",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.edit_panel.buttons.add_layer_drag_button",
        "documentation": {}
    },
    {
        "label": "AddLayerDragButton",
        "importPath": "nn_visualizer.ui_components.edit_panel.buttons.add_layer_drag_button",
        "description": "nn_visualizer.ui_components.edit_panel.buttons.add_layer_drag_button",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.edit_panel.buttons.add_layer_drag_button",
        "documentation": {}
    },
    {
        "label": "AddLayerDragButton",
        "importPath": "nn_visualizer.ui_components.edit_panel.buttons.add_layer_drag_button",
        "description": "nn_visualizer.ui_components.edit_panel.buttons.add_layer_drag_button",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.edit_panel.buttons.add_layer_drag_button",
        "documentation": {}
    },
    {
        "label": "AddLayerDragButton",
        "importPath": "nn_visualizer.ui_components.edit_panel.buttons.add_layer_drag_button",
        "description": "nn_visualizer.ui_components.edit_panel.buttons.add_layer_drag_button",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.edit_panel.buttons.add_layer_drag_button",
        "documentation": {}
    },
    {
        "label": "DragButton",
        "importPath": "nn_visualizer.ui_components.customized.drag_drop.smlf_drag_button",
        "description": "nn_visualizer.ui_components.customized.drag_drop.smlf_drag_button",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.customized.drag_drop.smlf_drag_button",
        "documentation": {}
    },
    {
        "label": "DragButton",
        "importPath": "nn_visualizer.ui_components.customized.drag_drop.smlf_drag_button",
        "description": "nn_visualizer.ui_components.customized.drag_drop.smlf_drag_button",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.customized.drag_drop.smlf_drag_button",
        "documentation": {}
    },
    {
        "label": "AddBatchNormalizationDragButton",
        "importPath": "nn_visualizer.ui_components.edit_panel.buttons.add_batch_normalization_layer_drag_button",
        "description": "nn_visualizer.ui_components.edit_panel.buttons.add_batch_normalization_layer_drag_button",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.edit_panel.buttons.add_batch_normalization_layer_drag_button",
        "documentation": {}
    },
    {
        "label": "AddDenseDragButton",
        "importPath": "nn_visualizer.ui_components.edit_panel.buttons.add_dense_layer_drag_button",
        "description": "nn_visualizer.ui_components.edit_panel.buttons.add_dense_layer_drag_button",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.edit_panel.buttons.add_dense_layer_drag_button",
        "documentation": {}
    },
    {
        "label": "AddDropoutDragButton",
        "importPath": "nn_visualizer.ui_components.edit_panel.buttons.add_dropout_layer_drag_button",
        "description": "nn_visualizer.ui_components.edit_panel.buttons.add_dropout_layer_drag_button",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.edit_panel.buttons.add_dropout_layer_drag_button",
        "documentation": {}
    },
    {
        "label": "AddReLUDragButton",
        "importPath": "nn_visualizer.ui_components.edit_panel.buttons.add_relu_layer_drag_button",
        "description": "nn_visualizer.ui_components.edit_panel.buttons.add_relu_layer_drag_button",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.edit_panel.buttons.add_relu_layer_drag_button",
        "documentation": {}
    },
    {
        "label": "AddSigmoidDragButton",
        "importPath": "nn_visualizer.ui_components.edit_panel.buttons.add_sigmoid_layer_drag_button",
        "description": "nn_visualizer.ui_components.edit_panel.buttons.add_sigmoid_layer_drag_button",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.edit_panel.buttons.add_sigmoid_layer_drag_button",
        "documentation": {}
    },
    {
        "label": "AddSoftmaxDragButton",
        "importPath": "nn_visualizer.ui_components.edit_panel.buttons.add_softmax_layer_drag_button",
        "description": "nn_visualizer.ui_components.edit_panel.buttons.add_softmax_layer_drag_button",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.edit_panel.buttons.add_softmax_layer_drag_button",
        "documentation": {}
    },
    {
        "label": "LossComboBox",
        "importPath": "nn_visualizer.ui_components.edit_panel.loss_combobox",
        "description": "nn_visualizer.ui_components.edit_panel.loss_combobox",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.edit_panel.loss_combobox",
        "documentation": {}
    },
    {
        "label": "OptmizerComboBox",
        "importPath": "nn_visualizer.ui_components.edit_panel.optimizer_combox",
        "description": "nn_visualizer.ui_components.edit_panel.optimizer_combox",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.edit_panel.optimizer_combox",
        "documentation": {}
    },
    {
        "label": "LayerVisualizerLayoutData",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.layer_layout_data",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.layer_layout_data",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.layer_layout_data",
        "documentation": {}
    },
    {
        "label": "LayerVisualizerLayoutData",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.layer_layout_data",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.layer_layout_data",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.layer_layout_data",
        "documentation": {}
    },
    {
        "label": "LayerVisualizerLayoutData",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.layer_layout_data",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.layer_layout_data",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.layer_layout_data",
        "documentation": {}
    },
    {
        "label": "LayerVisualizerLayoutData",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.layer_layout_data",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.layer_layout_data",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.layer_layout_data",
        "documentation": {}
    },
    {
        "label": "LayerVisualizerLayoutData",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.layer_layout_data",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.layer_layout_data",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.layer_layout_data",
        "documentation": {}
    },
    {
        "label": "LayerVisualizerLayoutData",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.layer_layout_data",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.layer_layout_data",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.layer_layout_data",
        "documentation": {}
    },
    {
        "label": "LayerVisualizerLayoutData",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.layer_layout_data",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.layer_layout_data",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.layer_layout_data",
        "documentation": {}
    },
    {
        "label": "LayerVisualizerLayoutData",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.layer_layout_data",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.layer_layout_data",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.layer_layout_data",
        "documentation": {}
    },
    {
        "label": "LayerVisualizerLayoutData",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.layer_layout_data",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.layer_layout_data",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.layer_layout_data",
        "documentation": {}
    },
    {
        "label": "LayerVisualizerLayoutData",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.layer_layout_data",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.layer_layout_data",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.layer_layout_data",
        "documentation": {}
    },
    {
        "label": "LayerVisualizerLayoutData",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.layer_layout_data",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.layer_layout_data",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.layer_layout_data",
        "documentation": {}
    },
    {
        "label": "LayerVisualizerLayoutData",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.layer_layout_data",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.layer_layout_data",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.layer_layout_data",
        "documentation": {}
    },
    {
        "label": "LayerVisualizerLayoutData",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.layer_layout_data",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.layer_layout_data",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.layer_layout_data",
        "documentation": {}
    },
    {
        "label": "LayerVisualizerLayoutData",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.layer_layout_data",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.layer_layout_data",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.layer_layout_data",
        "documentation": {}
    },
    {
        "label": "LayerVisualizerLayoutData",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.layer_layout_data",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.layer_layout_data",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.layer_layout_data",
        "documentation": {}
    },
    {
        "label": "LayerVisualizerLayoutData",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.layer_layout_data",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.layer_layout_data",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.layer_layout_data",
        "documentation": {}
    },
    {
        "label": "LayerVisualizerLayoutData",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.layer_layout_data",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.layer_layout_data",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.layer_layout_data",
        "documentation": {}
    },
    {
        "label": "LayerVisualizerLayoutData",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.layer_layout_data",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.layer_layout_data",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.layer_layout_data",
        "documentation": {}
    },
    {
        "label": "LayerVisualizerLayoutData",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.layer_layout_data",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.layer_layout_data",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.layer_layout_data",
        "documentation": {}
    },
    {
        "label": "LayerVisualizerLayoutData",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.layer_layout_data",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.layer_layout_data",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.layer_layout_data",
        "documentation": {}
    },
    {
        "label": "LayerVisualizerLayoutData",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.layer_layout_data",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.layer_layout_data",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.layer_layout_data",
        "documentation": {}
    },
    {
        "label": "LayerVisualizerLayoutData",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.layer_layout_data",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.layer_layout_data",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.layer_layout_data",
        "documentation": {}
    },
    {
        "label": "LayerVisualizerLayoutData",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.layer_layout_data",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.layer_layout_data",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.layer_layout_data",
        "documentation": {}
    },
    {
        "label": "LayerVisualizerLayoutData",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.layer_layout_data",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.layer_layout_data",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.layer_layout_data",
        "documentation": {}
    },
    {
        "label": "LayerVisualizerLayoutData",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.layer_layout_data",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.layer_layout_data",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.layer_layout_data",
        "documentation": {}
    },
    {
        "label": "pyqtgraph",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyqtgraph",
        "description": "pyqtgraph",
        "detail": "pyqtgraph",
        "documentation": {}
    },
    {
        "label": "PlotWidget",
        "importPath": "pyqtgraph",
        "description": "pyqtgraph",
        "isExtraImport": true,
        "detail": "pyqtgraph",
        "documentation": {}
    },
    {
        "label": "plot",
        "importPath": "pyqtgraph",
        "description": "pyqtgraph",
        "isExtraImport": true,
        "detail": "pyqtgraph",
        "documentation": {}
    },
    {
        "label": "clickable",
        "importPath": "nn_visualizer.ui_components.clickable",
        "description": "nn_visualizer.ui_components.clickable",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.clickable",
        "documentation": {}
    },
    {
        "label": "clickable",
        "importPath": "nn_visualizer.ui_components.clickable",
        "description": "nn_visualizer.ui_components.clickable",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.clickable",
        "documentation": {}
    },
    {
        "label": "clickable",
        "importPath": "nn_visualizer.ui_components.clickable",
        "description": "nn_visualizer.ui_components.clickable",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.clickable",
        "documentation": {}
    },
    {
        "label": "clickable",
        "importPath": "nn_visualizer.ui_components.clickable",
        "description": "nn_visualizer.ui_components.clickable",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.clickable",
        "documentation": {}
    },
    {
        "label": "clickable",
        "importPath": "nn_visualizer.ui_components.clickable",
        "description": "nn_visualizer.ui_components.clickable",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.clickable",
        "documentation": {}
    },
    {
        "label": "CurrentPipelineAnimation",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.animations.current_pipeline_animation",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.animations.current_pipeline_animation",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.animations.current_pipeline_animation",
        "documentation": {}
    },
    {
        "label": "CurrentPipelineAnimation",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.animations.current_pipeline_animation",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.animations.current_pipeline_animation",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.animations.current_pipeline_animation",
        "documentation": {}
    },
    {
        "label": "CurrentPipelineAnimation",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.animations.current_pipeline_animation",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.animations.current_pipeline_animation",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.animations.current_pipeline_animation",
        "documentation": {}
    },
    {
        "label": "CurrentPipelineAnimation",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.animations.current_pipeline_animation",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.animations.current_pipeline_animation",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.animations.current_pipeline_animation",
        "documentation": {}
    },
    {
        "label": "CurrentPipelineAnimation",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.animations.current_pipeline_animation",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.animations.current_pipeline_animation",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.animations.current_pipeline_animation",
        "documentation": {}
    },
    {
        "label": "CurrentPipelineAnimation",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.animations.current_pipeline_animation",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.animations.current_pipeline_animation",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.animations.current_pipeline_animation",
        "documentation": {}
    },
    {
        "label": "CurrentPipelineAnimation",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.animations.current_pipeline_animation",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.animations.current_pipeline_animation",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.animations.current_pipeline_animation",
        "documentation": {}
    },
    {
        "label": "CurrentPipelineAnimation",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.animations.current_pipeline_animation",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.animations.current_pipeline_animation",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.animations.current_pipeline_animation",
        "documentation": {}
    },
    {
        "label": "CurrentPipelineAnimation",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.animations.current_pipeline_animation",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.animations.current_pipeline_animation",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.animations.current_pipeline_animation",
        "documentation": {}
    },
    {
        "label": "LayerVisualizerUnit",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.layer_unit_visualizer",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.layer_unit_visualizer",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.layer_unit_visualizer",
        "documentation": {}
    },
    {
        "label": "LayerVisualizerUnit",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.layer_unit_visualizer",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.layer_unit_visualizer",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.layer_unit_visualizer",
        "documentation": {}
    },
    {
        "label": "LayerVisualizerUnit",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.layer_unit_visualizer",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.layer_unit_visualizer",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.layer_unit_visualizer",
        "documentation": {}
    },
    {
        "label": "LayerVisualizerUnit",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.layer_unit_visualizer",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.layer_unit_visualizer",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.layer_unit_visualizer",
        "documentation": {}
    },
    {
        "label": "LayerVisualizerUnit",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.layer_unit_visualizer",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.layer_unit_visualizer",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.layer_unit_visualizer",
        "documentation": {}
    },
    {
        "label": "LayerVisualizerUnit",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.layer_unit_visualizer",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.layer_unit_visualizer",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.layer_unit_visualizer",
        "documentation": {}
    },
    {
        "label": "Showing",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.layer_unit_visualizer",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.layer_unit_visualizer",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.layer_unit_visualizer",
        "documentation": {}
    },
    {
        "label": "draw_fully_connected_backward_connections",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.strategies",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.strategies",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.strategies",
        "documentation": {}
    },
    {
        "label": "draw_fully_connected_forward_connections",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.strategies",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.strategies",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.strategies",
        "documentation": {}
    },
    {
        "label": "draw_single_connected_backward_connection",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.strategies",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.strategies",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.strategies",
        "documentation": {}
    },
    {
        "label": "draw_single_connected_backward_connection",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.strategies",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.strategies",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.strategies",
        "documentation": {}
    },
    {
        "label": "draw_single_connected_backward_connection",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.strategies",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.strategies",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.strategies",
        "documentation": {}
    },
    {
        "label": "line_color_from_derivative",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.strategies",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.strategies",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.strategies",
        "documentation": {}
    },
    {
        "label": "draw_fully_connected_backward_connections",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.strategies",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.strategies",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.strategies",
        "documentation": {}
    },
    {
        "label": "draw_fully_connected_forward_connections",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.strategies",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.strategies",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.strategies",
        "documentation": {}
    },
    {
        "label": "draw_single_connected_backward_connection",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.strategies",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.strategies",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.strategies",
        "documentation": {}
    },
    {
        "label": "draw_single_connected_forward_connection",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.strategies",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.strategies",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.strategies",
        "documentation": {}
    },
    {
        "label": "VisualizerUnit",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.dense_visualizer.unit_visualizer",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.dense_visualizer.unit_visualizer",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.dense_visualizer.unit_visualizer",
        "documentation": {}
    },
    {
        "label": "VisualizerUnit",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.dense_visualizer.unit_visualizer",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.dense_visualizer.unit_visualizer",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.dense_visualizer.unit_visualizer",
        "documentation": {}
    },
    {
        "label": "VisualizerUnit",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.dense_visualizer.unit_visualizer",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.dense_visualizer.unit_visualizer",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.dense_visualizer.unit_visualizer",
        "documentation": {}
    },
    {
        "label": "InputUnitVisualizer",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.input_visualizer.input_unit_visualizer",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.input_visualizer.input_unit_visualizer",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.input_visualizer.input_unit_visualizer",
        "documentation": {}
    },
    {
        "label": "LossVisualizerUnit",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.losses_visualizer.mean_squared_error_visualizer.loss_unit_visualizer_unit",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.losses_visualizer.mean_squared_error_visualizer.loss_unit_visualizer_unit",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.losses_visualizer.mean_squared_error_visualizer.loss_unit_visualizer_unit",
        "documentation": {}
    },
    {
        "label": "LossVisualizerUnit",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.losses_visualizer.mean_squared_error_visualizer.loss_unit_visualizer_unit",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.losses_visualizer.mean_squared_error_visualizer.loss_unit_visualizer_unit",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.losses_visualizer.mean_squared_error_visualizer.loss_unit_visualizer_unit",
        "documentation": {}
    },
    {
        "label": "ReLUVisualizerLayoutData",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.relu_visualizer.relu_visualizer_layout_data",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.relu_visualizer.relu_visualizer_layout_data",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.relu_visualizer.relu_visualizer_layout_data",
        "documentation": {}
    },
    {
        "label": "ReLUVisualizerLayoutData",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.relu_visualizer.relu_visualizer_layout_data",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.relu_visualizer.relu_visualizer_layout_data",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.relu_visualizer.relu_visualizer_layout_data",
        "documentation": {}
    },
    {
        "label": "BatchNormalizationVisualizerLayoutData",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.batch_normalization_visualizer.batch_normalization_layout_data",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.batch_normalization_visualizer.batch_normalization_layout_data",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.batch_normalization_visualizer.batch_normalization_layout_data",
        "documentation": {}
    },
    {
        "label": "ReLUUnitVisualizer",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.relu_visualizer.relu_unit_visualizer",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.relu_visualizer.relu_unit_visualizer",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.relu_visualizer.relu_unit_visualizer",
        "documentation": {}
    },
    {
        "label": "get",
        "importPath": "iris_dataset",
        "description": "iris_dataset",
        "isExtraImport": true,
        "detail": "iris_dataset",
        "documentation": {}
    },
    {
        "label": "DefaultFileAdapter",
        "importPath": "nn_visualizer.external.default_file_adapter",
        "description": "nn_visualizer.external.default_file_adapter",
        "isExtraImport": true,
        "detail": "nn_visualizer.external.default_file_adapter",
        "documentation": {}
    },
    {
        "label": "CanvasWidget",
        "importPath": "nn_visualizer.ui_components.canvas_widget",
        "description": "nn_visualizer.ui_components.canvas_widget",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.canvas_widget",
        "documentation": {}
    },
    {
        "label": "BatchNormalizationEditor",
        "importPath": "nn_visualizer.ui_components.components_editors.batch_norm_editor.batch_normalization_editor",
        "description": "nn_visualizer.ui_components.components_editors.batch_norm_editor.batch_normalization_editor",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.components_editors.batch_norm_editor.batch_normalization_editor",
        "documentation": {}
    },
    {
        "label": "DropoutVisualizerEditor",
        "importPath": "nn_visualizer.ui_components.components_editors.dropout_visualizer_editor.dropout_visualizer_editor",
        "description": "nn_visualizer.ui_components.components_editors.dropout_visualizer_editor.dropout_visualizer_editor",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.components_editors.dropout_visualizer_editor.dropout_visualizer_editor",
        "documentation": {}
    },
    {
        "label": "InputVisualizerEditor",
        "importPath": "nn_visualizer.ui_components.components_editors.input_visualizer_editor.input_visualizer_editor",
        "description": "nn_visualizer.ui_components.components_editors.input_visualizer_editor.input_visualizer_editor",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.components_editors.input_visualizer_editor.input_visualizer_editor",
        "documentation": {}
    },
    {
        "label": "ReLUVisualizerEditor",
        "importPath": "nn_visualizer.ui_components.components_editors.relu_editor.relu_visualizer_editor",
        "description": "nn_visualizer.ui_components.components_editors.relu_editor.relu_visualizer_editor",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.components_editors.relu_editor.relu_visualizer_editor",
        "documentation": {}
    },
    {
        "label": "SigmoidVisualizerEditor",
        "importPath": "nn_visualizer.ui_components.components_editors.sigmoid_editor.sigmoid_visualizer_editor",
        "description": "nn_visualizer.ui_components.components_editors.sigmoid_editor.sigmoid_visualizer_editor",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.components_editors.sigmoid_editor.sigmoid_visualizer_editor",
        "documentation": {}
    },
    {
        "label": "SoftmaxVisualizerEditor",
        "importPath": "nn_visualizer.ui_components.components_editors.softmax_visualizer_editor.softmax_visualizer_editor",
        "description": "nn_visualizer.ui_components.components_editors.softmax_visualizer_editor.softmax_visualizer_editor",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.components_editors.softmax_visualizer_editor.softmax_visualizer_editor",
        "documentation": {}
    },
    {
        "label": "Console",
        "importPath": "nn_visualizer.ui_components.console.console",
        "description": "nn_visualizer.ui_components.console.console",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.console.console",
        "documentation": {}
    },
    {
        "label": "ControlPanel",
        "importPath": "nn_visualizer.ui_components.control_panel.control_panel",
        "description": "nn_visualizer.ui_components.control_panel.control_panel",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.control_panel.control_panel",
        "documentation": {}
    },
    {
        "label": "DerivativesDrawer",
        "importPath": "nn_visualizer.ui_components.derivatives_drawer.derivatives_drawer",
        "description": "nn_visualizer.ui_components.derivatives_drawer.derivatives_drawer",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.derivatives_drawer.derivatives_drawer",
        "documentation": {}
    },
    {
        "label": "EditPanel",
        "importPath": "nn_visualizer.ui_components.edit_panel.edit_panel",
        "description": "nn_visualizer.ui_components.edit_panel.edit_panel",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.edit_panel.edit_panel",
        "documentation": {}
    },
    {
        "label": "DefaultBatchNormalizationVisualizerLayoutData",
        "importPath": "nn_visualizer.ui_components.layout_data.default_batch_normalization_layout_data",
        "description": "nn_visualizer.ui_components.layout_data.default_batch_normalization_layout_data",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.layout_data.default_batch_normalization_layout_data",
        "documentation": {}
    },
    {
        "label": "DefaultBatchNormalizationVisualizerLayoutData",
        "importPath": "nn_visualizer.ui_components.layout_data.default_batch_normalization_layout_data",
        "description": "nn_visualizer.ui_components.layout_data.default_batch_normalization_layout_data",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.layout_data.default_batch_normalization_layout_data",
        "documentation": {}
    },
    {
        "label": "DefaultReLUVisualizerLayoutData",
        "importPath": "nn_visualizer.ui_components.layout_data.default_relu_visualizer_layout_data",
        "description": "nn_visualizer.ui_components.layout_data.default_relu_visualizer_layout_data",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.layout_data.default_relu_visualizer_layout_data",
        "documentation": {}
    },
    {
        "label": "DefaultReLUVisualizerLayoutData",
        "importPath": "nn_visualizer.ui_components.layout_data.default_relu_visualizer_layout_data",
        "description": "nn_visualizer.ui_components.layout_data.default_relu_visualizer_layout_data",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.layout_data.default_relu_visualizer_layout_data",
        "documentation": {}
    },
    {
        "label": "DefaultSigmoidVisualizerLayoutData",
        "importPath": "nn_visualizer.ui_components.layout_data.default_sigmoid_layout_data",
        "description": "nn_visualizer.ui_components.layout_data.default_sigmoid_layout_data",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.layout_data.default_sigmoid_layout_data",
        "documentation": {}
    },
    {
        "label": "DefaultSigmoidVisualizerLayoutData",
        "importPath": "nn_visualizer.ui_components.layout_data.default_sigmoid_layout_data",
        "description": "nn_visualizer.ui_components.layout_data.default_sigmoid_layout_data",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.layout_data.default_sigmoid_layout_data",
        "documentation": {}
    },
    {
        "label": "DefaultSoftmaxVisualizerLayoutData",
        "importPath": "nn_visualizer.ui_components.layout_data.default_softmax_visualizer_layout_data",
        "description": "nn_visualizer.ui_components.layout_data.default_softmax_visualizer_layout_data",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.layout_data.default_softmax_visualizer_layout_data",
        "documentation": {}
    },
    {
        "label": "DefaultSoftmaxVisualizerLayoutData",
        "importPath": "nn_visualizer.ui_components.layout_data.default_softmax_visualizer_layout_data",
        "description": "nn_visualizer.ui_components.layout_data.default_softmax_visualizer_layout_data",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.layout_data.default_softmax_visualizer_layout_data",
        "documentation": {}
    },
    {
        "label": "MainWindowMenuBar",
        "importPath": "nn_visualizer.ui_components.menubar.main_window_menu_bar",
        "description": "nn_visualizer.ui_components.menubar.main_window_menu_bar",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.menubar.main_window_menu_bar",
        "documentation": {}
    },
    {
        "label": "BinaryCrossEntropyVisualizer",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.losses_visualizer.binary_cross_entropy_visualizer.binary_cross_entropy_visualizer",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.losses_visualizer.binary_cross_entropy_visualizer.binary_cross_entropy_visualizer",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.losses_visualizer.binary_cross_entropy_visualizer.binary_cross_entropy_visualizer",
        "documentation": {}
    },
    {
        "label": "BinaryCrossEntropyVisualizer",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.losses_visualizer.binary_cross_entropy_visualizer.binary_cross_entropy_visualizer",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.losses_visualizer.binary_cross_entropy_visualizer.binary_cross_entropy_visualizer",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.losses_visualizer.binary_cross_entropy_visualizer.binary_cross_entropy_visualizer",
        "documentation": {}
    },
    {
        "label": "MeanSquaredErrorVisualizer",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.losses_visualizer.mean_squared_error_visualizer.mean_squared_error_visualizer",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.losses_visualizer.mean_squared_error_visualizer.mean_squared_error_visualizer",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.losses_visualizer.mean_squared_error_visualizer.mean_squared_error_visualizer",
        "documentation": {}
    },
    {
        "label": "MeanSquaredErrorVisualizer",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.losses_visualizer.mean_squared_error_visualizer.mean_squared_error_visualizer",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.losses_visualizer.mean_squared_error_visualizer.mean_squared_error_visualizer",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.losses_visualizer.mean_squared_error_visualizer.mean_squared_error_visualizer",
        "documentation": {}
    },
    {
        "label": "ReLUVisualizer",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.relu_visualizer.relu_visualizer",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.relu_visualizer.relu_visualizer",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.relu_visualizer.relu_visualizer",
        "documentation": {}
    },
    {
        "label": "ReLUVisualizer",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.relu_visualizer.relu_visualizer",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.relu_visualizer.relu_visualizer",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.relu_visualizer.relu_visualizer",
        "documentation": {}
    },
    {
        "label": "SigmoidVisualizer",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.sigmoid_visualizer.sigmoid_visualizer",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.sigmoid_visualizer.sigmoid_visualizer",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.sigmoid_visualizer.sigmoid_visualizer",
        "documentation": {}
    },
    {
        "label": "SigmoidVisualizer",
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.sigmoid_visualizer.sigmoid_visualizer",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.sigmoid_visualizer.sigmoid_visualizer",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.sigmoid_visualizer.sigmoid_visualizer",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "DefaultBinaryCrossEntropyLayoutData",
        "importPath": "nn_visualizer.ui_components.layout_data.default_binary_crossentropy_visualizer",
        "description": "nn_visualizer.ui_components.layout_data.default_binary_crossentropy_visualizer",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.layout_data.default_binary_crossentropy_visualizer",
        "documentation": {}
    },
    {
        "label": "DefaultMeanSquaredLossVisualizerLayoutData",
        "importPath": "nn_visualizer.ui_components.layout_data.default_mean_squared_loss_visualizer_data",
        "description": "nn_visualizer.ui_components.layout_data.default_mean_squared_loss_visualizer_data",
        "isExtraImport": true,
        "detail": "nn_visualizer.ui_components.layout_data.default_mean_squared_loss_visualizer_data",
        "documentation": {}
    },
    {
        "label": "unittest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "unittest",
        "description": "unittest",
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "SFMLComponentJsonBuilder",
        "kind": 6,
        "importPath": "api.internal.builders.json_builder.sfml_component_json_builder",
        "description": "api.internal.builders.json_builder.sfml_component_json_builder",
        "peekOfCode": "class SFMLComponentJsonBuilder():\n    @classmethod\n    def build(cls, json_object: dict):\n        component_name = json_object['component_name']\n        _builder = json_router()[component_name]\n        if _builder is None:\n            raise Exception('Invalid json object')\n        else:\n            return _builder(json_object)",
        "detail": "api.internal.builders.json_builder.sfml_component_json_builder",
        "documentation": {}
    },
    {
        "label": "json_router",
        "kind": 2,
        "importPath": "api.internal.builders.json_builder.sfml_component_json_builder",
        "description": "api.internal.builders.json_builder.sfml_component_json_builder",
        "peekOfCode": "def json_router():\n    import api.layers.dense as dense1\n    from api.layers.activation.sigmoid import Sigmoid\n    from api.layers.activation.relu import ReLU\n    from api.layers.activation.softmax import Softmax, SoftmaxCategoricalCrossEntropyOptimization\n    from api.losses.regression.mean_squared_loss import MeanSquareError\n    from api.layers.inv_dropout import Dropout\n    return dict({\n        'Dense': dense1.Dense.from_json,\n        'Sigmoid': Sigmoid.from_json,",
        "detail": "api.internal.builders.json_builder.sfml_component_json_builder",
        "documentation": {}
    },
    {
        "label": "OptimizerBuilder",
        "kind": 6,
        "importPath": "api.internal.builders.optimizers_builder.optmizers_builder",
        "description": "api.internal.builders.optimizers_builder.optmizers_builder",
        "peekOfCode": "class OptimizerBuilder():\n    @staticmethod\n    def build_from_name(cls, name, learning_rate=0.01):\n        name_builder_router = name_builder_router()\n        builder = name_builder_router[name]\n        if builder is None:\n            raise Exception('Invalid optimizer name')\n        return builder(learning_rate)",
        "detail": "api.internal.builders.optimizers_builder.optmizers_builder",
        "documentation": {}
    },
    {
        "label": "name_builder_router",
        "kind": 2,
        "importPath": "api.internal.builders.optimizers_builder.optmizers_builder",
        "description": "api.internal.builders.optimizers_builder.optmizers_builder",
        "peekOfCode": "def name_builder_router():\n    return dict({\n        'adagrad': _adagrad_builder,\n        'sgd': _sgd_builder, \n    })\nclass OptimizerBuilder():\n    @staticmethod\n    def build_from_name(cls, name, learning_rate=0.01):\n        name_builder_router = name_builder_router()\n        builder = name_builder_router[name]",
        "detail": "api.internal.builders.optimizers_builder.optmizers_builder",
        "documentation": {}
    },
    {
        "label": "SMLFComponent",
        "kind": 6,
        "importPath": "api.internal.smlf_component",
        "description": "api.internal.smlf_component",
        "peekOfCode": "class SMLFComponent:\n    def __init__(self):\n        pass\n    @abstractmethod\n    def name(self): str\n    @abstractmethod\n    def component_name(self) -> str:\n        pass\n    @abstractmethod\n    def save_state(self):",
        "detail": "api.internal.smlf_component",
        "documentation": {}
    },
    {
        "label": "ActivationCommon",
        "kind": 6,
        "importPath": "api.layers.activation.activation_common",
        "description": "api.layers.activation.activation_common",
        "peekOfCode": "class ActivationCommon(CommonLayer):\n    def __init__(self, units: int):\n        self.units = units\n        super().__init__(ninputs=units, noutputs=units)",
        "detail": "api.layers.activation.activation_common",
        "documentation": {}
    },
    {
        "label": "ReLU",
        "kind": 6,
        "importPath": "api.layers.activation.relu",
        "description": "api.layers.activation.relu",
        "peekOfCode": "class ReLU(ActivationCommon, SMLFComponent):\n    def __init__(self, units: int = 1, name: str = 'relu'):\n        ActivationCommon.__init__(self, units)\n        SMLFComponent.__init__(self)\n        self.name = name\n    def forward(self, batch_input: np.ndarray, mode: str = 'train') -> None:\n       self.output = np.maximum(batch_input, 0)\n       self.zero_indexes = np.argwhere(self.output == 0)\n       self.zero_indexes_col = self.zero_indexes[:, 0]\n       self.zero_indexes_row = self.zero_indexes[:, 1]",
        "detail": "api.layers.activation.relu",
        "documentation": {}
    },
    {
        "label": "Sigmoid",
        "kind": 6,
        "importPath": "api.layers.activation.sigmoid",
        "description": "api.layers.activation.sigmoid",
        "peekOfCode": "class Sigmoid(ActivationCommon, SMLFComponent):\n    def __init__(self, units: int, name: str = 'sigmoid') -> None:\n        ActivationCommon.__init__(self, units)\n        SMLFComponent.__init__(self)\n        self.name = name\n    def forward(self, batch_input: np.ndarray, mode: str = 'predict') -> None:\n        # self.output = np.divide(1, np.clip(1 + np.exp(-batch_input), 1e-7, 1 - 1e-7))\n        self.output = np.divide(1, 1 + np.exp(-batch_input))\n    def backward(self, backward_derivatives: np.ndarray, mode: str = 'train') -> None:\n        derivatives = np.multiply(self.output, (1 - self.output))",
        "detail": "api.layers.activation.sigmoid",
        "documentation": {}
    },
    {
        "label": "Softmax",
        "kind": 6,
        "importPath": "api.layers.activation.softmax",
        "description": "api.layers.activation.softmax",
        "peekOfCode": "class Softmax(SMLFComponent, CommonLayer):\n    def __init__(self, units: int, name: str = 'softmax'):\n        SMLFComponent.__init__(self)\n        CommonLayer.__init__(self, ninputs=units, noutputs=units)\n        self.name = name\n        self.units = units\n    def forward(self, batch_input: np.ndarray) -> None:\n        batch_input_normalized = batch_input - np.max(batch_input, axis=1, keepdims=True)\n        exponentials = np.exp(batch_input_normalized)\n        self.output = exponentials / np.sum(exponentials, axis=1, keepdims=True)",
        "detail": "api.layers.activation.softmax",
        "documentation": {}
    },
    {
        "label": "SoftmaxCategoricalCrossEntropyOptimization",
        "kind": 6,
        "importPath": "api.layers.activation.softmax",
        "description": "api.layers.activation.softmax",
        "peekOfCode": "class SoftmaxCategoricalCrossEntropyOptimization(Softmax):\n    def __init__(self, units: int, name: str = 'softmax'):\n        Softmax.__init__(self, units, name=name)\n    def train_forward(self, batch_input: np.ndarray, batch_targets: np.ndarray):\n        Softmax.forward(self, batch_input)\n        batch_size = batch_input.shape[0]\n        error = -np.log(np.clip(self.output, 1e-7, 1 - 1e-7)) * batch_targets\n        self.loss = np.sum(error) / batch_size\n        # print('np clip = ', np.clip(self.output, 1e-7, 1 - 1e-7))\n    def test_forward(self, batch_input: np.ndarray):",
        "detail": "api.layers.activation.softmax",
        "documentation": {}
    },
    {
        "label": "Dense",
        "kind": 6,
        "importPath": "api.layers.dense",
        "description": "api.layers.dense",
        "peekOfCode": "class Dense(SMLFComponent, common_layer.CommonLayer):\n    def __init__(self, ninputs, noutputs, name: str = 'Dense', init_algorithm='uniform',\n                 activation: str | common_layer.CommonLayer=None,):\n        SMLFComponent.__init__(self)\n        common_layer.CommonLayer.__init__(self, ninputs, noutputs)\n        self.name = name\n        self.units = noutputs\n        if (init_algorithm == 'uniform'):\n            self.weights = np.random.uniform(-1, 1, size=(self.noutputs, self.ninputs))\n        if (init_algorithm == 'random'):",
        "detail": "api.layers.dense",
        "documentation": {}
    },
    {
        "label": "activation_builder",
        "kind": 5,
        "importPath": "api.layers.dense",
        "description": "api.layers.dense",
        "peekOfCode": "activation_builder = dict({\n    'relu': _build_relu,\n    'sigmoid': _build_sigmoid,\n})\nclass Dense(SMLFComponent, common_layer.CommonLayer):\n    def __init__(self, ninputs, noutputs, name: str = 'Dense', init_algorithm='uniform',\n                 activation: str | common_layer.CommonLayer=None,):\n        SMLFComponent.__init__(self)\n        common_layer.CommonLayer.__init__(self, ninputs, noutputs)\n        self.name = name",
        "detail": "api.layers.dense",
        "documentation": {}
    },
    {
        "label": "DenseDecorator",
        "kind": 6,
        "importPath": "api.layers.dense_decorator",
        "description": "api.layers.dense_decorator",
        "peekOfCode": "class DenseDecorator(Dense):\n    def __init__(self, decoratee: Dense, w_regularizer, b_regularizer):\n        self.decoratee = decoratee\n        self.w_regularizer = w_regularizer\n        self.b_regularizer = b_regularizer\n    def forward(self, batch_input: np.ndarray) -> None:\n        self.decoratee.forward(batch_input)\n    def backward(self, next_layer_backward: np.ndarray) -> None:\n        self.decoratee.backward(next_layer_backward)",
        "detail": "api.layers.dense_decorator",
        "documentation": {}
    },
    {
        "label": "DenseL1Regularized",
        "kind": 6,
        "importPath": "api.layers.dense_l1_regularized",
        "description": "api.layers.dense_l1_regularized",
        "peekOfCode": "class DenseL1Regularized(SMLFComponent, CommonLayer):\n    def __init__(self, ninputs, noutputs, name: str = 'Dense L1', init_algorithm='uniform', activation: str | CommonLayer=None,\n                 weight_reg = 1.0,\n                 bias_reg = 1.0,\n                 ):\n        SMLFComponent.__init__(self)\n        CommonLayer.__init__(self, ninputs, noutputs)        \n        self.w_regularizer = weight_reg\n        self.b_regularizer = bias_reg\n        self.decoratee = Dense(ninputs=ninputs, noutputs=noutputs, init_algorithm=init_algorithm)",
        "detail": "api.layers.dense_l1_regularized",
        "documentation": {}
    },
    {
        "label": "DenseL2Regularized",
        "kind": 6,
        "importPath": "api.layers.dense_l2_regularized",
        "description": "api.layers.dense_l2_regularized",
        "peekOfCode": "class DenseL2Regularized(SMLFComponent, CommonLayer):\n    def __init__(self, ninputs, noutputs, name: str = 'Dense L2', init_algorithm='uniform', activation: str | CommonLayer=None,\n                 weight_reg = 1.0,\n                 bias_reg = 1.0,\n                 ):\n        SMLFComponent.__init__(self)\n        CommonLayer.__init__(self, ninputs, noutputs)        \n        self.w_regularizer = weight_reg\n        self.b_regularizer = bias_reg\n        self.decoratee = Dense(ninputs=ninputs, noutputs=noutputs, init_algorithm=init_algorithm)",
        "detail": "api.layers.dense_l2_regularized",
        "documentation": {}
    },
    {
        "label": "Dropout",
        "kind": 6,
        "importPath": "api.layers.dropout",
        "description": "api.layers.dropout",
        "peekOfCode": "class Dropout(common_layer.CommonLayer):\n    def __init__(self, units: int, dropout_rate: float) -> None:\n        super().__init__(units, units)\n        self.dropout_rate = dropout_rate\n    def forward(self, batch_input: np.ndarray, mode: str = 'train') -> None:\n        if (mode == 'train'):\n            p = 1 - self.dropout_rate\n            mask = np.random.binomial(1, p, size=(batch_input.shape[0], batch_input.shape[1]))\n            self.output = mask * batch_input\n        elif (mode == 'predict'):",
        "detail": "api.layers.dropout",
        "documentation": {}
    },
    {
        "label": "InvDropout",
        "kind": 6,
        "importPath": "api.layers.inv_dropout",
        "description": "api.layers.inv_dropout",
        "peekOfCode": "class InvDropout(common_layer.CommonLayer):\n    def __init__(self, units: int, dropout_rate: float) -> None:\n        super().__init__(units, units)\n        self.dropout_rate = dropout_rate\n        self.dropout_distribution = np.zeros((1, units))\n        self.units = units\n    def forward(self, batch_input: np.ndarray, mode: str = 'train') -> None:\n        if (mode == 'train'):\n            p = 1 - self.dropout_rate\n            mask = np.random.rand(batch_input.shape[0], batch_input.shape[1]) < p",
        "detail": "api.layers.inv_dropout",
        "documentation": {}
    },
    {
        "label": "SoftmaxCategoricalCrossEntropyLayer",
        "kind": 6,
        "importPath": "api.layers.softmax_categorical_cross_entropy_layer",
        "description": "api.layers.softmax_categorical_cross_entropy_layer",
        "peekOfCode": "class SoftmaxCategoricalCrossEntropyLayer(common_layer.CommonLayer):\n    def __init__(self, units) -> None:\n        super().__init__(units, units)\n        self.units = units\n    def simple_forward(self, batch_input):\n        batch_size = batch_input.shape[0]\n        batch_input_normalized = batch_input - np.max(batch_input, axis=1, keepdims=True)\n        exponentials = np.exp(batch_input_normalized)\n        # print('sum = ' + str(np.sum(exponentials)))\n        # exponentials_sums = np.sum(exponentials, axis=1, keepdims=True)",
        "detail": "api.layers.softmax_categorical_cross_entropy_layer",
        "documentation": {}
    },
    {
        "label": "MeanAbsoluteError",
        "kind": 6,
        "importPath": "api.losses.regression.mean_absolute_loss",
        "description": "api.losses.regression.mean_absolute_loss",
        "peekOfCode": "class MeanAbsoluteError(SMLFComponent, CommonLoss):\n    def __init__(self, units, name: str  = 'mean_absolute_error'):\n        self.units = units\n        self.name = name\n        SMLFComponent.__init__(self)\n        CommonLoss.__init__(self, units, units)\n    def forward(self, batch_inputs: np.ndarray, targets: np.ndarray):\n        self.samples = batch_inputs.shape[0]\n        self.differences = np.abs(batch_inputs - targets)\n        self.output = self.differences",
        "detail": "api.losses.regression.mean_absolute_loss",
        "documentation": {}
    },
    {
        "label": "MeanSquareError",
        "kind": 6,
        "importPath": "api.losses.regression.mean_squared_loss",
        "description": "api.losses.regression.mean_squared_loss",
        "peekOfCode": "class MeanSquareError(SMLFComponent, CommonLoss):\n    def __init__(self, units, name: str  = 'mean_squared_error'):\n        self.units = units\n        self.name = name\n        SMLFComponent.__init__(self)\n        CommonLoss.__init__(self, units, units)\n    def forward(self, batch_inputs: np.ndarray, targets: np.ndarray):\n        self.samples = batch_inputs.shape[0]\n        self.differences = batch_inputs - targets\n        self.output = np.power(self.differences, 2)",
        "detail": "api.losses.regression.mean_squared_loss",
        "documentation": {}
    },
    {
        "label": "BinaryCrossEntropy",
        "kind": 6,
        "importPath": "api.losses.binary_cross_entropy",
        "description": "api.losses.binary_cross_entropy",
        "peekOfCode": "class BinaryCrossEntropy(SMLFComponent, CommonLoss):\n    def __init__(self, ninputs, name: str = 'binary_cross_entropy') -> None:\n        self.ninputs = ninputs\n        self.units = ninputs\n        self.name = name\n        SMLFComponent.__init__(self)\n    def forward(self, batch_inputs: np.ndarray, targets: np.ndarray, mode = 'train'):\n        samples_size = batch_inputs.shape[0]\n        inputs_size = batch_inputs.shape[1]\n        self.batch_inputs = np.clip(batch_inputs, 1e-7, 1 - 1e-7)",
        "detail": "api.losses.binary_cross_entropy",
        "documentation": {}
    },
    {
        "label": "CategoricalCrossEntropy",
        "kind": 6,
        "importPath": "api.losses.categorical_cross_entropy",
        "description": "api.losses.categorical_cross_entropy",
        "peekOfCode": "class CategoricalCrossEntropy(CommonLoss):\n    def __init__(self, units):\n        self.units = units\n    def forward(self, batch_inputs: np.ndarray, targets: np.ndarray):\n        self.samples = batch_inputs.shape[0]\n        self.targets = targets\n        self.output = -np.log(batch_inputs) * targets\n        self.loss = np.sum(self.output) / self.samples\n    def backward(self, ):\n        self.derivatives_wrt_inputs = self.output",
        "detail": "api.losses.categorical_cross_entropy",
        "documentation": {}
    },
    {
        "label": "CommonLoss",
        "kind": 6,
        "importPath": "api.losses.common_loss",
        "description": "api.losses.common_loss",
        "peekOfCode": "class CommonLoss:\n    def __init__(self, ninputs, noutputs) -> None:\n        self.ninputs = ninputs\n        self.noutputs = noutputs\n    @abstractmethod\n    def forward(self, batch_input: np.ndarray) -> None:\n        pass\n    @abstractmethod\n    def backward(self, backward_derivatives: np.ndarray) -> None:\n        pass",
        "detail": "api.losses.common_loss",
        "documentation": {}
    },
    {
        "label": "SparseCategoricalCrossEntropy",
        "kind": 6,
        "importPath": "api.losses.sparse_categorical_cross_entropy",
        "description": "api.losses.sparse_categorical_cross_entropy",
        "peekOfCode": "class SparseCategoricalCrossEntropy(CommonLoss):\n    def __init__(self, units):\n        self.units = units\n    def forward(self, batch_inputs: np.ndarray, targets: np.ndarray):\n        self.samples = batch_inputs.shape[0]\n        self.targets = targets\n        self.output = -np.log(batch_inputs[range(self.samples):targets])\n        self.loss = np.sum(self.output) / self.samples\n    def backward(self, ):\n        self.derivatives_wrt_inputs = self.output",
        "detail": "api.losses.sparse_categorical_cross_entropy",
        "documentation": {}
    },
    {
        "label": "Accuracy",
        "kind": 6,
        "importPath": "api.metrics.accuracy.accuracy",
        "description": "api.metrics.accuracy.accuracy",
        "peekOfCode": "class Accuracy:\n    def __init__(self, output_shape: np.shape, ):\n        self.output_shape = output_shape\n    def update_state(self, batch_predictions: np.ndarray, batch_labels: np.ndarray, sample_weight: np.ndarray = None):\n            if (sample_weight is None):\n                pass\n    def _check_batch_size(self, shape: np.shape):\n        pass",
        "detail": "api.metrics.accuracy.accuracy",
        "documentation": {}
    },
    {
        "label": "BinaryAccuracy",
        "kind": 6,
        "importPath": "api.metrics.accuracy.binary_accuracy",
        "description": "api.metrics.accuracy.binary_accuracy",
        "peekOfCode": "class BinaryAccuracy():\n    def __init__(self, name='binary_accuracy', threshold=0.5):\n        self.name = name\n        self.threshold = threshold\n    def update_state(self, batch_predictions: np.ndarray, batch_labels: np.ndarray, sample_weight: np.ndarray = None):\n        temp = np.absolute(batch_predictions - batch_labels)\n        temp = np.where(temp <= self.threshold, 1, 0)\n        samples = len(temp)\n        if sample_weight is not None:\n            samples = len(sample_weight)",
        "detail": "api.metrics.accuracy.binary_accuracy",
        "documentation": {}
    },
    {
        "label": "CategoricalAccuracy",
        "kind": 6,
        "importPath": "api.metrics.accuracy.categorical_accuracy",
        "description": "api.metrics.accuracy.categorical_accuracy",
        "peekOfCode": "class CategoricalAccuracy():\n    def __init__(self, name='binary_accuracy', threshold=0.5):\n        self.name = name\n        self.threshold = threshold\n    def update_state(self, batch_predictions: np.ndarray, batch_labels: np.ndarray, sample_weight: np.ndarray = None):\n            if (sample_weight is None):\n                if not self._check_sizes(batch_predictions.shape, batch_labels.shape):\n                    raise Exception('Invalid target shape: either use class or onehot enconding')\n                encondig = self._get_targets_enconding(batch_labels.shape)\n                if (encondig == 'onehot'):",
        "detail": "api.metrics.accuracy.categorical_accuracy",
        "documentation": {}
    },
    {
        "label": "BinaryCrossEntropy",
        "kind": 6,
        "importPath": "api.metrics.probabilistic.binary_cross_entropy",
        "description": "api.metrics.probabilistic.binary_cross_entropy",
        "peekOfCode": "class BinaryCrossEntropy(Metric):\n    def __init__(self, name='binary_cross_entropy_metric'):\n        self.name = name\n        self.loss = .0\n    def update_state(self, batch_predictions: np.ndarray, batch_labels: np.ndarray, sample_weight: np.ndarray = None):\n        if (sample_weight is None):\n            samples_size = batch_predictions.shape[0]\n            inputs_size = batch_predictions.shape[1]\n            self.batch_inputs = np.clip(batch_predictions, 1e-7, 1 - 1e-7)\n            log_batch_inputs = np.log(self.batch_inputs)",
        "detail": "api.metrics.probabilistic.binary_cross_entropy",
        "documentation": {}
    },
    {
        "label": "CategoricalCrossEntropy",
        "kind": 6,
        "importPath": "api.metrics.probabilistic.categorical_cross_entropy",
        "description": "api.metrics.probabilistic.categorical_cross_entropy",
        "peekOfCode": "class CategoricalCrossEntropy(Metric):\n    def __init__(self, name='binary_cross_entropy_metric'):\n        self.name = name\n        self.metric_value = .0\n    def update_state(self, batch_predictions: np.ndarray, batch_labels: np.ndarray, sample_weight: np.ndarray = None):\n        self.metric_value = np.sum(-np.log(np.clip(batch_predictions, 1e-07, 1 - 1e-07)) * batch_labels) / batch_labels.shape[0]\n    def result(self):\n        return self.metric_value\n    def reset(self):\n        self.metric_value = .0",
        "detail": "api.metrics.probabilistic.categorical_cross_entropy",
        "documentation": {}
    },
    {
        "label": "MeanSquaredMetric",
        "kind": 6,
        "importPath": "api.metrics.regression.mean_squared_metric",
        "description": "api.metrics.regression.mean_squared_metric",
        "peekOfCode": "class MeanSquaredMetric:\n    def __init__(self, units) -> None:\n        self.regression_values: np.zeros((units))\n    def forward(self, ouputs: np.ndarray, targets: np.array, sample_weights: np.array = np.array([1.])):\n        errors = np.sum(np.power(ouputs - targets, 2), axis=1)\n        if (len(sample_weights) == 1):\n            self.output = errors\n        else:\n            self.output = np.multiply(errors, sample_weights)",
        "detail": "api.metrics.regression.mean_squared_metric",
        "documentation": {}
    },
    {
        "label": "Metric",
        "kind": 6,
        "importPath": "api.metrics.metric",
        "description": "api.metrics.metric",
        "peekOfCode": "class Metric:\n    def __init__(self, name='binary_cross_entropy_metric'):\n        self.name = name\n        self.loss = .0\n    @abstractmethod\n    def update_state(self, batch_labels: np.ndarray, batch_predictions, sample_weight: np.ndarray = None):\n        pass\n    @abstractmethod\n    def result(self):\n        pass",
        "detail": "api.metrics.metric",
        "documentation": {}
    },
    {
        "label": "AdagradOptmizer",
        "kind": 6,
        "importPath": "api.optimizers.adagrad_optimizer",
        "description": "api.optimizers.adagrad_optimizer",
        "peekOfCode": "class AdagradOptmizer(SMLFComponent, OptimizerCommon):\n    def __init__(self, learning_rate=0.001, name: str='ada_grad') -> None:\n        SMLFComponent.__init__(self)\n        OptimizerCommon.__init__(self, learning_rate)\n        self._name = name\n    def update_weights(self, layer: Dense):\n        layer.adagrad_weights_acc += np.square(layer.derivatives_wrt_weights)\n        layer.adagrad_biases_acc += np.square(layer.derivatives_wrt_biases)\n        weights_norm = np.divide(self.learning_rate, np.sqrt(layer.adagrad_weights_acc + 1e-7))\n        biases_norm = np.divide(self.learning_rate, np.sqrt(layer.adagrad_biases_acc + 1e-7))",
        "detail": "api.optimizers.adagrad_optimizer",
        "documentation": {}
    },
    {
        "label": "OptimizerCommon",
        "kind": 6,
        "importPath": "api.optimizers.optimizer_common",
        "description": "api.optimizers.optimizer_common",
        "peekOfCode": "class OptimizerCommon:\n    def __init__(self, learning_rate=1e-3) -> None:\n        self.learning_rate = learning_rate\n    def update_weights(self, layer: dense.Dense, derivatives: np.ndarray):\n        pass",
        "detail": "api.optimizers.optimizer_common",
        "documentation": {}
    },
    {
        "label": "StochasticGradientDescent",
        "kind": 6,
        "importPath": "api.optimizers.stochastic_gradient_descent",
        "description": "api.optimizers.stochastic_gradient_descent",
        "peekOfCode": "class StochasticGradientDescent(SMLFComponent, OptimizerCommon):\n    def __init__(self, learning_rate=0.001, momentum=0.0, name: str = 'sgd') -> None:\n        OptimizerCommon.__init__(self, learning_rate)\n        SMLFComponent.__init__(self)\n        self._name = name\n        self.momentum = momentum\n        self.use_momentum = False\n        if self.momentum > 0.0:\n            self.use_momentum = True\n    def update_weights(self, layer: Dense):",
        "detail": "api.optimizers.stochastic_gradient_descent",
        "documentation": {}
    },
    {
        "label": "Event",
        "kind": 6,
        "importPath": "api.sequential.design_patterns.observer.observable",
        "description": "api.sequential.design_patterns.observer.observable",
        "peekOfCode": "class Event():\n    def __init__(self, payload: dict) -> None:\n        self.payload = payload\nObserverHandler = Callable[[Event], None]\nclass Observable():\n    def __init__(self):\n        self.observers = []\n    def add(self, observer: ObserverHandler):\n        self.observers.append(observer)\n    def remove(self, observer: ObserverHandler):",
        "detail": "api.sequential.design_patterns.observer.observable",
        "documentation": {}
    },
    {
        "label": "Observable",
        "kind": 6,
        "importPath": "api.sequential.design_patterns.observer.observable",
        "description": "api.sequential.design_patterns.observer.observable",
        "peekOfCode": "class Observable():\n    def __init__(self):\n        self.observers = []\n    def add(self, observer: ObserverHandler):\n        self.observers.append(observer)\n    def remove(self, observer: ObserverHandler):\n        self.observers.remove(observer)\n    def notify(self, event: Event):\n        for handler in self.observers:\n            handler(event)",
        "detail": "api.sequential.design_patterns.observer.observable",
        "documentation": {}
    },
    {
        "label": "ObserverHandler",
        "kind": 5,
        "importPath": "api.sequential.design_patterns.observer.observable",
        "description": "api.sequential.design_patterns.observer.observable",
        "peekOfCode": "ObserverHandler = Callable[[Event], None]\nclass Observable():\n    def __init__(self):\n        self.observers = []\n    def add(self, observer: ObserverHandler):\n        self.observers.append(observer)\n    def remove(self, observer: ObserverHandler):\n        self.observers.remove(observer)\n    def notify(self, event: Event):\n        for handler in self.observers:",
        "detail": "api.sequential.design_patterns.observer.observable",
        "documentation": {}
    },
    {
        "label": "BatchNormalizationDecorator",
        "kind": 6,
        "importPath": "api.sequential.pipeline.decorators.batch_normalization_decorator",
        "description": "api.sequential.pipeline.decorators.batch_normalization_decorator",
        "peekOfCode": "class BatchNormalizationDecorator(BatchDenseNormalization):\n    def __init__(self, decoratee: BatchDenseNormalization, index: int, last: bool = False) -> None:\n        self.decoratee = decoratee\n        self.index = index\n        units = self.decoratee.ninputs\n        self.last = last\n        CommonLayer.__init__(self, self.decoratee.ninputs, units)\n    def forward(self, batch_input: np.ndarray, mode: str = 'train') -> None:\n        self.decoratee.forward(batch_input)\n    def backward(self, backward_derivatives: np.ndarray) -> None:",
        "detail": "api.sequential.pipeline.decorators.batch_normalization_decorator",
        "documentation": {}
    },
    {
        "label": "BinaryCrossEntropyNextDecorator",
        "kind": 6,
        "importPath": "api.sequential.pipeline.decorators.binary_cross_entropy_next_step_decorator",
        "description": "api.sequential.pipeline.decorators.binary_cross_entropy_next_step_decorator",
        "peekOfCode": "class BinaryCrossEntropyNextDecorator(BinaryCrossEntropy):\n    def __init__(self, decoratee: CommonLayer, index: int) -> None:\n        self.decoratee = decoratee\n        self.index = index\n        units = self.decoratee.ninputs\n        self.last = True\n    def forward(self, batch_input: np.ndarray, mode: str = 'train') -> None:\n        self.decoratee.forward(batch_input)\n    def backward(self, backward_derivatives: np.ndarray) -> None:\n        self.decoratee.backward(backward_derivatives)",
        "detail": "api.sequential.pipeline.decorators.binary_cross_entropy_next_step_decorator",
        "documentation": {}
    },
    {
        "label": "DenseNextStepDecorator",
        "kind": 6,
        "importPath": "api.sequential.pipeline.decorators.dense_next_step_decorator",
        "description": "api.sequential.pipeline.decorators.dense_next_step_decorator",
        "peekOfCode": "class DenseNextStepDecorator(CommonLayer):\n    def __init__(self, decoratee: Dense, index: int, last: bool = False) -> None:\n        self.decoratee = decoratee\n        self.index = index\n        units = self.decoratee.ninputs\n        self.last = last\n        CommonLayer.__init__(self, self.decoratee.ninputs, units)\n    def forward(self, batch_input: np.ndarray, mode: str = 'train') -> None:\n        self.decoratee.forward(batch_input)\n    def backward(self, backward_derivatives: np.ndarray) -> None:",
        "detail": "api.sequential.pipeline.decorators.dense_next_step_decorator",
        "documentation": {}
    },
    {
        "label": "DropoutNextStepDecorator",
        "kind": 6,
        "importPath": "api.sequential.pipeline.decorators.dropout_decorator",
        "description": "api.sequential.pipeline.decorators.dropout_decorator",
        "peekOfCode": "class DropoutNextStepDecorator(InvDropout):\n    def __init__(self, decoratee: InvDropout, index: int, last: bool = False) -> None:\n        self.decoratee = decoratee\n        self.index = index\n        units = self.decoratee.ninputs\n        self.last = last\n        CommonLayer.__init__(self, self.decoratee.ninputs, units)\n    def forward(self, batch_input: np.ndarray, mode: str = 'train') -> None:\n        self.decoratee.forward(batch_input)\n    def backward(self, backward_derivatives: np.ndarray) -> None:",
        "detail": "api.sequential.pipeline.decorators.dropout_decorator",
        "documentation": {}
    },
    {
        "label": "MeanSquaredLossNextDecorator",
        "kind": 6,
        "importPath": "api.sequential.pipeline.decorators.mean_squared_loss_next_decorator",
        "description": "api.sequential.pipeline.decorators.mean_squared_loss_next_decorator",
        "peekOfCode": "class MeanSquaredLossNextDecorator(MeanSquareError):\n    def __init__(self, decoratee: CommonLayer, index: int) -> None:\n        self.decoratee = decoratee\n        self.index = index\n        units = self.decoratee.ninputs\n        self.last = True\n        # MeanSquareError.__init__(self, units)\n    def forward(self, batch_input: np.ndarray, mode: str = 'train') -> None:\n        self.decoratee.forward(batch_input)\n    def backward(self, backward_derivatives: np.ndarray) -> None:",
        "detail": "api.sequential.pipeline.decorators.mean_squared_loss_next_decorator",
        "documentation": {}
    },
    {
        "label": "ReLUNextStepDecorator",
        "kind": 6,
        "importPath": "api.sequential.pipeline.decorators.relu_decorator",
        "description": "api.sequential.pipeline.decorators.relu_decorator",
        "peekOfCode": "class ReLUNextStepDecorator(CommonLayer):\n    def __init__(self, decoratee: ReLU, index: int, last: bool = False) -> None:\n        self.decoratee = decoratee\n        self.index = index\n        units = self.decoratee.ninputs\n        self.last = last\n        CommonLayer.__init__(self, self.decoratee.ninputs, units)\n    def forward(self, batch_input: np.ndarray, mode: str = 'train') -> None:\n        self.decoratee.forward(batch_input)\n    def backward(self, backward_derivatives: np.ndarray) -> None:",
        "detail": "api.sequential.pipeline.decorators.relu_decorator",
        "documentation": {}
    },
    {
        "label": "SigmoidNextStepDecorator",
        "kind": 6,
        "importPath": "api.sequential.pipeline.decorators.sigmoid_decorator",
        "description": "api.sequential.pipeline.decorators.sigmoid_decorator",
        "peekOfCode": "class SigmoidNextStepDecorator(CommonLayer):\n    def __init__(self, decoratee: Sigmoid, index: int, last: bool = False) -> None:\n        self.decoratee = decoratee\n        self.index = index\n        units = self.decoratee.ninputs\n        self.last = last\n        CommonLayer.__init__(self, self.decoratee.ninputs, units)\n    def forward(self, batch_input: np.ndarray, mode: str = 'train') -> None:\n        self.decoratee.forward(batch_input)\n    def backward(self, backward_derivatives: np.ndarray) -> None:",
        "detail": "api.sequential.pipeline.decorators.sigmoid_decorator",
        "documentation": {}
    },
    {
        "label": "Pipeline",
        "kind": 6,
        "importPath": "api.sequential.pipeline.pipeline",
        "description": "api.sequential.pipeline.pipeline",
        "peekOfCode": "class Pipeline(PipelineContext, Observable):\n    def __init__(self, layers = [], next_callback = None):\n        PipelineState.__init__(self)\n        Observable.__init__(self)\n        self.api_layers = layers\n        self.layers = _build_layers(layers)\n        self.state = PipelineState.FORWARD\n        self.mode = PipelineMode.TRAINING\n        self.current = None\n        self.current_input = None",
        "detail": "api.sequential.pipeline.pipeline",
        "documentation": {}
    },
    {
        "label": "PipelineContext",
        "kind": 6,
        "importPath": "api.sequential.pipeline.pipeline_context",
        "description": "api.sequential.pipeline.pipeline_context",
        "peekOfCode": "class PipelineContext():\n    @abstractclassmethod\n    def get_state(self) -> PipelineState:\n        pass\n    @abstractclassmethod\n    def set_state(self, state: PipelineState) -> None:\n        pass\n    @abstractclassmethod\n    def set_current(self, index: int) -> None:\n        pass",
        "detail": "api.sequential.pipeline.pipeline_context",
        "documentation": {}
    },
    {
        "label": "PipelineMode",
        "kind": 6,
        "importPath": "api.sequential.pipeline.pipeline_mode",
        "description": "api.sequential.pipeline.pipeline_mode",
        "peekOfCode": "class PipelineMode(Enum):\n    TRAINING = 0,\n    TESTING = 1,\n    APPLYING = 2,",
        "detail": "api.sequential.pipeline.pipeline_mode",
        "documentation": {}
    },
    {
        "label": "PipelineState",
        "kind": 6,
        "importPath": "api.sequential.pipeline.pipeline_state",
        "description": "api.sequential.pipeline.pipeline_state",
        "peekOfCode": "class PipelineState(Enum):\n    IDLE = 0 # no input received yet\n    FORWARD = 1 # computing input\n    BACKWARD = 2",
        "detail": "api.sequential.pipeline.pipeline_state",
        "documentation": {}
    },
    {
        "label": "SequentialModel",
        "kind": 6,
        "importPath": "api.sequential.model",
        "description": "api.sequential.model",
        "peekOfCode": "class SequentialModel(SMLFComponent):\n    def __init__(self, layers: list[CommonLayer] = [], optimizer: str | OptimizerCommon = 'sgd',\n                        loss: str | CommonLoss = 'binary_cross_entropy',\n                        metrics: list[Metric] = [],\n                        name: str = 'sequential_model',\n                        learning_rate = 0.01,\n        ):\n        SMLFComponent.__init__(self)\n        self.name = name\n        self.layers = layers",
        "detail": "api.sequential.model",
        "documentation": {}
    },
    {
        "label": "binary_cross_entropy_factory",
        "kind": 2,
        "importPath": "api.sequential.model",
        "description": "api.sequential.model",
        "peekOfCode": "def binary_cross_entropy_factory(units):\n    return BinaryCrossEntropy(units)\ndef categorical_cross_entropy(units):\n    return CategoricalCrossEntropy(units)\nloss_factory = {\n    'binary_cross_entropy': binary_cross_entropy_factory,\n    'categorical_cross_entropy': categorical_cross_entropy,\n}\ndef _build_sgd(learning_rate: float = 0.01):\n    return StochasticGradientDescent(learning_rate=learning_rate)",
        "detail": "api.sequential.model",
        "documentation": {}
    },
    {
        "label": "categorical_cross_entropy",
        "kind": 2,
        "importPath": "api.sequential.model",
        "description": "api.sequential.model",
        "peekOfCode": "def categorical_cross_entropy(units):\n    return CategoricalCrossEntropy(units)\nloss_factory = {\n    'binary_cross_entropy': binary_cross_entropy_factory,\n    'categorical_cross_entropy': categorical_cross_entropy,\n}\ndef _build_sgd(learning_rate: float = 0.01):\n    return StochasticGradientDescent(learning_rate=learning_rate)\ndef _build_adagrad(learning_rate: float = 0.01):\n    return AdagradOptmizer(learning_rate=learning_rate)",
        "detail": "api.sequential.model",
        "documentation": {}
    },
    {
        "label": "loss_factory",
        "kind": 5,
        "importPath": "api.sequential.model",
        "description": "api.sequential.model",
        "peekOfCode": "loss_factory = {\n    'binary_cross_entropy': binary_cross_entropy_factory,\n    'categorical_cross_entropy': categorical_cross_entropy,\n}\ndef _build_sgd(learning_rate: float = 0.01):\n    return StochasticGradientDescent(learning_rate=learning_rate)\ndef _build_adagrad(learning_rate: float = 0.01):\n    return AdagradOptmizer(learning_rate=learning_rate)\nloss_builder = dict({\n    'sgd': _build_sgd,",
        "detail": "api.sequential.model",
        "documentation": {}
    },
    {
        "label": "loss_builder",
        "kind": 5,
        "importPath": "api.sequential.model",
        "description": "api.sequential.model",
        "peekOfCode": "loss_builder = dict({\n    'sgd': _build_sgd,\n    'ada_grad': _build_adagrad,\n})\nclass SequentialModel(SMLFComponent):\n    def __init__(self, layers: list[CommonLayer] = [], optimizer: str | OptimizerCommon = 'sgd',\n                        loss: str | CommonLoss = 'binary_cross_entropy',\n                        metrics: list[Metric] = [],\n                        name: str = 'sequential_model',\n                        learning_rate = 0.01,",
        "detail": "api.sequential.model",
        "documentation": {}
    },
    {
        "label": "BatchDenseNormalization",
        "kind": 6,
        "importPath": "api.batch_dense_normalization",
        "description": "api.batch_dense_normalization",
        "peekOfCode": "class BatchDenseNormalization(SMLFComponent, CommonLayer):\n    def __init__(self, units: int):\n        SMLFComponent.__init__(self)\n        CommonLayer.__init__(self,ninputs=units, noutputs=units)\n        self.gamma = np.ones((1, units))\n        self.beta = np.zeros((1, units))\n        self.units = units\n    def forward(self, batch_input: np.ndarray, mode: str = 'train') -> None:\n        self.batch_input = batch_input\n        self.batch_features_mean = np.mean(batch_input, axis=0, keepdims=True)",
        "detail": "api.batch_dense_normalization",
        "documentation": {}
    },
    {
        "label": "ep",
        "kind": 5,
        "importPath": "api.batch_dense_normalization",
        "description": "api.batch_dense_normalization",
        "peekOfCode": "ep = 1e-7\nclass BatchDenseNormalization(SMLFComponent, CommonLayer):\n    def __init__(self, units: int):\n        SMLFComponent.__init__(self)\n        CommonLayer.__init__(self,ninputs=units, noutputs=units)\n        self.gamma = np.ones((1, units))\n        self.beta = np.zeros((1, units))\n        self.units = units\n    def forward(self, batch_input: np.ndarray, mode: str = 'train') -> None:\n        self.batch_input = batch_input",
        "detail": "api.batch_dense_normalization",
        "documentation": {}
    },
    {
        "label": "CommonLayer",
        "kind": 6,
        "importPath": "api.common_layer",
        "description": "api.common_layer",
        "peekOfCode": "class CommonLayer:\n    def __init__(self, ninputs, noutputs) -> None:\n        self.ninputs = ninputs\n        self.noutputs = noutputs\n    @abstractmethod\n    def forward(self, batch_input: np.ndarray, mode: str = 'train') -> None:\n        pass\n    @abstractmethod\n    def backward(self, backward_derivatives: np.ndarray) -> None:\n        pass",
        "detail": "api.common_layer",
        "documentation": {}
    },
    {
        "label": "Conv2DLayer",
        "kind": 6,
        "importPath": "api.conv2d_layer",
        "description": "api.conv2d_layer",
        "peekOfCode": "class Conv2DLayer(CommonLayer):\n    '''\n        self.input_size (depth, width, height)\n        kernel_shape: (depth, width, height)\n    '''\n    def __init__(self, input_size: tuple, kernel_size: tuple | int, depth: int, padding_mode: str = 'valid'):\n        self.input_size  = input_size\n        self.depth = depth\n        self.kernel_size = self._validate_kernel_size(kernel_size)\n        self.output_shape = _calculate_output_shape(input_shape=input_size, kernel_size=kernel_size, depth=depth, padding_mode=padding_mode)",
        "detail": "api.conv2d_layer",
        "documentation": {}
    },
    {
        "label": "input_size",
        "kind": 5,
        "importPath": "api.mnist_dataset_test",
        "description": "api.mnist_dataset_test",
        "peekOfCode": "input_size = 28 * 28\ntrain_size = len(x_train)\ntest_size = len(x_test)\nnum_classes = 10\n''''\n    reshape x_train, x_test from 28x28 matrix to 784-element vector\n    work on data, get y_train, y_test to be one-hot encoded\n    normalize to range 0, 1\n'''\nx_train = np.reshape(x_train, (train_size, input_size))",
        "detail": "api.mnist_dataset_test",
        "documentation": {}
    },
    {
        "label": "train_size",
        "kind": 5,
        "importPath": "api.mnist_dataset_test",
        "description": "api.mnist_dataset_test",
        "peekOfCode": "train_size = len(x_train)\ntest_size = len(x_test)\nnum_classes = 10\n''''\n    reshape x_train, x_test from 28x28 matrix to 784-element vector\n    work on data, get y_train, y_test to be one-hot encoded\n    normalize to range 0, 1\n'''\nx_train = np.reshape(x_train, (train_size, input_size))\nx_test = np.reshape(x_test, (test_size, input_size))",
        "detail": "api.mnist_dataset_test",
        "documentation": {}
    },
    {
        "label": "test_size",
        "kind": 5,
        "importPath": "api.mnist_dataset_test",
        "description": "api.mnist_dataset_test",
        "peekOfCode": "test_size = len(x_test)\nnum_classes = 10\n''''\n    reshape x_train, x_test from 28x28 matrix to 784-element vector\n    work on data, get y_train, y_test to be one-hot encoded\n    normalize to range 0, 1\n'''\nx_train = np.reshape(x_train, (train_size, input_size))\nx_test = np.reshape(x_test, (test_size, input_size))\nx_train = x_train / 255.0",
        "detail": "api.mnist_dataset_test",
        "documentation": {}
    },
    {
        "label": "num_classes",
        "kind": 5,
        "importPath": "api.mnist_dataset_test",
        "description": "api.mnist_dataset_test",
        "peekOfCode": "num_classes = 10\n''''\n    reshape x_train, x_test from 28x28 matrix to 784-element vector\n    work on data, get y_train, y_test to be one-hot encoded\n    normalize to range 0, 1\n'''\nx_train = np.reshape(x_train, (train_size, input_size))\nx_test = np.reshape(x_test, (test_size, input_size))\nx_train = x_train / 255.0\nx_test = x_test / 255.0",
        "detail": "api.mnist_dataset_test",
        "documentation": {}
    },
    {
        "label": "x_train",
        "kind": 5,
        "importPath": "api.mnist_dataset_test",
        "description": "api.mnist_dataset_test",
        "peekOfCode": "x_train = np.reshape(x_train, (train_size, input_size))\nx_test = np.reshape(x_test, (test_size, input_size))\nx_train = x_train / 255.0\nx_test = x_test / 255.0\ny_train = tf.keras.utils.to_categorical(y_train, num_classes=num_classes)\ny_test = tf.keras.utils.to_categorical(y_test, num_classes=num_classes)\n'''\n    model definition\n'''\ninput_layer = Dense(ninputs=input_size, noutputs=128)",
        "detail": "api.mnist_dataset_test",
        "documentation": {}
    },
    {
        "label": "x_test",
        "kind": 5,
        "importPath": "api.mnist_dataset_test",
        "description": "api.mnist_dataset_test",
        "peekOfCode": "x_test = np.reshape(x_test, (test_size, input_size))\nx_train = x_train / 255.0\nx_test = x_test / 255.0\ny_train = tf.keras.utils.to_categorical(y_train, num_classes=num_classes)\ny_test = tf.keras.utils.to_categorical(y_test, num_classes=num_classes)\n'''\n    model definition\n'''\ninput_layer = Dense(ninputs=input_size, noutputs=128)\nactivation_input_layer = ReLU(ninputs=128)",
        "detail": "api.mnist_dataset_test",
        "documentation": {}
    },
    {
        "label": "x_train",
        "kind": 5,
        "importPath": "api.mnist_dataset_test",
        "description": "api.mnist_dataset_test",
        "peekOfCode": "x_train = x_train / 255.0\nx_test = x_test / 255.0\ny_train = tf.keras.utils.to_categorical(y_train, num_classes=num_classes)\ny_test = tf.keras.utils.to_categorical(y_test, num_classes=num_classes)\n'''\n    model definition\n'''\ninput_layer = Dense(ninputs=input_size, noutputs=128)\nactivation_input_layer = ReLU(ninputs=128)\nsecond_layer = Dense(ninputs=128, noutputs=128)",
        "detail": "api.mnist_dataset_test",
        "documentation": {}
    },
    {
        "label": "x_test",
        "kind": 5,
        "importPath": "api.mnist_dataset_test",
        "description": "api.mnist_dataset_test",
        "peekOfCode": "x_test = x_test / 255.0\ny_train = tf.keras.utils.to_categorical(y_train, num_classes=num_classes)\ny_test = tf.keras.utils.to_categorical(y_test, num_classes=num_classes)\n'''\n    model definition\n'''\ninput_layer = Dense(ninputs=input_size, noutputs=128)\nactivation_input_layer = ReLU(ninputs=128)\nsecond_layer = Dense(ninputs=128, noutputs=128)\nactivation_second_layer = ReLU(ninputs=128)",
        "detail": "api.mnist_dataset_test",
        "documentation": {}
    },
    {
        "label": "y_train",
        "kind": 5,
        "importPath": "api.mnist_dataset_test",
        "description": "api.mnist_dataset_test",
        "peekOfCode": "y_train = tf.keras.utils.to_categorical(y_train, num_classes=num_classes)\ny_test = tf.keras.utils.to_categorical(y_test, num_classes=num_classes)\n'''\n    model definition\n'''\ninput_layer = Dense(ninputs=input_size, noutputs=128)\nactivation_input_layer = ReLU(ninputs=128)\nsecond_layer = Dense(ninputs=128, noutputs=128)\nactivation_second_layer = ReLU(ninputs=128)\nfinal_layer = Dense(ninputs=128, noutputs=10)",
        "detail": "api.mnist_dataset_test",
        "documentation": {}
    },
    {
        "label": "y_test",
        "kind": 5,
        "importPath": "api.mnist_dataset_test",
        "description": "api.mnist_dataset_test",
        "peekOfCode": "y_test = tf.keras.utils.to_categorical(y_test, num_classes=num_classes)\n'''\n    model definition\n'''\ninput_layer = Dense(ninputs=input_size, noutputs=128)\nactivation_input_layer = ReLU(ninputs=128)\nsecond_layer = Dense(ninputs=128, noutputs=128)\nactivation_second_layer = ReLU(ninputs=128)\nfinal_layer = Dense(ninputs=128, noutputs=10)\nactivation_final_layer = SoftmaxCategoricalCrossEntropyLayer(10)",
        "detail": "api.mnist_dataset_test",
        "documentation": {}
    },
    {
        "label": "input_layer",
        "kind": 5,
        "importPath": "api.mnist_dataset_test",
        "description": "api.mnist_dataset_test",
        "peekOfCode": "input_layer = Dense(ninputs=input_size, noutputs=128)\nactivation_input_layer = ReLU(ninputs=128)\nsecond_layer = Dense(ninputs=128, noutputs=128)\nactivation_second_layer = ReLU(ninputs=128)\nfinal_layer = Dense(ninputs=128, noutputs=10)\nactivation_final_layer = SoftmaxCategoricalCrossEntropyLayer(10)\nepochs = 10001\nx_train = x_train[0:1]\ny_train = y_train[0:1]\n# input_layer.forward(x_train)",
        "detail": "api.mnist_dataset_test",
        "documentation": {}
    },
    {
        "label": "activation_input_layer",
        "kind": 5,
        "importPath": "api.mnist_dataset_test",
        "description": "api.mnist_dataset_test",
        "peekOfCode": "activation_input_layer = ReLU(ninputs=128)\nsecond_layer = Dense(ninputs=128, noutputs=128)\nactivation_second_layer = ReLU(ninputs=128)\nfinal_layer = Dense(ninputs=128, noutputs=10)\nactivation_final_layer = SoftmaxCategoricalCrossEntropyLayer(10)\nepochs = 10001\nx_train = x_train[0:1]\ny_train = y_train[0:1]\n# input_layer.forward(x_train)\n# print(input_layer.output)",
        "detail": "api.mnist_dataset_test",
        "documentation": {}
    },
    {
        "label": "second_layer",
        "kind": 5,
        "importPath": "api.mnist_dataset_test",
        "description": "api.mnist_dataset_test",
        "peekOfCode": "second_layer = Dense(ninputs=128, noutputs=128)\nactivation_second_layer = ReLU(ninputs=128)\nfinal_layer = Dense(ninputs=128, noutputs=10)\nactivation_final_layer = SoftmaxCategoricalCrossEntropyLayer(10)\nepochs = 10001\nx_train = x_train[0:1]\ny_train = y_train[0:1]\n# input_layer.forward(x_train)\n# print(input_layer.output)\nfor epoch in range(1, epochs):",
        "detail": "api.mnist_dataset_test",
        "documentation": {}
    },
    {
        "label": "activation_second_layer",
        "kind": 5,
        "importPath": "api.mnist_dataset_test",
        "description": "api.mnist_dataset_test",
        "peekOfCode": "activation_second_layer = ReLU(ninputs=128)\nfinal_layer = Dense(ninputs=128, noutputs=10)\nactivation_final_layer = SoftmaxCategoricalCrossEntropyLayer(10)\nepochs = 10001\nx_train = x_train[0:1]\ny_train = y_train[0:1]\n# input_layer.forward(x_train)\n# print(input_layer.output)\nfor epoch in range(1, epochs):\n    # if (epoch % 100 == 0):",
        "detail": "api.mnist_dataset_test",
        "documentation": {}
    },
    {
        "label": "final_layer",
        "kind": 5,
        "importPath": "api.mnist_dataset_test",
        "description": "api.mnist_dataset_test",
        "peekOfCode": "final_layer = Dense(ninputs=128, noutputs=10)\nactivation_final_layer = SoftmaxCategoricalCrossEntropyLayer(10)\nepochs = 10001\nx_train = x_train[0:1]\ny_train = y_train[0:1]\n# input_layer.forward(x_train)\n# print(input_layer.output)\nfor epoch in range(1, epochs):\n    # if (epoch % 100 == 0):\n        # print(f'epoch: {epoch} loss = {activation_final_layer.loss}')",
        "detail": "api.mnist_dataset_test",
        "documentation": {}
    },
    {
        "label": "activation_final_layer",
        "kind": 5,
        "importPath": "api.mnist_dataset_test",
        "description": "api.mnist_dataset_test",
        "peekOfCode": "activation_final_layer = SoftmaxCategoricalCrossEntropyLayer(10)\nepochs = 10001\nx_train = x_train[0:1]\ny_train = y_train[0:1]\n# input_layer.forward(x_train)\n# print(input_layer.output)\nfor epoch in range(1, epochs):\n    # if (epoch % 100 == 0):\n        # print(f'epoch: {epoch} loss = {activation_final_layer.loss}')\n        # print(f'epoch: {epoch} ')",
        "detail": "api.mnist_dataset_test",
        "documentation": {}
    },
    {
        "label": "epochs",
        "kind": 5,
        "importPath": "api.mnist_dataset_test",
        "description": "api.mnist_dataset_test",
        "peekOfCode": "epochs = 10001\nx_train = x_train[0:1]\ny_train = y_train[0:1]\n# input_layer.forward(x_train)\n# print(input_layer.output)\nfor epoch in range(1, epochs):\n    # if (epoch % 100 == 0):\n        # print(f'epoch: {epoch} loss = {activation_final_layer.loss}')\n        # print(f'epoch: {epoch} ')\n        # print(second_layer.output)",
        "detail": "api.mnist_dataset_test",
        "documentation": {}
    },
    {
        "label": "x_train",
        "kind": 5,
        "importPath": "api.mnist_dataset_test",
        "description": "api.mnist_dataset_test",
        "peekOfCode": "x_train = x_train[0:1]\ny_train = y_train[0:1]\n# input_layer.forward(x_train)\n# print(input_layer.output)\nfor epoch in range(1, epochs):\n    # if (epoch % 100 == 0):\n        # print(f'epoch: {epoch} loss = {activation_final_layer.loss}')\n        # print(f'epoch: {epoch} ')\n        # print(second_layer.output)\n        # print(x_train)",
        "detail": "api.mnist_dataset_test",
        "documentation": {}
    },
    {
        "label": "y_train",
        "kind": 5,
        "importPath": "api.mnist_dataset_test",
        "description": "api.mnist_dataset_test",
        "peekOfCode": "y_train = y_train[0:1]\n# input_layer.forward(x_train)\n# print(input_layer.output)\nfor epoch in range(1, epochs):\n    # if (epoch % 100 == 0):\n        # print(f'epoch: {epoch} loss = {activation_final_layer.loss}')\n        # print(f'epoch: {epoch} ')\n        # print(second_layer.output)\n        # print(x_train)\n    input_layer.forward(x_train)",
        "detail": "api.mnist_dataset_test",
        "documentation": {}
    },
    {
        "label": "dataframe",
        "kind": 5,
        "importPath": "examples.regularization.dropout_example",
        "description": "examples.regularization.dropout_example",
        "peekOfCode": "dataframe = read_csv(\"/home/aot/Desktop/SMLF/examples/regularization/sonar.csv\", header=None)\ndataset = dataframe.values\nX = dataset[:,0:60].astype(float)\nY = dataset[:,60]\nencoder = LabelEncoder()\nencoder.fit(Y)\nY = encoder.transform(Y).reshape((208, 1))\nX, Y = shuffle(X, Y)\nprint(X[0:10], Y[0:10])\nX_train = X[0:180,:]",
        "detail": "examples.regularization.dropout_example",
        "documentation": {}
    },
    {
        "label": "dataset",
        "kind": 5,
        "importPath": "examples.regularization.dropout_example",
        "description": "examples.regularization.dropout_example",
        "peekOfCode": "dataset = dataframe.values\nX = dataset[:,0:60].astype(float)\nY = dataset[:,60]\nencoder = LabelEncoder()\nencoder.fit(Y)\nY = encoder.transform(Y).reshape((208, 1))\nX, Y = shuffle(X, Y)\nprint(X[0:10], Y[0:10])\nX_train = X[0:180,:]\nX_test = X[180:260,:]",
        "detail": "examples.regularization.dropout_example",
        "documentation": {}
    },
    {
        "label": "X",
        "kind": 5,
        "importPath": "examples.regularization.dropout_example",
        "description": "examples.regularization.dropout_example",
        "peekOfCode": "X = dataset[:,0:60].astype(float)\nY = dataset[:,60]\nencoder = LabelEncoder()\nencoder.fit(Y)\nY = encoder.transform(Y).reshape((208, 1))\nX, Y = shuffle(X, Y)\nprint(X[0:10], Y[0:10])\nX_train = X[0:180,:]\nX_test = X[180:260,:]\nY_train = Y[0:180,:]",
        "detail": "examples.regularization.dropout_example",
        "documentation": {}
    },
    {
        "label": "Y",
        "kind": 5,
        "importPath": "examples.regularization.dropout_example",
        "description": "examples.regularization.dropout_example",
        "peekOfCode": "Y = dataset[:,60]\nencoder = LabelEncoder()\nencoder.fit(Y)\nY = encoder.transform(Y).reshape((208, 1))\nX, Y = shuffle(X, Y)\nprint(X[0:10], Y[0:10])\nX_train = X[0:180,:]\nX_test = X[180:260,:]\nY_train = Y[0:180,:]\nY_test = Y[180:260,:]",
        "detail": "examples.regularization.dropout_example",
        "documentation": {}
    },
    {
        "label": "encoder",
        "kind": 5,
        "importPath": "examples.regularization.dropout_example",
        "description": "examples.regularization.dropout_example",
        "peekOfCode": "encoder = LabelEncoder()\nencoder.fit(Y)\nY = encoder.transform(Y).reshape((208, 1))\nX, Y = shuffle(X, Y)\nprint(X[0:10], Y[0:10])\nX_train = X[0:180,:]\nX_test = X[180:260,:]\nY_train = Y[0:180,:]\nY_test = Y[180:260,:]\nmodel1 = SequentialModel(",
        "detail": "examples.regularization.dropout_example",
        "documentation": {}
    },
    {
        "label": "Y",
        "kind": 5,
        "importPath": "examples.regularization.dropout_example",
        "description": "examples.regularization.dropout_example",
        "peekOfCode": "Y = encoder.transform(Y).reshape((208, 1))\nX, Y = shuffle(X, Y)\nprint(X[0:10], Y[0:10])\nX_train = X[0:180,:]\nX_test = X[180:260,:]\nY_train = Y[0:180,:]\nY_test = Y[180:260,:]\nmodel1 = SequentialModel(\n    layers=[\n        Dense(ninputs=60, noutputs=40, activation='relu'),",
        "detail": "examples.regularization.dropout_example",
        "documentation": {}
    },
    {
        "label": "X_train",
        "kind": 5,
        "importPath": "examples.regularization.dropout_example",
        "description": "examples.regularization.dropout_example",
        "peekOfCode": "X_train = X[0:180,:]\nX_test = X[180:260,:]\nY_train = Y[0:180,:]\nY_test = Y[180:260,:]\nmodel1 = SequentialModel(\n    layers=[\n        Dense(ninputs=60, noutputs=40, activation='relu'),\n        Dropout(dropout_rate=.3, units=40),\n        Dense(ninputs=40, noutputs=20, activation='sigmoid'),\n        Dropout(dropout_rate=.3, units=20),",
        "detail": "examples.regularization.dropout_example",
        "documentation": {}
    },
    {
        "label": "X_test",
        "kind": 5,
        "importPath": "examples.regularization.dropout_example",
        "description": "examples.regularization.dropout_example",
        "peekOfCode": "X_test = X[180:260,:]\nY_train = Y[0:180,:]\nY_test = Y[180:260,:]\nmodel1 = SequentialModel(\n    layers=[\n        Dense(ninputs=60, noutputs=40, activation='relu'),\n        Dropout(dropout_rate=.3, units=40),\n        Dense(ninputs=40, noutputs=20, activation='sigmoid'),\n        Dropout(dropout_rate=.3, units=20),\n        Dense(ninputs=20, noutputs=10, activation='relu'),",
        "detail": "examples.regularization.dropout_example",
        "documentation": {}
    },
    {
        "label": "Y_train",
        "kind": 5,
        "importPath": "examples.regularization.dropout_example",
        "description": "examples.regularization.dropout_example",
        "peekOfCode": "Y_train = Y[0:180,:]\nY_test = Y[180:260,:]\nmodel1 = SequentialModel(\n    layers=[\n        Dense(ninputs=60, noutputs=40, activation='relu'),\n        Dropout(dropout_rate=.3, units=40),\n        Dense(ninputs=40, noutputs=20, activation='sigmoid'),\n        Dropout(dropout_rate=.3, units=20),\n        Dense(ninputs=20, noutputs=10, activation='relu'),\n        Dropout(dropout_rate=0.2,units=10),",
        "detail": "examples.regularization.dropout_example",
        "documentation": {}
    },
    {
        "label": "Y_test",
        "kind": 5,
        "importPath": "examples.regularization.dropout_example",
        "description": "examples.regularization.dropout_example",
        "peekOfCode": "Y_test = Y[180:260,:]\nmodel1 = SequentialModel(\n    layers=[\n        Dense(ninputs=60, noutputs=40, activation='relu'),\n        Dropout(dropout_rate=.3, units=40),\n        Dense(ninputs=40, noutputs=20, activation='sigmoid'),\n        Dropout(dropout_rate=.3, units=20),\n        Dense(ninputs=20, noutputs=10, activation='relu'),\n        Dropout(dropout_rate=0.2,units=10),\n        Dense(ninputs=10, noutputs=1, activation='sigmoid'),",
        "detail": "examples.regularization.dropout_example",
        "documentation": {}
    },
    {
        "label": "model1",
        "kind": 5,
        "importPath": "examples.regularization.dropout_example",
        "description": "examples.regularization.dropout_example",
        "peekOfCode": "model1 = SequentialModel(\n    layers=[\n        Dense(ninputs=60, noutputs=40, activation='relu'),\n        Dropout(dropout_rate=.3, units=40),\n        Dense(ninputs=40, noutputs=20, activation='sigmoid'),\n        Dropout(dropout_rate=.3, units=20),\n        Dense(ninputs=20, noutputs=10, activation='relu'),\n        Dropout(dropout_rate=0.2,units=10),\n        Dense(ninputs=10, noutputs=1, activation='sigmoid'),\n        BinaryCrossEntropy(ninputs=1),",
        "detail": "examples.regularization.dropout_example",
        "documentation": {}
    },
    {
        "label": "model2",
        "kind": 5,
        "importPath": "examples.regularization.dropout_example",
        "description": "examples.regularization.dropout_example",
        "peekOfCode": "model2 = SequentialModel(\n    layers=[\n        Dense(ninputs=60, noutputs=40, activation='relu'),\n        Dense(ninputs=40, noutputs=20, activation='sigmoid'),\n        Dense(ninputs=20, noutputs=10, activation='relu'),\n        Dense(ninputs=10, noutputs=1, activation='sigmoid'),\n        BinaryCrossEntropy(ninputs=1),\n    ],\n    optimizer=StochasticGradientDescent(),\n    metrics=[BinaryAccuracy()]",
        "detail": "examples.regularization.dropout_example",
        "documentation": {}
    },
    {
        "label": "matrix",
        "kind": 5,
        "importPath": "examples.cnn_simple_filters",
        "description": "examples.cnn_simple_filters",
        "peekOfCode": "matrix = np.array(range(1, 26)).reshape((5,5))\nkernel = np.array([\n    [0, 0, 0],\n    [0, 1, 0],\n    [0, 0, 0]\n])\nprint(matrix)\n# print(kernel.shape)\nconvolved = signal.convolve2d(matrix, kernel, mode='same')\nprint(convolved)",
        "detail": "examples.cnn_simple_filters",
        "documentation": {}
    },
    {
        "label": "kernel",
        "kind": 5,
        "importPath": "examples.cnn_simple_filters",
        "description": "examples.cnn_simple_filters",
        "peekOfCode": "kernel = np.array([\n    [0, 0, 0],\n    [0, 1, 0],\n    [0, 0, 0]\n])\nprint(matrix)\n# print(kernel.shape)\nconvolved = signal.convolve2d(matrix, kernel, mode='same')\nprint(convolved)\n# (x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()",
        "detail": "examples.cnn_simple_filters",
        "documentation": {}
    },
    {
        "label": "convolved",
        "kind": 5,
        "importPath": "examples.cnn_simple_filters",
        "description": "examples.cnn_simple_filters",
        "peekOfCode": "convolved = signal.convolve2d(matrix, kernel, mode='same')\nprint(convolved)\n# (x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()\n# image = x_train[0].reshape(1, 28, 28)\n# identity_filter = np.array([\n#     [0, 0, 0],\n#     [0, 1, 0],\n#     [0, 0, 0],\n# ]).reshape((1, 3, 3))\n# edge_detection_filter = np.array([",
        "detail": "examples.cnn_simple_filters",
        "documentation": {}
    },
    {
        "label": "layer",
        "kind": 5,
        "importPath": "examples.con2d_example",
        "description": "examples.con2d_example",
        "peekOfCode": "layer = Conv2DLayer(kernel_size=(3,3), input_size=(32, 32, 3), nkernels=3, padding='same')",
        "detail": "examples.con2d_example",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "examples.diabetes_example",
        "description": "examples.diabetes_example",
        "peekOfCode": "data = np.loadtxt('https://raw.githubusercontent.com/jbrownlee/Datasets/master/pima-indians-diabetes.csv',delimiter =',')\nprint(data.shape)\nX_data = data[:,0:8]\nprint('X_data:',np.shape(X_data))\nY_data = data[:,8].reshape(-1, 1)\nprint('Y_data:',np.shape(Y_data))\nprint(X_data)\nX_data = preprocessing.normalize(X_data)\nprint(X_data)\nmodel = SequentialModel(",
        "detail": "examples.diabetes_example",
        "documentation": {}
    },
    {
        "label": "X_data",
        "kind": 5,
        "importPath": "examples.diabetes_example",
        "description": "examples.diabetes_example",
        "peekOfCode": "X_data = data[:,0:8]\nprint('X_data:',np.shape(X_data))\nY_data = data[:,8].reshape(-1, 1)\nprint('Y_data:',np.shape(Y_data))\nprint(X_data)\nX_data = preprocessing.normalize(X_data)\nprint(X_data)\nmodel = SequentialModel(\n    layers=[\n        Dense(ninputs=8, noutputs=4, init_algorithm='uniform', activation='relu'),",
        "detail": "examples.diabetes_example",
        "documentation": {}
    },
    {
        "label": "Y_data",
        "kind": 5,
        "importPath": "examples.diabetes_example",
        "description": "examples.diabetes_example",
        "peekOfCode": "Y_data = data[:,8].reshape(-1, 1)\nprint('Y_data:',np.shape(Y_data))\nprint(X_data)\nX_data = preprocessing.normalize(X_data)\nprint(X_data)\nmodel = SequentialModel(\n    layers=[\n        Dense(ninputs=8, noutputs=4, init_algorithm='uniform', activation='relu'),\n        Dense(ninputs=4, noutputs=8, init_algorithm='uniform', activation='sigmoid'),\n        Dense(ninputs=8, noutputs=1, init_algorithm='uniform'),",
        "detail": "examples.diabetes_example",
        "documentation": {}
    },
    {
        "label": "X_data",
        "kind": 5,
        "importPath": "examples.diabetes_example",
        "description": "examples.diabetes_example",
        "peekOfCode": "X_data = preprocessing.normalize(X_data)\nprint(X_data)\nmodel = SequentialModel(\n    layers=[\n        Dense(ninputs=8, noutputs=4, init_algorithm='uniform', activation='relu'),\n        Dense(ninputs=4, noutputs=8, init_algorithm='uniform', activation='sigmoid'),\n        Dense(ninputs=8, noutputs=1, init_algorithm='uniform'),\n        Softmax(1)\n    ],\n    optimizer=StochasticGradientDescent(learning_rate=0.1), loss='categorical_cross_entropy'",
        "detail": "examples.diabetes_example",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "examples.diabetes_example",
        "description": "examples.diabetes_example",
        "peekOfCode": "model = SequentialModel(\n    layers=[\n        Dense(ninputs=8, noutputs=4, init_algorithm='uniform', activation='relu'),\n        Dense(ninputs=4, noutputs=8, init_algorithm='uniform', activation='sigmoid'),\n        Dense(ninputs=8, noutputs=1, init_algorithm='uniform'),\n        Softmax(1)\n    ],\n    optimizer=StochasticGradientDescent(learning_rate=0.1), loss='categorical_cross_entropy'\n)\nmodel.fit(X_data, Y_data, epochs=10000, batch_size=500)",
        "detail": "examples.diabetes_example",
        "documentation": {}
    },
    {
        "label": "iris",
        "kind": 5,
        "importPath": "examples.iris_example2",
        "description": "examples.iris_example2",
        "peekOfCode": "iris = load_iris()\nX = iris['data']\ny = iris['target']\nnames = iris['target_names']\nfeature_names = iris['feature_names']\n# One hot encoding\nenc = OneHotEncoder()\nY = enc.fit_transform(y[:, np.newaxis]).toarray()\n# Scale data to have mean 0 and variance 1 \n# which is importance for convergence of the neural network",
        "detail": "examples.iris_example2",
        "documentation": {}
    },
    {
        "label": "X",
        "kind": 5,
        "importPath": "examples.iris_example2",
        "description": "examples.iris_example2",
        "peekOfCode": "X = iris['data']\ny = iris['target']\nnames = iris['target_names']\nfeature_names = iris['feature_names']\n# One hot encoding\nenc = OneHotEncoder()\nY = enc.fit_transform(y[:, np.newaxis]).toarray()\n# Scale data to have mean 0 and variance 1 \n# which is importance for convergence of the neural network\nscaler = StandardScaler()",
        "detail": "examples.iris_example2",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "examples.iris_example2",
        "description": "examples.iris_example2",
        "peekOfCode": "y = iris['target']\nnames = iris['target_names']\nfeature_names = iris['feature_names']\n# One hot encoding\nenc = OneHotEncoder()\nY = enc.fit_transform(y[:, np.newaxis]).toarray()\n# Scale data to have mean 0 and variance 1 \n# which is importance for convergence of the neural network\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X)",
        "detail": "examples.iris_example2",
        "documentation": {}
    },
    {
        "label": "names",
        "kind": 5,
        "importPath": "examples.iris_example2",
        "description": "examples.iris_example2",
        "peekOfCode": "names = iris['target_names']\nfeature_names = iris['feature_names']\n# One hot encoding\nenc = OneHotEncoder()\nY = enc.fit_transform(y[:, np.newaxis]).toarray()\n# Scale data to have mean 0 and variance 1 \n# which is importance for convergence of the neural network\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X)\nprint(X[0:10])",
        "detail": "examples.iris_example2",
        "documentation": {}
    },
    {
        "label": "feature_names",
        "kind": 5,
        "importPath": "examples.iris_example2",
        "description": "examples.iris_example2",
        "peekOfCode": "feature_names = iris['feature_names']\n# One hot encoding\nenc = OneHotEncoder()\nY = enc.fit_transform(y[:, np.newaxis]).toarray()\n# Scale data to have mean 0 and variance 1 \n# which is importance for convergence of the neural network\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X)\nprint(X[0:10])\nprint(X_scaled[0:10])",
        "detail": "examples.iris_example2",
        "documentation": {}
    },
    {
        "label": "enc",
        "kind": 5,
        "importPath": "examples.iris_example2",
        "description": "examples.iris_example2",
        "peekOfCode": "enc = OneHotEncoder()\nY = enc.fit_transform(y[:, np.newaxis]).toarray()\n# Scale data to have mean 0 and variance 1 \n# which is importance for convergence of the neural network\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X)\nprint(X[0:10])\nprint(X_scaled[0:10])\n# Split the data set into training and testing\nsupy = Y[50:]",
        "detail": "examples.iris_example2",
        "documentation": {}
    },
    {
        "label": "Y",
        "kind": 5,
        "importPath": "examples.iris_example2",
        "description": "examples.iris_example2",
        "peekOfCode": "Y = enc.fit_transform(y[:, np.newaxis]).toarray()\n# Scale data to have mean 0 and variance 1 \n# which is importance for convergence of the neural network\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X)\nprint(X[0:10])\nprint(X_scaled[0:10])\n# Split the data set into training and testing\nsupy = Y[50:]\nsupx = X_scaled[50:]",
        "detail": "examples.iris_example2",
        "documentation": {}
    },
    {
        "label": "scaler",
        "kind": 5,
        "importPath": "examples.iris_example2",
        "description": "examples.iris_example2",
        "peekOfCode": "scaler = StandardScaler()\nX_scaled = scaler.fit_transform(X)\nprint(X[0:10])\nprint(X_scaled[0:10])\n# Split the data set into training and testing\nsupy = Y[50:]\nsupx = X_scaled[50:]\nshuffle(supx, supy)\nX_train, X_test, Y_train, Y_test = train_test_split(\n    X_scaled, Y, test_size=0.5, random_state=2)",
        "detail": "examples.iris_example2",
        "documentation": {}
    },
    {
        "label": "X_scaled",
        "kind": 5,
        "importPath": "examples.iris_example2",
        "description": "examples.iris_example2",
        "peekOfCode": "X_scaled = scaler.fit_transform(X)\nprint(X[0:10])\nprint(X_scaled[0:10])\n# Split the data set into training and testing\nsupy = Y[50:]\nsupx = X_scaled[50:]\nshuffle(supx, supy)\nX_train, X_test, Y_train, Y_test = train_test_split(\n    X_scaled, Y, test_size=0.5, random_state=2)\nn_features = X.shape[1]",
        "detail": "examples.iris_example2",
        "documentation": {}
    },
    {
        "label": "supy",
        "kind": 5,
        "importPath": "examples.iris_example2",
        "description": "examples.iris_example2",
        "peekOfCode": "supy = Y[50:]\nsupx = X_scaled[50:]\nshuffle(supx, supy)\nX_train, X_test, Y_train, Y_test = train_test_split(\n    X_scaled, Y, test_size=0.5, random_state=2)\nn_features = X.shape[1]\nn_classes = Y.shape[1]\nY_train = Y_train[:, 0].reshape(-1, 1)\nY_test = Y_test[:, 0].reshape(-1, 1)\ninit_algorithm = 'uniform'",
        "detail": "examples.iris_example2",
        "documentation": {}
    },
    {
        "label": "supx",
        "kind": 5,
        "importPath": "examples.iris_example2",
        "description": "examples.iris_example2",
        "peekOfCode": "supx = X_scaled[50:]\nshuffle(supx, supy)\nX_train, X_test, Y_train, Y_test = train_test_split(\n    X_scaled, Y, test_size=0.5, random_state=2)\nn_features = X.shape[1]\nn_classes = Y.shape[1]\nY_train = Y_train[:, 0].reshape(-1, 1)\nY_test = Y_test[:, 0].reshape(-1, 1)\ninit_algorithm = 'uniform'\nmodel = SequentialModel(",
        "detail": "examples.iris_example2",
        "documentation": {}
    },
    {
        "label": "n_features",
        "kind": 5,
        "importPath": "examples.iris_example2",
        "description": "examples.iris_example2",
        "peekOfCode": "n_features = X.shape[1]\nn_classes = Y.shape[1]\nY_train = Y_train[:, 0].reshape(-1, 1)\nY_test = Y_test[:, 0].reshape(-1, 1)\ninit_algorithm = 'uniform'\nmodel = SequentialModel(\n    layers=[\n        Dense(ninputs=4, noutputs=3, init_algorithm=init_algorithm),\n        # BatchDenseNormalization(units=3),\n        ReLU(units=3),",
        "detail": "examples.iris_example2",
        "documentation": {}
    },
    {
        "label": "n_classes",
        "kind": 5,
        "importPath": "examples.iris_example2",
        "description": "examples.iris_example2",
        "peekOfCode": "n_classes = Y.shape[1]\nY_train = Y_train[:, 0].reshape(-1, 1)\nY_test = Y_test[:, 0].reshape(-1, 1)\ninit_algorithm = 'uniform'\nmodel = SequentialModel(\n    layers=[\n        Dense(ninputs=4, noutputs=3, init_algorithm=init_algorithm),\n        # BatchDenseNormalization(units=3),\n        ReLU(units=3),\n        Dense(ninputs=3, noutputs=1, init_algorithm=init_algorithm),",
        "detail": "examples.iris_example2",
        "documentation": {}
    },
    {
        "label": "Y_train",
        "kind": 5,
        "importPath": "examples.iris_example2",
        "description": "examples.iris_example2",
        "peekOfCode": "Y_train = Y_train[:, 0].reshape(-1, 1)\nY_test = Y_test[:, 0].reshape(-1, 1)\ninit_algorithm = 'uniform'\nmodel = SequentialModel(\n    layers=[\n        Dense(ninputs=4, noutputs=3, init_algorithm=init_algorithm),\n        # BatchDenseNormalization(units=3),\n        ReLU(units=3),\n        Dense(ninputs=3, noutputs=1, init_algorithm=init_algorithm),\n        # BatchDenseNormalization(units=8),",
        "detail": "examples.iris_example2",
        "documentation": {}
    },
    {
        "label": "Y_test",
        "kind": 5,
        "importPath": "examples.iris_example2",
        "description": "examples.iris_example2",
        "peekOfCode": "Y_test = Y_test[:, 0].reshape(-1, 1)\ninit_algorithm = 'uniform'\nmodel = SequentialModel(\n    layers=[\n        Dense(ninputs=4, noutputs=3, init_algorithm=init_algorithm),\n        # BatchDenseNormalization(units=3),\n        ReLU(units=3),\n        Dense(ninputs=3, noutputs=1, init_algorithm=init_algorithm),\n        # BatchDenseNormalization(units=8),\n        # ReLU(units=8),",
        "detail": "examples.iris_example2",
        "documentation": {}
    },
    {
        "label": "init_algorithm",
        "kind": 5,
        "importPath": "examples.iris_example2",
        "description": "examples.iris_example2",
        "peekOfCode": "init_algorithm = 'uniform'\nmodel = SequentialModel(\n    layers=[\n        Dense(ninputs=4, noutputs=3, init_algorithm=init_algorithm),\n        # BatchDenseNormalization(units=3),\n        ReLU(units=3),\n        Dense(ninputs=3, noutputs=1, init_algorithm=init_algorithm),\n        # BatchDenseNormalization(units=8),\n        # ReLU(units=8),\n        # Dense(ninputs=8, noutputs=1, init_algorithm=init_algorithm),",
        "detail": "examples.iris_example2",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "examples.iris_example2",
        "description": "examples.iris_example2",
        "peekOfCode": "model = SequentialModel(\n    layers=[\n        Dense(ninputs=4, noutputs=3, init_algorithm=init_algorithm),\n        # BatchDenseNormalization(units=3),\n        ReLU(units=3),\n        Dense(ninputs=3, noutputs=1, init_algorithm=init_algorithm),\n        # BatchDenseNormalization(units=8),\n        # ReLU(units=8),\n        # Dense(ninputs=8, noutputs=1, init_algorithm=init_algorithm),\n        # BatchDenseNormalization(units=3),",
        "detail": "examples.iris_example2",
        "documentation": {}
    },
    {
        "label": "iris",
        "kind": 5,
        "importPath": "examples.iris_flower_example",
        "description": "examples.iris_flower_example",
        "peekOfCode": "iris = load_iris()\nX = iris['data']\ny = iris['target']\nnames = iris['target_names']\nfeature_names = iris['feature_names']\n# One hot encoding\nenc = OneHotEncoder()\nY = enc.fit_transform(y[:, np.newaxis]).toarray()\n# Scale data to have mean 0 and variance 1 \n# which is importance for convergence of the neural network",
        "detail": "examples.iris_flower_example",
        "documentation": {}
    },
    {
        "label": "X",
        "kind": 5,
        "importPath": "examples.iris_flower_example",
        "description": "examples.iris_flower_example",
        "peekOfCode": "X = iris['data']\ny = iris['target']\nnames = iris['target_names']\nfeature_names = iris['feature_names']\n# One hot encoding\nenc = OneHotEncoder()\nY = enc.fit_transform(y[:, np.newaxis]).toarray()\n# Scale data to have mean 0 and variance 1 \n# which is importance for convergence of the neural network\nscaler = StandardScaler()",
        "detail": "examples.iris_flower_example",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "examples.iris_flower_example",
        "description": "examples.iris_flower_example",
        "peekOfCode": "y = iris['target']\nnames = iris['target_names']\nfeature_names = iris['feature_names']\n# One hot encoding\nenc = OneHotEncoder()\nY = enc.fit_transform(y[:, np.newaxis]).toarray()\n# Scale data to have mean 0 and variance 1 \n# which is importance for convergence of the neural network\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X)",
        "detail": "examples.iris_flower_example",
        "documentation": {}
    },
    {
        "label": "names",
        "kind": 5,
        "importPath": "examples.iris_flower_example",
        "description": "examples.iris_flower_example",
        "peekOfCode": "names = iris['target_names']\nfeature_names = iris['feature_names']\n# One hot encoding\nenc = OneHotEncoder()\nY = enc.fit_transform(y[:, np.newaxis]).toarray()\n# Scale data to have mean 0 and variance 1 \n# which is importance for convergence of the neural network\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X)\nprint(X[0:10])",
        "detail": "examples.iris_flower_example",
        "documentation": {}
    },
    {
        "label": "feature_names",
        "kind": 5,
        "importPath": "examples.iris_flower_example",
        "description": "examples.iris_flower_example",
        "peekOfCode": "feature_names = iris['feature_names']\n# One hot encoding\nenc = OneHotEncoder()\nY = enc.fit_transform(y[:, np.newaxis]).toarray()\n# Scale data to have mean 0 and variance 1 \n# which is importance for convergence of the neural network\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X)\nprint(X[0:10])\nprint(X_scaled[0:10])",
        "detail": "examples.iris_flower_example",
        "documentation": {}
    },
    {
        "label": "enc",
        "kind": 5,
        "importPath": "examples.iris_flower_example",
        "description": "examples.iris_flower_example",
        "peekOfCode": "enc = OneHotEncoder()\nY = enc.fit_transform(y[:, np.newaxis]).toarray()\n# Scale data to have mean 0 and variance 1 \n# which is importance for convergence of the neural network\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X)\nprint(X[0:10])\nprint(X_scaled[0:10])\n# Split the data set into training and testing\nX_train, X_test, Y_train, Y_test = train_test_split(",
        "detail": "examples.iris_flower_example",
        "documentation": {}
    },
    {
        "label": "Y",
        "kind": 5,
        "importPath": "examples.iris_flower_example",
        "description": "examples.iris_flower_example",
        "peekOfCode": "Y = enc.fit_transform(y[:, np.newaxis]).toarray()\n# Scale data to have mean 0 and variance 1 \n# which is importance for convergence of the neural network\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X)\nprint(X[0:10])\nprint(X_scaled[0:10])\n# Split the data set into training and testing\nX_train, X_test, Y_train, Y_test = train_test_split(\n    X_scaled, Y, test_size=0.5, random_state=2)",
        "detail": "examples.iris_flower_example",
        "documentation": {}
    },
    {
        "label": "scaler",
        "kind": 5,
        "importPath": "examples.iris_flower_example",
        "description": "examples.iris_flower_example",
        "peekOfCode": "scaler = StandardScaler()\nX_scaled = scaler.fit_transform(X)\nprint(X[0:10])\nprint(X_scaled[0:10])\n# Split the data set into training and testing\nX_train, X_test, Y_train, Y_test = train_test_split(\n    X_scaled, Y, test_size=0.5, random_state=2)\nn_features = X.shape[1]\nn_classes = Y.shape[1]\n# print(Y_train)",
        "detail": "examples.iris_flower_example",
        "documentation": {}
    },
    {
        "label": "X_scaled",
        "kind": 5,
        "importPath": "examples.iris_flower_example",
        "description": "examples.iris_flower_example",
        "peekOfCode": "X_scaled = scaler.fit_transform(X)\nprint(X[0:10])\nprint(X_scaled[0:10])\n# Split the data set into training and testing\nX_train, X_test, Y_train, Y_test = train_test_split(\n    X_scaled, Y, test_size=0.5, random_state=2)\nn_features = X.shape[1]\nn_classes = Y.shape[1]\n# print(Y_train)\ninit_algorithm = 'uniform'",
        "detail": "examples.iris_flower_example",
        "documentation": {}
    },
    {
        "label": "n_features",
        "kind": 5,
        "importPath": "examples.iris_flower_example",
        "description": "examples.iris_flower_example",
        "peekOfCode": "n_features = X.shape[1]\nn_classes = Y.shape[1]\n# print(Y_train)\ninit_algorithm = 'uniform'\nmodel = SequentialModel(\n    layers=[\n        Dense(ninputs=4, noutputs=3, init_algorithm=init_algorithm),\n        BatchDenseNormalization(units=3),\n        ReLU(units=3),\n        Dense(ninputs=3, noutputs=8, init_algorithm=init_algorithm),",
        "detail": "examples.iris_flower_example",
        "documentation": {}
    },
    {
        "label": "n_classes",
        "kind": 5,
        "importPath": "examples.iris_flower_example",
        "description": "examples.iris_flower_example",
        "peekOfCode": "n_classes = Y.shape[1]\n# print(Y_train)\ninit_algorithm = 'uniform'\nmodel = SequentialModel(\n    layers=[\n        Dense(ninputs=4, noutputs=3, init_algorithm=init_algorithm),\n        BatchDenseNormalization(units=3),\n        ReLU(units=3),\n        Dense(ninputs=3, noutputs=8, init_algorithm=init_algorithm),\n        BatchDenseNormalization(units=8),",
        "detail": "examples.iris_flower_example",
        "documentation": {}
    },
    {
        "label": "init_algorithm",
        "kind": 5,
        "importPath": "examples.iris_flower_example",
        "description": "examples.iris_flower_example",
        "peekOfCode": "init_algorithm = 'uniform'\nmodel = SequentialModel(\n    layers=[\n        Dense(ninputs=4, noutputs=3, init_algorithm=init_algorithm),\n        BatchDenseNormalization(units=3),\n        ReLU(units=3),\n        Dense(ninputs=3, noutputs=8, init_algorithm=init_algorithm),\n        BatchDenseNormalization(units=8),\n        ReLU(units=8),\n        Dense(ninputs=8, noutputs=3, init_algorithm=init_algorithm),",
        "detail": "examples.iris_flower_example",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "examples.iris_flower_example",
        "description": "examples.iris_flower_example",
        "peekOfCode": "model = SequentialModel(\n    layers=[\n        Dense(ninputs=4, noutputs=3, init_algorithm=init_algorithm),\n        BatchDenseNormalization(units=3),\n        ReLU(units=3),\n        Dense(ninputs=3, noutputs=8, init_algorithm=init_algorithm),\n        BatchDenseNormalization(units=8),\n        ReLU(units=8),\n        Dense(ninputs=8, noutputs=3, init_algorithm=init_algorithm),\n        # BatchDenseNormalization(units=3),",
        "detail": "examples.iris_flower_example",
        "documentation": {}
    },
    {
        "label": "input_size",
        "kind": 5,
        "importPath": "examples.minist_number_five_recongnizition",
        "description": "examples.minist_number_five_recongnizition",
        "peekOfCode": "input_size = 28 * 28\ntrain_size = len(x_train)\ntest_size = len(x_test)\nnum_classes = 10\n''''\n    reshape x_train, x_test from 28x28 matrix to 784-element vector\n    work on data, get y_train, y_test to be one-hot encoded\n    normalize to range 0, 1\n'''\nx_train = np.reshape(x_train, (train_size, input_size))",
        "detail": "examples.minist_number_five_recongnizition",
        "documentation": {}
    },
    {
        "label": "train_size",
        "kind": 5,
        "importPath": "examples.minist_number_five_recongnizition",
        "description": "examples.minist_number_five_recongnizition",
        "peekOfCode": "train_size = len(x_train)\ntest_size = len(x_test)\nnum_classes = 10\n''''\n    reshape x_train, x_test from 28x28 matrix to 784-element vector\n    work on data, get y_train, y_test to be one-hot encoded\n    normalize to range 0, 1\n'''\nx_train = np.reshape(x_train, (train_size, input_size))\nx_test = np.reshape(x_test, (test_size, input_size))",
        "detail": "examples.minist_number_five_recongnizition",
        "documentation": {}
    },
    {
        "label": "test_size",
        "kind": 5,
        "importPath": "examples.minist_number_five_recongnizition",
        "description": "examples.minist_number_five_recongnizition",
        "peekOfCode": "test_size = len(x_test)\nnum_classes = 10\n''''\n    reshape x_train, x_test from 28x28 matrix to 784-element vector\n    work on data, get y_train, y_test to be one-hot encoded\n    normalize to range 0, 1\n'''\nx_train = np.reshape(x_train, (train_size, input_size))\nx_test = np.reshape(x_test, (test_size, input_size))\nx_train = x_train / 255.0",
        "detail": "examples.minist_number_five_recongnizition",
        "documentation": {}
    },
    {
        "label": "num_classes",
        "kind": 5,
        "importPath": "examples.minist_number_five_recongnizition",
        "description": "examples.minist_number_five_recongnizition",
        "peekOfCode": "num_classes = 10\n''''\n    reshape x_train, x_test from 28x28 matrix to 784-element vector\n    work on data, get y_train, y_test to be one-hot encoded\n    normalize to range 0, 1\n'''\nx_train = np.reshape(x_train, (train_size, input_size))\nx_test = np.reshape(x_test, (test_size, input_size))\nx_train = x_train / 255.0\nx_test = x_test / 255.0",
        "detail": "examples.minist_number_five_recongnizition",
        "documentation": {}
    },
    {
        "label": "x_train",
        "kind": 5,
        "importPath": "examples.minist_number_five_recongnizition",
        "description": "examples.minist_number_five_recongnizition",
        "peekOfCode": "x_train = np.reshape(x_train, (train_size, input_size))\nx_test = np.reshape(x_test, (test_size, input_size))\nx_train = x_train / 255.0\nx_test = x_test / 255.0\ny_train = tf.keras.utils.to_categorical(y_train, num_classes=num_classes)\ny_test = tf.keras.utils.to_categorical(y_test, num_classes=num_classes)\ninit_algorithm = 'random'\nmodel = SequentialModel(layers=[\n    Dense(ninputs=784, noutputs=256, init_algorithm=init_algorithm),\n    BatchDenseNormalization(units=256),",
        "detail": "examples.minist_number_five_recongnizition",
        "documentation": {}
    },
    {
        "label": "x_test",
        "kind": 5,
        "importPath": "examples.minist_number_five_recongnizition",
        "description": "examples.minist_number_five_recongnizition",
        "peekOfCode": "x_test = np.reshape(x_test, (test_size, input_size))\nx_train = x_train / 255.0\nx_test = x_test / 255.0\ny_train = tf.keras.utils.to_categorical(y_train, num_classes=num_classes)\ny_test = tf.keras.utils.to_categorical(y_test, num_classes=num_classes)\ninit_algorithm = 'random'\nmodel = SequentialModel(layers=[\n    Dense(ninputs=784, noutputs=256, init_algorithm=init_algorithm),\n    BatchDenseNormalization(units=256),\n    ReLU(units=256),",
        "detail": "examples.minist_number_five_recongnizition",
        "documentation": {}
    },
    {
        "label": "x_train",
        "kind": 5,
        "importPath": "examples.minist_number_five_recongnizition",
        "description": "examples.minist_number_five_recongnizition",
        "peekOfCode": "x_train = x_train / 255.0\nx_test = x_test / 255.0\ny_train = tf.keras.utils.to_categorical(y_train, num_classes=num_classes)\ny_test = tf.keras.utils.to_categorical(y_test, num_classes=num_classes)\ninit_algorithm = 'random'\nmodel = SequentialModel(layers=[\n    Dense(ninputs=784, noutputs=256, init_algorithm=init_algorithm),\n    BatchDenseNormalization(units=256),\n    ReLU(units=256),\n    Dense(ninputs=256, noutputs=128, init_algorithm=init_algorithm),",
        "detail": "examples.minist_number_five_recongnizition",
        "documentation": {}
    },
    {
        "label": "x_test",
        "kind": 5,
        "importPath": "examples.minist_number_five_recongnizition",
        "description": "examples.minist_number_five_recongnizition",
        "peekOfCode": "x_test = x_test / 255.0\ny_train = tf.keras.utils.to_categorical(y_train, num_classes=num_classes)\ny_test = tf.keras.utils.to_categorical(y_test, num_classes=num_classes)\ninit_algorithm = 'random'\nmodel = SequentialModel(layers=[\n    Dense(ninputs=784, noutputs=256, init_algorithm=init_algorithm),\n    BatchDenseNormalization(units=256),\n    ReLU(units=256),\n    Dense(ninputs=256, noutputs=128, init_algorithm=init_algorithm),\n    BatchDenseNormalization(units=128),",
        "detail": "examples.minist_number_five_recongnizition",
        "documentation": {}
    },
    {
        "label": "y_train",
        "kind": 5,
        "importPath": "examples.minist_number_five_recongnizition",
        "description": "examples.minist_number_five_recongnizition",
        "peekOfCode": "y_train = tf.keras.utils.to_categorical(y_train, num_classes=num_classes)\ny_test = tf.keras.utils.to_categorical(y_test, num_classes=num_classes)\ninit_algorithm = 'random'\nmodel = SequentialModel(layers=[\n    Dense(ninputs=784, noutputs=256, init_algorithm=init_algorithm),\n    BatchDenseNormalization(units=256),\n    ReLU(units=256),\n    Dense(ninputs=256, noutputs=128, init_algorithm=init_algorithm),\n    BatchDenseNormalization(units=128),\n    ReLU(units=128),",
        "detail": "examples.minist_number_five_recongnizition",
        "documentation": {}
    },
    {
        "label": "y_test",
        "kind": 5,
        "importPath": "examples.minist_number_five_recongnizition",
        "description": "examples.minist_number_five_recongnizition",
        "peekOfCode": "y_test = tf.keras.utils.to_categorical(y_test, num_classes=num_classes)\ninit_algorithm = 'random'\nmodel = SequentialModel(layers=[\n    Dense(ninputs=784, noutputs=256, init_algorithm=init_algorithm),\n    BatchDenseNormalization(units=256),\n    ReLU(units=256),\n    Dense(ninputs=256, noutputs=128, init_algorithm=init_algorithm),\n    BatchDenseNormalization(units=128),\n    ReLU(units=128),\n    Dense(ninputs=128, noutputs=10, init_algorithm=init_algorithm),",
        "detail": "examples.minist_number_five_recongnizition",
        "documentation": {}
    },
    {
        "label": "init_algorithm",
        "kind": 5,
        "importPath": "examples.minist_number_five_recongnizition",
        "description": "examples.minist_number_five_recongnizition",
        "peekOfCode": "init_algorithm = 'random'\nmodel = SequentialModel(layers=[\n    Dense(ninputs=784, noutputs=256, init_algorithm=init_algorithm),\n    BatchDenseNormalization(units=256),\n    ReLU(units=256),\n    Dense(ninputs=256, noutputs=128, init_algorithm=init_algorithm),\n    BatchDenseNormalization(units=128),\n    ReLU(units=128),\n    Dense(ninputs=128, noutputs=10, init_algorithm=init_algorithm),\n    BatchDenseNormalization(units=10),",
        "detail": "examples.minist_number_five_recongnizition",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "examples.minist_number_five_recongnizition",
        "description": "examples.minist_number_five_recongnizition",
        "peekOfCode": "model = SequentialModel(layers=[\n    Dense(ninputs=784, noutputs=256, init_algorithm=init_algorithm),\n    BatchDenseNormalization(units=256),\n    ReLU(units=256),\n    Dense(ninputs=256, noutputs=128, init_algorithm=init_algorithm),\n    BatchDenseNormalization(units=128),\n    ReLU(units=128),\n    Dense(ninputs=128, noutputs=10, init_algorithm=init_algorithm),\n    BatchDenseNormalization(units=10),\n    Softmax(units=10),",
        "detail": "examples.minist_number_five_recongnizition",
        "documentation": {}
    },
    {
        "label": "small_test_x",
        "kind": 5,
        "importPath": "examples.minist_number_five_recongnizition",
        "description": "examples.minist_number_five_recongnizition",
        "peekOfCode": "small_test_x = x_test[0:9,:]\nsmall_test_y = y_test[0:9,:]\nprint(model.predict(small_test_x).shape)\npredictions = np.argmax(model.predict(small_test_x), axis=1)\ncorrect_classes = np.argmax(small_test_y, axis=1)\nprint(predictions)\nprint(correct_classes)\nfig, ax = plt.subplots(3, 3)\nfig.suptitle('Before training')\nfor image, i in zip(small_test_x, range(len(small_test_x))) :",
        "detail": "examples.minist_number_five_recongnizition",
        "documentation": {}
    },
    {
        "label": "small_test_y",
        "kind": 5,
        "importPath": "examples.minist_number_five_recongnizition",
        "description": "examples.minist_number_five_recongnizition",
        "peekOfCode": "small_test_y = y_test[0:9,:]\nprint(model.predict(small_test_x).shape)\npredictions = np.argmax(model.predict(small_test_x), axis=1)\ncorrect_classes = np.argmax(small_test_y, axis=1)\nprint(predictions)\nprint(correct_classes)\nfig, ax = plt.subplots(3, 3)\nfig.suptitle('Before training')\nfor image, i in zip(small_test_x, range(len(small_test_x))) :\n    ax[i // 3, i % 3].imshow(image.reshape(28, 28), cmap='gray')",
        "detail": "examples.minist_number_five_recongnizition",
        "documentation": {}
    },
    {
        "label": "predictions",
        "kind": 5,
        "importPath": "examples.minist_number_five_recongnizition",
        "description": "examples.minist_number_five_recongnizition",
        "peekOfCode": "predictions = np.argmax(model.predict(small_test_x), axis=1)\ncorrect_classes = np.argmax(small_test_y, axis=1)\nprint(predictions)\nprint(correct_classes)\nfig, ax = plt.subplots(3, 3)\nfig.suptitle('Before training')\nfor image, i in zip(small_test_x, range(len(small_test_x))) :\n    ax[i // 3, i % 3].imshow(image.reshape(28, 28), cmap='gray')\n    ax[i // 3, i % 3].set_title('Predicted: {}. Correct: {}'.format(predictions[i], correct_classes[i]))\nprint(predictions)",
        "detail": "examples.minist_number_five_recongnizition",
        "documentation": {}
    },
    {
        "label": "correct_classes",
        "kind": 5,
        "importPath": "examples.minist_number_five_recongnizition",
        "description": "examples.minist_number_five_recongnizition",
        "peekOfCode": "correct_classes = np.argmax(small_test_y, axis=1)\nprint(predictions)\nprint(correct_classes)\nfig, ax = plt.subplots(3, 3)\nfig.suptitle('Before training')\nfor image, i in zip(small_test_x, range(len(small_test_x))) :\n    ax[i // 3, i % 3].imshow(image.reshape(28, 28), cmap='gray')\n    ax[i // 3, i % 3].set_title('Predicted: {}. Correct: {}'.format(predictions[i], correct_classes[i]))\nprint(predictions)\nprint(correct_classes)",
        "detail": "examples.minist_number_five_recongnizition",
        "documentation": {}
    },
    {
        "label": "predictions",
        "kind": 5,
        "importPath": "examples.minist_number_five_recongnizition",
        "description": "examples.minist_number_five_recongnizition",
        "peekOfCode": "predictions = np.argmax(model.predict(small_test_x), axis=1)\ncorrect_classes = np.argmax(small_test_y, axis=1)\nfig, ax = plt.subplots(3, 3)\nfig.suptitle('After training')\nfor image, i in zip(small_test_x, range(len(small_test_x))) :\n    ax[i // 3, i % 3].imshow(image.reshape(28, 28), cmap='gray')\n    ax[i // 3, i % 3].set_title('Predicted: {}. Correct: {}'.format(predictions[i], correct_classes[i]))\nprint(predictions)\nprint(correct_classes)\nplt.show()",
        "detail": "examples.minist_number_five_recongnizition",
        "documentation": {}
    },
    {
        "label": "correct_classes",
        "kind": 5,
        "importPath": "examples.minist_number_five_recongnizition",
        "description": "examples.minist_number_five_recongnizition",
        "peekOfCode": "correct_classes = np.argmax(small_test_y, axis=1)\nfig, ax = plt.subplots(3, 3)\nfig.suptitle('After training')\nfor image, i in zip(small_test_x, range(len(small_test_x))) :\n    ax[i // 3, i % 3].imshow(image.reshape(28, 28), cmap='gray')\n    ax[i // 3, i % 3].set_title('Predicted: {}. Correct: {}'.format(predictions[i], correct_classes[i]))\nprint(predictions)\nprint(correct_classes)\nplt.show()",
        "detail": "examples.minist_number_five_recongnizition",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "examples.polynomial_example",
        "description": "examples.polynomial_example",
        "peekOfCode": "def f(x):\n    return np.power(x, 7) - np.power(x, 4)  + np.power(x, 3) - 2.5*np.power(x, 2) + 1.5 + 2*np.power(np.random.random(size=(len(x), 1)), 2)\ndef plot(x1, y1, x2, y2):\n    plt.title(\"Line graph\")\n    plt.xlabel(\"X axis\")\n    plt.ylabel(\"Y axis\")\n    plt.plot(x1, y1, 'b', x2, y2, 'r')\n    plt.show()\ndataset = np.arange(-1, 1.5, 0.2)\nsamples = dataset.shape[0]",
        "detail": "examples.polynomial_example",
        "documentation": {}
    },
    {
        "label": "plot",
        "kind": 2,
        "importPath": "examples.polynomial_example",
        "description": "examples.polynomial_example",
        "peekOfCode": "def plot(x1, y1, x2, y2):\n    plt.title(\"Line graph\")\n    plt.xlabel(\"X axis\")\n    plt.ylabel(\"Y axis\")\n    plt.plot(x1, y1, 'b', x2, y2, 'r')\n    plt.show()\ndataset = np.arange(-1, 1.5, 0.2)\nsamples = dataset.shape[0]\ndataset = dataset.reshape(samples, 1)\ntargets = f(dataset).reshape(samples, 1)",
        "detail": "examples.polynomial_example",
        "documentation": {}
    },
    {
        "label": "dataset",
        "kind": 5,
        "importPath": "examples.polynomial_example",
        "description": "examples.polynomial_example",
        "peekOfCode": "dataset = np.arange(-1, 1.5, 0.2)\nsamples = dataset.shape[0]\ndataset = dataset.reshape(samples, 1)\ntargets = f(dataset).reshape(samples, 1)\nprint(len(dataset))\nmodel = SequentialModel(layers=[\n    DenseRegularizedDecorator(ninputs=1, noutputs=20, activation=Sigmoid(units=20), weight_reg=0.00, bias_reg=0.00),\n    DenseRegularizedDecorator(ninputs=20, noutputs=15, activation=Sigmoid(units=15), weight_reg=0.00, bias_reg=0.00),\n    Dense(ninputs=15, noutputs=5, activation=Sigmoid(units=5)),\n    Dense(ninputs=5, noutputs=1),",
        "detail": "examples.polynomial_example",
        "documentation": {}
    },
    {
        "label": "samples",
        "kind": 5,
        "importPath": "examples.polynomial_example",
        "description": "examples.polynomial_example",
        "peekOfCode": "samples = dataset.shape[0]\ndataset = dataset.reshape(samples, 1)\ntargets = f(dataset).reshape(samples, 1)\nprint(len(dataset))\nmodel = SequentialModel(layers=[\n    DenseRegularizedDecorator(ninputs=1, noutputs=20, activation=Sigmoid(units=20), weight_reg=0.00, bias_reg=0.00),\n    DenseRegularizedDecorator(ninputs=20, noutputs=15, activation=Sigmoid(units=15), weight_reg=0.00, bias_reg=0.00),\n    Dense(ninputs=15, noutputs=5, activation=Sigmoid(units=5)),\n    Dense(ninputs=5, noutputs=1),\n    MeanSquareError(units=1),",
        "detail": "examples.polynomial_example",
        "documentation": {}
    },
    {
        "label": "dataset",
        "kind": 5,
        "importPath": "examples.polynomial_example",
        "description": "examples.polynomial_example",
        "peekOfCode": "dataset = dataset.reshape(samples, 1)\ntargets = f(dataset).reshape(samples, 1)\nprint(len(dataset))\nmodel = SequentialModel(layers=[\n    DenseRegularizedDecorator(ninputs=1, noutputs=20, activation=Sigmoid(units=20), weight_reg=0.00, bias_reg=0.00),\n    DenseRegularizedDecorator(ninputs=20, noutputs=15, activation=Sigmoid(units=15), weight_reg=0.00, bias_reg=0.00),\n    Dense(ninputs=15, noutputs=5, activation=Sigmoid(units=5)),\n    Dense(ninputs=5, noutputs=1),\n    MeanSquareError(units=1),\n], optimizer= StochasticGradientDescent(learning_rate=0.01),",
        "detail": "examples.polynomial_example",
        "documentation": {}
    },
    {
        "label": "targets",
        "kind": 5,
        "importPath": "examples.polynomial_example",
        "description": "examples.polynomial_example",
        "peekOfCode": "targets = f(dataset).reshape(samples, 1)\nprint(len(dataset))\nmodel = SequentialModel(layers=[\n    DenseRegularizedDecorator(ninputs=1, noutputs=20, activation=Sigmoid(units=20), weight_reg=0.00, bias_reg=0.00),\n    DenseRegularizedDecorator(ninputs=20, noutputs=15, activation=Sigmoid(units=15), weight_reg=0.00, bias_reg=0.00),\n    Dense(ninputs=15, noutputs=5, activation=Sigmoid(units=5)),\n    Dense(ninputs=5, noutputs=1),\n    MeanSquareError(units=1),\n], optimizer= StochasticGradientDescent(learning_rate=0.01),\n    metrics=[CategoricalAccuracy(),])",
        "detail": "examples.polynomial_example",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "examples.polynomial_example",
        "description": "examples.polynomial_example",
        "peekOfCode": "model = SequentialModel(layers=[\n    DenseRegularizedDecorator(ninputs=1, noutputs=20, activation=Sigmoid(units=20), weight_reg=0.00, bias_reg=0.00),\n    DenseRegularizedDecorator(ninputs=20, noutputs=15, activation=Sigmoid(units=15), weight_reg=0.00, bias_reg=0.00),\n    Dense(ninputs=15, noutputs=5, activation=Sigmoid(units=5)),\n    Dense(ninputs=5, noutputs=1),\n    MeanSquareError(units=1),\n], optimizer= StochasticGradientDescent(learning_rate=0.01),\n    metrics=[CategoricalAccuracy(),])\nmodel.fit(dataset, targets, epochs=50000, batch_size=100)\nplot(dataset, targets, dataset, model.predict(dataset))",
        "detail": "examples.polynomial_example",
        "documentation": {}
    },
    {
        "label": "epochs",
        "kind": 5,
        "importPath": "examples.sine_example_adagrad",
        "description": "examples.sine_example_adagrad",
        "peekOfCode": "epochs = 10000\ninit_algorithm = 'random'\nmodel = SequentialModel(\n    layers=[\n        Dense(ninputs=1, noutputs=8, init_algorithm=init_algorithm),\n        BatchDenseNormalization(8),\n        ReLU(units=8),\n        Dense(ninputs=8, noutputs=5, init_algorithm=init_algorithm),\n        # BatchDenseNormalization(10),\n        ReLU(units=5),",
        "detail": "examples.sine_example_adagrad",
        "documentation": {}
    },
    {
        "label": "init_algorithm",
        "kind": 5,
        "importPath": "examples.sine_example_adagrad",
        "description": "examples.sine_example_adagrad",
        "peekOfCode": "init_algorithm = 'random'\nmodel = SequentialModel(\n    layers=[\n        Dense(ninputs=1, noutputs=8, init_algorithm=init_algorithm),\n        BatchDenseNormalization(8),\n        ReLU(units=8),\n        Dense(ninputs=8, noutputs=5, init_algorithm=init_algorithm),\n        # BatchDenseNormalization(10),\n        ReLU(units=5),\n        Dense(ninputs=5, noutputs=1, init_algorithm=init_algorithm),",
        "detail": "examples.sine_example_adagrad",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "examples.sine_example_adagrad",
        "description": "examples.sine_example_adagrad",
        "peekOfCode": "model = SequentialModel(\n    layers=[\n        Dense(ninputs=1, noutputs=8, init_algorithm=init_algorithm),\n        BatchDenseNormalization(8),\n        ReLU(units=8),\n        Dense(ninputs=8, noutputs=5, init_algorithm=init_algorithm),\n        # BatchDenseNormalization(10),\n        ReLU(units=5),\n        Dense(ninputs=5, noutputs=1, init_algorithm=init_algorithm),\n    ],",
        "detail": "examples.sine_example_adagrad",
        "documentation": {}
    },
    {
        "label": "dataset",
        "kind": 5,
        "importPath": "examples.sine_example_adagrad",
        "description": "examples.sine_example_adagrad",
        "peekOfCode": "dataset = np.arange(0., 2*np.pi, 0.001)\nsamples = dataset.shape[0]\ntargets = (np.sin(dataset)).reshape(samples, 1)\ndataset = dataset.reshape(samples, 1)\nmodel.fit(dataset, targets, batch_size=len(dataset), epochs=10000)\ntargets_test = model.predict(dataset)\nplt.plot(dataset, targets, 'b', dataset, targets_test, 'r--')\nplt.show()",
        "detail": "examples.sine_example_adagrad",
        "documentation": {}
    },
    {
        "label": "samples",
        "kind": 5,
        "importPath": "examples.sine_example_adagrad",
        "description": "examples.sine_example_adagrad",
        "peekOfCode": "samples = dataset.shape[0]\ntargets = (np.sin(dataset)).reshape(samples, 1)\ndataset = dataset.reshape(samples, 1)\nmodel.fit(dataset, targets, batch_size=len(dataset), epochs=10000)\ntargets_test = model.predict(dataset)\nplt.plot(dataset, targets, 'b', dataset, targets_test, 'r--')\nplt.show()",
        "detail": "examples.sine_example_adagrad",
        "documentation": {}
    },
    {
        "label": "targets",
        "kind": 5,
        "importPath": "examples.sine_example_adagrad",
        "description": "examples.sine_example_adagrad",
        "peekOfCode": "targets = (np.sin(dataset)).reshape(samples, 1)\ndataset = dataset.reshape(samples, 1)\nmodel.fit(dataset, targets, batch_size=len(dataset), epochs=10000)\ntargets_test = model.predict(dataset)\nplt.plot(dataset, targets, 'b', dataset, targets_test, 'r--')\nplt.show()",
        "detail": "examples.sine_example_adagrad",
        "documentation": {}
    },
    {
        "label": "dataset",
        "kind": 5,
        "importPath": "examples.sine_example_adagrad",
        "description": "examples.sine_example_adagrad",
        "peekOfCode": "dataset = dataset.reshape(samples, 1)\nmodel.fit(dataset, targets, batch_size=len(dataset), epochs=10000)\ntargets_test = model.predict(dataset)\nplt.plot(dataset, targets, 'b', dataset, targets_test, 'r--')\nplt.show()",
        "detail": "examples.sine_example_adagrad",
        "documentation": {}
    },
    {
        "label": "targets_test",
        "kind": 5,
        "importPath": "examples.sine_example_adagrad",
        "description": "examples.sine_example_adagrad",
        "peekOfCode": "targets_test = model.predict(dataset)\nplt.plot(dataset, targets, 'b', dataset, targets_test, 'r--')\nplt.show()",
        "detail": "examples.sine_example_adagrad",
        "documentation": {}
    },
    {
        "label": "optimizer",
        "kind": 5,
        "importPath": "examples.test_model",
        "description": "examples.test_model",
        "peekOfCode": "optimizer = OptimizerCommon()",
        "detail": "examples.test_model",
        "documentation": {}
    },
    {
        "label": "generate_targets",
        "kind": 2,
        "importPath": "examples.xor_sigmoid_cross_entropy",
        "description": "examples.xor_sigmoid_cross_entropy",
        "peekOfCode": "def generate_targets(input):\n    if (input[0] < .5 and input[1] < .5):\n        return np.array([0.])\n    if (input[0] >= .5 and input[1] >= .5):\n        return np.array([0.])\n    return np.array([1.])\ntargets = np.apply_along_axis(generate_targets, axis=1, arr=dataset).reshape(samples, 1)\nprint(dataset)\nprint(targets)\nnon_zeros = np.count_nonzero(targets)",
        "detail": "examples.xor_sigmoid_cross_entropy",
        "documentation": {}
    },
    {
        "label": "samples",
        "kind": 5,
        "importPath": "examples.xor_sigmoid_cross_entropy",
        "description": "examples.xor_sigmoid_cross_entropy",
        "peekOfCode": "samples = 4\nrng = np.random.default_rng()\ndataset = rng.uniform(0., 1., (samples, 2))\n# dataset = np.array([\n#     [0., 0.],\n#     [0., 1.],\n#     [1., 0.],\n#     [1., 1.],\n# ])\ndef generate_targets(input):",
        "detail": "examples.xor_sigmoid_cross_entropy",
        "documentation": {}
    },
    {
        "label": "rng",
        "kind": 5,
        "importPath": "examples.xor_sigmoid_cross_entropy",
        "description": "examples.xor_sigmoid_cross_entropy",
        "peekOfCode": "rng = np.random.default_rng()\ndataset = rng.uniform(0., 1., (samples, 2))\n# dataset = np.array([\n#     [0., 0.],\n#     [0., 1.],\n#     [1., 0.],\n#     [1., 1.],\n# ])\ndef generate_targets(input):\n    if (input[0] < .5 and input[1] < .5):",
        "detail": "examples.xor_sigmoid_cross_entropy",
        "documentation": {}
    },
    {
        "label": "dataset",
        "kind": 5,
        "importPath": "examples.xor_sigmoid_cross_entropy",
        "description": "examples.xor_sigmoid_cross_entropy",
        "peekOfCode": "dataset = rng.uniform(0., 1., (samples, 2))\n# dataset = np.array([\n#     [0., 0.],\n#     [0., 1.],\n#     [1., 0.],\n#     [1., 1.],\n# ])\ndef generate_targets(input):\n    if (input[0] < .5 and input[1] < .5):\n        return np.array([0.])",
        "detail": "examples.xor_sigmoid_cross_entropy",
        "documentation": {}
    },
    {
        "label": "targets",
        "kind": 5,
        "importPath": "examples.xor_sigmoid_cross_entropy",
        "description": "examples.xor_sigmoid_cross_entropy",
        "peekOfCode": "targets = np.apply_along_axis(generate_targets, axis=1, arr=dataset).reshape(samples, 1)\nprint(dataset)\nprint(targets)\nnon_zeros = np.count_nonzero(targets)\nzeros = samples - non_zeros\nper_non_zeros = non_zeros / samples\nper_zeros = zeros / samples\nprint(f'zero per: {per_zeros} ones per: {per_non_zeros}')\n# the four different states of the XOR gate\ntraining_data = np.array([[0,0],[0,1],[1,0],[1,1]], \"float32\")",
        "detail": "examples.xor_sigmoid_cross_entropy",
        "documentation": {}
    },
    {
        "label": "non_zeros",
        "kind": 5,
        "importPath": "examples.xor_sigmoid_cross_entropy",
        "description": "examples.xor_sigmoid_cross_entropy",
        "peekOfCode": "non_zeros = np.count_nonzero(targets)\nzeros = samples - non_zeros\nper_non_zeros = non_zeros / samples\nper_zeros = zeros / samples\nprint(f'zero per: {per_zeros} ones per: {per_non_zeros}')\n# the four different states of the XOR gate\ntraining_data = np.array([[0,0],[0,1],[1,0],[1,1]], \"float32\")\n# the four expected results in the same order\ntarget_data = np.array([[0],[1],[1],[0]], \"float32\")\ndataset_test = np.array([",
        "detail": "examples.xor_sigmoid_cross_entropy",
        "documentation": {}
    },
    {
        "label": "zeros",
        "kind": 5,
        "importPath": "examples.xor_sigmoid_cross_entropy",
        "description": "examples.xor_sigmoid_cross_entropy",
        "peekOfCode": "zeros = samples - non_zeros\nper_non_zeros = non_zeros / samples\nper_zeros = zeros / samples\nprint(f'zero per: {per_zeros} ones per: {per_non_zeros}')\n# the four different states of the XOR gate\ntraining_data = np.array([[0,0],[0,1],[1,0],[1,1]], \"float32\")\n# the four expected results in the same order\ntarget_data = np.array([[0],[1],[1],[0]], \"float32\")\ndataset_test = np.array([\n    [0., 0.],",
        "detail": "examples.xor_sigmoid_cross_entropy",
        "documentation": {}
    },
    {
        "label": "per_non_zeros",
        "kind": 5,
        "importPath": "examples.xor_sigmoid_cross_entropy",
        "description": "examples.xor_sigmoid_cross_entropy",
        "peekOfCode": "per_non_zeros = non_zeros / samples\nper_zeros = zeros / samples\nprint(f'zero per: {per_zeros} ones per: {per_non_zeros}')\n# the four different states of the XOR gate\ntraining_data = np.array([[0,0],[0,1],[1,0],[1,1]], \"float32\")\n# the four expected results in the same order\ntarget_data = np.array([[0],[1],[1],[0]], \"float32\")\ndataset_test = np.array([\n    [0., 0.],\n    [0., 1.],",
        "detail": "examples.xor_sigmoid_cross_entropy",
        "documentation": {}
    },
    {
        "label": "per_zeros",
        "kind": 5,
        "importPath": "examples.xor_sigmoid_cross_entropy",
        "description": "examples.xor_sigmoid_cross_entropy",
        "peekOfCode": "per_zeros = zeros / samples\nprint(f'zero per: {per_zeros} ones per: {per_non_zeros}')\n# the four different states of the XOR gate\ntraining_data = np.array([[0,0],[0,1],[1,0],[1,1]], \"float32\")\n# the four expected results in the same order\ntarget_data = np.array([[0],[1],[1],[0]], \"float32\")\ndataset_test = np.array([\n    [0., 0.],\n    [0., 1.],\n    [1., 0.],",
        "detail": "examples.xor_sigmoid_cross_entropy",
        "documentation": {}
    },
    {
        "label": "training_data",
        "kind": 5,
        "importPath": "examples.xor_sigmoid_cross_entropy",
        "description": "examples.xor_sigmoid_cross_entropy",
        "peekOfCode": "training_data = np.array([[0,0],[0,1],[1,0],[1,1]], \"float32\")\n# the four expected results in the same order\ntarget_data = np.array([[0],[1],[1],[0]], \"float32\")\ndataset_test = np.array([\n    [0., 0.],\n    [0., 1.],\n    [1., 0.],\n    [1., 1.]\n])\ntargets_test = np.array([",
        "detail": "examples.xor_sigmoid_cross_entropy",
        "documentation": {}
    },
    {
        "label": "target_data",
        "kind": 5,
        "importPath": "examples.xor_sigmoid_cross_entropy",
        "description": "examples.xor_sigmoid_cross_entropy",
        "peekOfCode": "target_data = np.array([[0],[1],[1],[0]], \"float32\")\ndataset_test = np.array([\n    [0., 0.],\n    [0., 1.],\n    [1., 0.],\n    [1., 1.]\n])\ntargets_test = np.array([\n    [0.],\n    [1.],",
        "detail": "examples.xor_sigmoid_cross_entropy",
        "documentation": {}
    },
    {
        "label": "dataset_test",
        "kind": 5,
        "importPath": "examples.xor_sigmoid_cross_entropy",
        "description": "examples.xor_sigmoid_cross_entropy",
        "peekOfCode": "dataset_test = np.array([\n    [0., 0.],\n    [0., 1.],\n    [1., 0.],\n    [1., 1.]\n])\ntargets_test = np.array([\n    [0.],\n    [1.],\n    [1.],",
        "detail": "examples.xor_sigmoid_cross_entropy",
        "documentation": {}
    },
    {
        "label": "targets_test",
        "kind": 5,
        "importPath": "examples.xor_sigmoid_cross_entropy",
        "description": "examples.xor_sigmoid_cross_entropy",
        "peekOfCode": "targets_test = np.array([\n    [0.],\n    [1.],\n    [1.],\n    [0.]\n])\nmodel = SequentialModel(\n    layers=[\n        Dense(ninputs=2, noutputs=8, init_algorithm='uniform', activation='relu'),\n        Dense(ninputs=8, noutputs=1, init_algorithm='uniform'),",
        "detail": "examples.xor_sigmoid_cross_entropy",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "examples.xor_sigmoid_cross_entropy",
        "description": "examples.xor_sigmoid_cross_entropy",
        "peekOfCode": "model = SequentialModel(\n    layers=[\n        Dense(ninputs=2, noutputs=8, init_algorithm='uniform', activation='relu'),\n        Dense(ninputs=8, noutputs=1, init_algorithm='uniform'),\n        Sigmoid(1)\n    ],\n    optimizer=StochasticGradientDescent(learning_rate=0.01), loss='binary_cross_entropy'\n)\nmodel.fit(training_data, target_data, epochs=10)",
        "detail": "examples.xor_sigmoid_cross_entropy",
        "documentation": {}
    },
    {
        "label": "ApplicationState",
        "kind": 6,
        "importPath": "nn_visualizer.application_context.application_context",
        "description": "nn_visualizer.application_context.application_context",
        "peekOfCode": "class ApplicationState(Enum):\n    PLAYING_FULL_TRAINING = 0\n    NEXT_STEP_TRAINING = 1\n    IDLE_TRAINING = 2\n    EDITING = 3\nclass ApplicationContext():\n    def __init__(self, pipeline: Pipeline, update_layer_callback = None, add_layer_callback = None):\n        self.pipeline = pipeline\n        self.state = ApplicationState.EDITING\n        self.play_full_train_thread = None",
        "detail": "nn_visualizer.application_context.application_context",
        "documentation": {}
    },
    {
        "label": "ApplicationContext",
        "kind": 6,
        "importPath": "nn_visualizer.application_context.application_context",
        "description": "nn_visualizer.application_context.application_context",
        "peekOfCode": "class ApplicationContext():\n    def __init__(self, pipeline: Pipeline, update_layer_callback = None, add_layer_callback = None):\n        self.pipeline = pipeline\n        self.state = ApplicationState.EDITING\n        self.play_full_train_thread = None\n        self.selected_nodes: list[tuple[int, int]] = []\n        def update(editing_input: EditingInput):\n            self.update_layer_editing(0, editing_input)\n            self.update_layer_callback(0, editing_input)\n        self.editing_loss = EditingBinaryCrossEntropy(1)",
        "detail": "nn_visualizer.application_context.application_context",
        "documentation": {}
    },
    {
        "label": "EditingLayer",
        "kind": 6,
        "importPath": "nn_visualizer.application_context.editing_layers",
        "description": "nn_visualizer.application_context.editing_layers",
        "peekOfCode": "class EditingLayer():\n    def __init__(self, units: int):\n        pass\n    @abstractmethod\n    def add_unit(self):\n        pass\n    @abstractmethod\n    def remove_unit(self):\n        pass\n    @abstractmethod",
        "detail": "nn_visualizer.application_context.editing_layers",
        "documentation": {}
    },
    {
        "label": "EditingDense",
        "kind": 6,
        "importPath": "nn_visualizer.application_context.editing_layers",
        "description": "nn_visualizer.application_context.editing_layers",
        "peekOfCode": "class EditingDense(EditingLayer):\n    def __init__(self, units: int = 3, ninputs: int = 3, update_callback = None, name: str = 'Dense'):\n        EditingLayer.__init__(self, units)\n        self.units = units\n        self.ninputs = ninputs\n        self.params_init_algorithm = 'random'\n        self.activation_function = 'None'\n        self.update_callback = update_callback\n        self.name = name\n    def add_unit(self):",
        "detail": "nn_visualizer.application_context.editing_layers",
        "documentation": {}
    },
    {
        "label": "EditingDropout",
        "kind": 6,
        "importPath": "nn_visualizer.application_context.editing_layers",
        "description": "nn_visualizer.application_context.editing_layers",
        "peekOfCode": "class EditingDropout(EditingLayer):\n    def __init__(self, units: int = 3, dropout_rate = 0.2, update_callback = None, name: str = 'Dropout') -> None:\n        EditingLayer.__init__(self, units)\n        self.units = units\n        self.dropout_rate = dropout_rate\n        self.update_callback = update_callback\n        self.name = name\n    def add_unit(self):\n        self.units = self.units + 1\n    def remove_unit(self):",
        "detail": "nn_visualizer.application_context.editing_layers",
        "documentation": {}
    },
    {
        "label": "EditingBinaryCrossEntropy",
        "kind": 6,
        "importPath": "nn_visualizer.application_context.editing_layers",
        "description": "nn_visualizer.application_context.editing_layers",
        "peekOfCode": "class EditingBinaryCrossEntropy(EditingLayer):\n    def __init__(self, units: int = 3, update_callback = None, name: str = 'BinaryCrossEntropy') -> None:\n        EditingLayer.__init__(self, units)\n        self.units = units\n        self.update_callback = update_callback\n        self.name = name\n    def add_unit(self):\n        self.units = self.units + 1\n    def remove_unit(self):\n        if self.units > 1:",
        "detail": "nn_visualizer.application_context.editing_layers",
        "documentation": {}
    },
    {
        "label": "EditingMeanSquaredError",
        "kind": 6,
        "importPath": "nn_visualizer.application_context.editing_layers",
        "description": "nn_visualizer.application_context.editing_layers",
        "peekOfCode": "class EditingMeanSquaredError(EditingLayer):\n    def __init__(self, units: int = 3, update_callback = None, name: str = 'MeanSquaredError') -> None:\n        EditingLayer.__init__(self, units)\n        self.units = units\n        self.update_callback = update_callback\n        self.name = name\n    def add_unit(self):\n        self.units = self.units + 1\n    def remove_unit(self):\n        if self.units > 1:",
        "detail": "nn_visualizer.application_context.editing_layers",
        "documentation": {}
    },
    {
        "label": "EditingBatchNormalization",
        "kind": 6,
        "importPath": "nn_visualizer.application_context.editing_layers",
        "description": "nn_visualizer.application_context.editing_layers",
        "peekOfCode": "class EditingBatchNormalization(EditingLayer):\n    def __init__(self, units: int, update_callback, name: str = 'BatchNormalization'):\n        EditingLayer.__init__(self, units)\n        self.update_callback = update_callback\n        self.units = units\n        self.name = name\n    def add_unit(self):\n        self.units = self.units + 1\n    def remove_unit(self):\n        if self.units > 1:",
        "detail": "nn_visualizer.application_context.editing_layers",
        "documentation": {}
    },
    {
        "label": "EditingSigmoid",
        "kind": 6,
        "importPath": "nn_visualizer.application_context.editing_layers",
        "description": "nn_visualizer.application_context.editing_layers",
        "peekOfCode": "class EditingSigmoid(EditingLayer):\n    def __init__(self, units: int, update_callback, name: str = 'Sigmoid'):\n        self.units = units\n        self.name = name\n        self.update_callback = update_callback\n    def add_unit(self):\n        self.units = self.units + 1\n    def remove_unit(self):\n        if self.units > 1:\n            self.units = self.units - 1",
        "detail": "nn_visualizer.application_context.editing_layers",
        "documentation": {}
    },
    {
        "label": "EditingReLU",
        "kind": 6,
        "importPath": "nn_visualizer.application_context.editing_layers",
        "description": "nn_visualizer.application_context.editing_layers",
        "peekOfCode": "class EditingReLU(EditingLayer):\n    def __init__(self, units: int, update_callback, name: str = 'ReLU'):\n        self.units = units\n        self.name = name\n        self.update_callback = update_callback\n    def add_unit(self):\n        self.units = self.units + 1\n    def remove_unit(self):\n        if self.units > 1:\n            self.units = self.units - 1",
        "detail": "nn_visualizer.application_context.editing_layers",
        "documentation": {}
    },
    {
        "label": "EditingSoftmax",
        "kind": 6,
        "importPath": "nn_visualizer.application_context.editing_layers",
        "description": "nn_visualizer.application_context.editing_layers",
        "peekOfCode": "class EditingSoftmax(EditingLayer):\n    def __init__(self, units: int, update_callback, name: str = 'Softmax'):\n        self.units = units\n        self.name = name\n        self.update_callback = update_callback\n    def add_unit(self):\n        self.units = self.units + 1\n    def remove_unit(self):\n        if self.units > 1:\n            self.units = self.units - 1",
        "detail": "nn_visualizer.application_context.editing_layers",
        "documentation": {}
    },
    {
        "label": "EditingInput",
        "kind": 6,
        "importPath": "nn_visualizer.application_context.editing_layers",
        "description": "nn_visualizer.application_context.editing_layers",
        "peekOfCode": "class EditingInput(EditingLayer):\n    def __init__(self, units: int, update_callback, name: str = 'Input'):\n        EditingLayer.__init__(self, units)\n        self.update_callback = update_callback\n        self.units = units\n        self.name = name\n    def add_unit(self):\n        self.units = self.units + 1\n    def remove_unit(self):\n        if self.units > 1:",
        "detail": "nn_visualizer.application_context.editing_layers",
        "documentation": {}
    },
    {
        "label": "DefaultFileAdapter",
        "kind": 6,
        "importPath": "nn_visualizer.external.default_file_adapter",
        "description": "nn_visualizer.external.default_file_adapter",
        "peekOfCode": "class DefaultFileAdapter(File):\n    def __init__(self, path: str = None,  open_policy: File.OpenPolicy = File.OpenPolicy.write) -> None:\n        File.__init__(self)\n        self.path = path\n        self.policy = open_policy\n        self.content_str = None\n        self.adaptee = None\n    def open(self) -> int:\n        self.adaptee = open(self.path, 'r+')\n        self.content_str = self.adaptee.read()",
        "detail": "nn_visualizer.external.default_file_adapter",
        "documentation": {}
    },
    {
        "label": "Circle",
        "kind": 6,
        "importPath": "nn_visualizer.geometry.circle",
        "description": "nn_visualizer.geometry.circle",
        "peekOfCode": "class Circle():\n    def __init__(self, x: float = 0, y: float = 0, radius: float = 0):\n        self.x = x\n        self.y = y\n        self.radius = radius\n    def center(self):\n        return (self.x, self.y)",
        "detail": "nn_visualizer.geometry.circle",
        "documentation": {}
    },
    {
        "label": "zero_tolerance",
        "kind": 5,
        "importPath": "nn_visualizer.geometry.constants",
        "description": "nn_visualizer.geometry.constants",
        "peekOfCode": "zero_tolerance = 1e-07",
        "detail": "nn_visualizer.geometry.constants",
        "documentation": {}
    },
    {
        "label": "LineSegment",
        "kind": 6,
        "importPath": "nn_visualizer.geometry.line_segment",
        "description": "nn_visualizer.geometry.line_segment",
        "peekOfCode": "class LineSegment():\n    def __init__(self, a: Point, b: Point) -> None:\n        self.a = a\n        self.b = b\n    def length(self) -> float:\n        return math.sqrt(math.pow(self.a.x - self.b.x, 2) + math.pow(self.a.y - self.b.y, 2))\n    def unit_vector(self):\n        point_vector = self.b - self.a\n        return point_vector * (1.0 / self.length())\n    def to_QLine(self) -> QLine:",
        "detail": "nn_visualizer.geometry.line_segment",
        "documentation": {}
    },
    {
        "label": "Point",
        "kind": 6,
        "importPath": "nn_visualizer.geometry.point",
        "description": "nn_visualizer.geometry.point",
        "peekOfCode": "class Point:\n    def __init__(self, x, y) -> None:\n        self.x = x\n        self.y = y\n    def distance(self, other):\n        return math.sqrt(math.pow(self.x - other.x) + math.pow(self.y - other.y))\n    def __add__(self, other: Point) -> Point:\n        x = self.x + other.x\n        y = self.y + other.y\n        return Point(x, y)",
        "detail": "nn_visualizer.geometry.point",
        "documentation": {}
    },
    {
        "label": "Polygon",
        "kind": 6,
        "importPath": "nn_visualizer.geometry.polygon",
        "description": "nn_visualizer.geometry.polygon",
        "peekOfCode": "class Polygon():\n    def __init__(self, edges: list[LineSegment]) -> None:\n        self.edges = edges\n    def length(self) -> float:\n        return reduce(lambda acc, curr: acc + curr.length(), self.edges, 0.0)\n    @classmethod\n    def from_vertices(cls, vertices: list[Point]) -> Polygon:\n        shifted_vertices = copy.deepcopy(vertices)\n        first = shifted_vertices[0]\n        del shifted_vertices[0]",
        "detail": "nn_visualizer.geometry.polygon",
        "documentation": {}
    },
    {
        "label": "TripletPointOrientation",
        "kind": 6,
        "importPath": "nn_visualizer.geometry.utils",
        "description": "nn_visualizer.geometry.utils",
        "peekOfCode": "class TripletPointOrientation(Enum):\n    Collinear = 0\n    Clockwise = 1\n    CounterClockwise = 2\ndef is_zero(number: float):\n    return -tolerance <= number <= tolerance\ndef distance(a: Point, b: Point):\n    return sqrt(pow(a.x - b.x, 2) + pow(a.y - b.y, 2))\ndef orientation(a: Point, b: Point, c: Point) -> TripletPointOrientation:\n    tmp = (b.y - a.y) * (c.x - b.x) - (b.x - a.x) * (c.y - b.y)",
        "detail": "nn_visualizer.geometry.utils",
        "documentation": {}
    },
    {
        "label": "is_zero",
        "kind": 2,
        "importPath": "nn_visualizer.geometry.utils",
        "description": "nn_visualizer.geometry.utils",
        "peekOfCode": "def is_zero(number: float):\n    return -tolerance <= number <= tolerance\ndef distance(a: Point, b: Point):\n    return sqrt(pow(a.x - b.x, 2) + pow(a.y - b.y, 2))\ndef orientation(a: Point, b: Point, c: Point) -> TripletPointOrientation:\n    tmp = (b.y - a.y) * (c.x - b.x) - (b.x - a.x) * (c.y - b.y)\n    if (is_zero(tmp)): return TripletPointOrientation.Collinear\n    if (tmp > 0): return TripletPointOrientation.Clockwise\n    if (tmp < 0): return TripletPointOrientation.CounterClockwise\ndef line_segments_intersects(lhs: LineSegment, rhs: LineSegment) -> bool:",
        "detail": "nn_visualizer.geometry.utils",
        "documentation": {}
    },
    {
        "label": "distance",
        "kind": 2,
        "importPath": "nn_visualizer.geometry.utils",
        "description": "nn_visualizer.geometry.utils",
        "peekOfCode": "def distance(a: Point, b: Point):\n    return sqrt(pow(a.x - b.x, 2) + pow(a.y - b.y, 2))\ndef orientation(a: Point, b: Point, c: Point) -> TripletPointOrientation:\n    tmp = (b.y - a.y) * (c.x - b.x) - (b.x - a.x) * (c.y - b.y)\n    if (is_zero(tmp)): return TripletPointOrientation.Collinear\n    if (tmp > 0): return TripletPointOrientation.Clockwise\n    if (tmp < 0): return TripletPointOrientation.CounterClockwise\ndef line_segments_intersects(lhs: LineSegment, rhs: LineSegment) -> bool:\n    o1 = orientation(lhs.a, lhs.b, rhs.a)\n    o2 = orientation(lhs.a, lhs.b, rhs.b)",
        "detail": "nn_visualizer.geometry.utils",
        "documentation": {}
    },
    {
        "label": "orientation",
        "kind": 2,
        "importPath": "nn_visualizer.geometry.utils",
        "description": "nn_visualizer.geometry.utils",
        "peekOfCode": "def orientation(a: Point, b: Point, c: Point) -> TripletPointOrientation:\n    tmp = (b.y - a.y) * (c.x - b.x) - (b.x - a.x) * (c.y - b.y)\n    if (is_zero(tmp)): return TripletPointOrientation.Collinear\n    if (tmp > 0): return TripletPointOrientation.Clockwise\n    if (tmp < 0): return TripletPointOrientation.CounterClockwise\ndef line_segments_intersects(lhs: LineSegment, rhs: LineSegment) -> bool:\n    o1 = orientation(lhs.a, lhs.b, rhs.a)\n    o2 = orientation(lhs.a, lhs.b, rhs.b)\n    o3 = orientation(rhs.a, rhs.b, lhs.a)\n    o4 = orientation(rhs.a, rhs.b, lhs.b)",
        "detail": "nn_visualizer.geometry.utils",
        "documentation": {}
    },
    {
        "label": "line_segments_intersects",
        "kind": 2,
        "importPath": "nn_visualizer.geometry.utils",
        "description": "nn_visualizer.geometry.utils",
        "peekOfCode": "def line_segments_intersects(lhs: LineSegment, rhs: LineSegment) -> bool:\n    o1 = orientation(lhs.a, lhs.b, rhs.a)\n    o2 = orientation(lhs.a, lhs.b, rhs.b)\n    o3 = orientation(rhs.a, rhs.b, lhs.a)\n    o4 = orientation(rhs.a, rhs.b, lhs.b)\n    if (o1 != o2 and o3 != o4): return True\n    if (o1 == TripletPointOrientation.Collinear and point_lies_on_line_segment(lhs, rhs.a)):\n        return True\n    if (o2 == TripletPointOrientation.Collinear and point_lies_on_line_segment(lhs, rhs.b)):\n        return True",
        "detail": "nn_visualizer.geometry.utils",
        "documentation": {}
    },
    {
        "label": "point_lies_on_line_segment",
        "kind": 2,
        "importPath": "nn_visualizer.geometry.utils",
        "description": "nn_visualizer.geometry.utils",
        "peekOfCode": "def point_lies_on_line_segment(line_segment: LineSegment, point: Point):\n    distance_ab = distance(line_segment.a, line_segment.b)\n    distance_aP = distance(line_segment.a, point)\n    distance_Pb = distance(point, line_segment.b)\n    return abs(distance_aP + distance_Pb - distance_ab) <= tolerance\ndef point_lies_on_polygon(polygon: Polygon, point: Point) -> bool:\n    extended_line_segment = LineSegment(point, Point(point.x + 1000, point.y))\n    count = 0\n    for line_segment in polygon.edges:\n        if line_segments_intersects(line_segment, extended_line_segment):",
        "detail": "nn_visualizer.geometry.utils",
        "documentation": {}
    },
    {
        "label": "point_lies_on_polygon",
        "kind": 2,
        "importPath": "nn_visualizer.geometry.utils",
        "description": "nn_visualizer.geometry.utils",
        "peekOfCode": "def point_lies_on_polygon(polygon: Polygon, point: Point) -> bool:\n    extended_line_segment = LineSegment(point, Point(point.x + 1000, point.y))\n    count = 0\n    for line_segment in polygon.edges:\n        if line_segments_intersects(line_segment, extended_line_segment):\n            count += 1\n    return count & 1\ndef point_lies_on_circle(circle: Circle, point: Point) -> bool:\n    (x, y) = circle.center()\n    circle_center = Point(x, y)",
        "detail": "nn_visualizer.geometry.utils",
        "documentation": {}
    },
    {
        "label": "point_lies_on_circle",
        "kind": 2,
        "importPath": "nn_visualizer.geometry.utils",
        "description": "nn_visualizer.geometry.utils",
        "peekOfCode": "def point_lies_on_circle(circle: Circle, point: Point) -> bool:\n    (x, y) = circle.center()\n    circle_center = Point(x, y)\n    radius = circle.radius\n    return distance(circle_center, point) <= radius\ndef tracing_current_origin(polygon: Polygon, completed: float) -> Point:\n    polygon_length = reduce(lambda acc, curr: acc + curr.length(), polygon.edges, 0.0)\n    completed_path_length = completed * polygon_length\n    traced_path_length = 0.0\n    point = polygon.edges[0].a.copy()",
        "detail": "nn_visualizer.geometry.utils",
        "documentation": {}
    },
    {
        "label": "tracing_current_origin",
        "kind": 2,
        "importPath": "nn_visualizer.geometry.utils",
        "description": "nn_visualizer.geometry.utils",
        "peekOfCode": "def tracing_current_origin(polygon: Polygon, completed: float) -> Point:\n    polygon_length = reduce(lambda acc, curr: acc + curr.length(), polygon.edges, 0.0)\n    completed_path_length = completed * polygon_length\n    traced_path_length = 0.0\n    point = polygon.edges[0].a.copy()\n    index = 0\n    for line_segment in polygon.edges:\n        segment_length = line_segment.length()\n        if traced_path_length + segment_length < completed_path_length:\n            traced_path_length += segment_length",
        "detail": "nn_visualizer.geometry.utils",
        "documentation": {}
    },
    {
        "label": "trace_path",
        "kind": 2,
        "importPath": "nn_visualizer.geometry.utils",
        "description": "nn_visualizer.geometry.utils",
        "peekOfCode": "def trace_path(polygon: Polygon, origin: Point, length: float, index: int) -> LineSegment:\n    polygon_path = copy.deepcopy(polygon.edges)\n    head = polygon_path[0:index]\n    del polygon_path[0:index]\n    polygon_path.extend(head)\n    polygon_path[0].a = copy.deepcopy(origin)\n    remaining_length = length\n    traced_path: list[LineSegment] = []\n    for line_segment in polygon_path:\n        line_segment_length = line_segment.length()",
        "detail": "nn_visualizer.geometry.utils",
        "documentation": {}
    },
    {
        "label": "tolerance",
        "kind": 5,
        "importPath": "nn_visualizer.geometry.utils",
        "description": "nn_visualizer.geometry.utils",
        "peekOfCode": "tolerance = 1e-07\nclass TripletPointOrientation(Enum):\n    Collinear = 0\n    Clockwise = 1\n    CounterClockwise = 2\ndef is_zero(number: float):\n    return -tolerance <= number <= tolerance\ndef distance(a: Point, b: Point):\n    return sqrt(pow(a.x - b.x, 2) + pow(a.y - b.y, 2))\ndef orientation(a: Point, b: Point, c: Point) -> TripletPointOrientation:",
        "detail": "nn_visualizer.geometry.utils",
        "documentation": {}
    },
    {
        "label": "File",
        "kind": 6,
        "importPath": "nn_visualizer.infra.file_manager.file_manager",
        "description": "nn_visualizer.infra.file_manager.file_manager",
        "peekOfCode": "class File():\n    class OpenPolicy(Enum):\n        read = 0\n        append = 1\n        write = 2\n    def __init__(self) -> None:\n        pass\n    def get_file_name(self) -> str:\n        pass\n    @classmethod",
        "detail": "nn_visualizer.infra.file_manager.file_manager",
        "documentation": {}
    },
    {
        "label": "FileManager",
        "kind": 6,
        "importPath": "nn_visualizer.infra.file_manager.file_manager",
        "description": "nn_visualizer.infra.file_manager.file_manager",
        "peekOfCode": "class FileManager():\n    def __init__(self):\n        pass\n    def open_file(self) -> File:\n        pass\n    def open_string_file(self):\n        pass",
        "detail": "nn_visualizer.infra.file_manager.file_manager",
        "documentation": {}
    },
    {
        "label": "BatchNormalizationEditor",
        "kind": 6,
        "importPath": "nn_visualizer.ui_components.components_editors.batch_norm_editor.batch_normalization_editor",
        "description": "nn_visualizer.ui_components.components_editors.batch_norm_editor.batch_normalization_editor",
        "peekOfCode": "class BatchNormalizationEditor(EditorContainer):\n    def __init__(self, editing_batch_normalization: EditingBatchNormalization):\n        EditorContainer.__init__(self, editing_batch_normalization, [])",
        "detail": "nn_visualizer.ui_components.components_editors.batch_norm_editor.batch_normalization_editor",
        "documentation": {}
    },
    {
        "label": "ActivationComboBox",
        "kind": 6,
        "importPath": "nn_visualizer.ui_components.components_editors.dense_visualizer_editor.activation_combo_box",
        "description": "nn_visualizer.ui_components.components_editors.dense_visualizer_editor.activation_combo_box",
        "peekOfCode": "class ActivationComboBox(QComboBox):\n    def __init__(self, editing_dense: EditingDense):\n        QComboBox.__init__(self)\n        self.editing_dense = editing_dense\n        self.items = ['ReLU', 'Sigmoid', 'Softmax', 'Linear', 'None']\n        for item in self.items:\n            self.addItem(item)\n        self.setCurrentIndex(self.items.index(self.editing_dense.activation_function))\n        self.currentIndexChanged.connect(self.on_index_change)\n    def on_index_change(self, index: int):",
        "detail": "nn_visualizer.ui_components.components_editors.dense_visualizer_editor.activation_combo_box",
        "documentation": {}
    },
    {
        "label": "DenseVisualizerEditor",
        "kind": 6,
        "importPath": "nn_visualizer.ui_components.components_editors.dense_visualizer_editor.dense_visualizer_editor",
        "description": "nn_visualizer.ui_components.components_editors.dense_visualizer_editor.dense_visualizer_editor",
        "peekOfCode": "class DenseVisualizerEditor(EditorContainer):\n    def __init__(self, editing_layer: EditingLayer):\n        editor_specifics: list[QWidget] = self.items(editing_layer)\n        EditorContainer.__init__(self, editing_layer, editor_specifics)\n    def items(self, editing_dense: EditingDense) -> list[QLayoutItem]:\n        groupbox = QGroupBox()\n        hbox = QVBoxLayout()\n        groupbox.setLayout(hbox)\n        hbox.addWidget(ItemLabel('Initialization Params Algorithm'))\n        radiobutton = QRadioButton(\"Random\")",
        "detail": "nn_visualizer.ui_components.components_editors.dense_visualizer_editor.dense_visualizer_editor",
        "documentation": {}
    },
    {
        "label": "DropoutVisualizerEditor",
        "kind": 6,
        "importPath": "nn_visualizer.ui_components.components_editors.dropout_visualizer_editor.dropout_visualizer_editor",
        "description": "nn_visualizer.ui_components.components_editors.dropout_visualizer_editor.dropout_visualizer_editor",
        "peekOfCode": "class DropoutVisualizerEditor(EditorContainer):\n    def __init__(self, editing_layer: EditingLayer):\n        editor_specifics: list[QWidget] = self.items(editing_layer)\n        EditorContainer.__init__(self, editing_layer, editor_specifics)\n    def items(self, editing_dropout: EditingDropout) -> list[QLayoutItem]:\n        dropout_slider = DoubleSlider(decimals=1, orientation=Qt.Orientation.Horizontal)\n        dropout_slider.setMinimum(0)\n        dropout_slider.setMaximum(1)\n        dropout_slider.setValue(0)\n        dropout_slider.setTracking(True)",
        "detail": "nn_visualizer.ui_components.components_editors.dropout_visualizer_editor.dropout_visualizer_editor",
        "documentation": {}
    },
    {
        "label": "InputVisualizerEditor",
        "kind": 6,
        "importPath": "nn_visualizer.ui_components.components_editors.input_visualizer_editor.input_visualizer_editor",
        "description": "nn_visualizer.ui_components.components_editors.input_visualizer_editor.input_visualizer_editor",
        "peekOfCode": "class InputVisualizerEditor(EditorContainer):\n    def __init__(self, editing_layer: EditingLayer):\n        EditorContainer.__init__(self, editing_layer, [])",
        "detail": "nn_visualizer.ui_components.components_editors.input_visualizer_editor.input_visualizer_editor",
        "documentation": {}
    },
    {
        "label": "ReLUVisualizerEditor",
        "kind": 6,
        "importPath": "nn_visualizer.ui_components.components_editors.relu_editor.relu_visualizer_editor",
        "description": "nn_visualizer.ui_components.components_editors.relu_editor.relu_visualizer_editor",
        "peekOfCode": "class ReLUVisualizerEditor(EditorContainer):\n    def __init__(self, editing_relu: EditingReLU) -> None:\n        EditorContainer.__init__(self, editing_relu, [])",
        "detail": "nn_visualizer.ui_components.components_editors.relu_editor.relu_visualizer_editor",
        "documentation": {}
    },
    {
        "label": "ComponentNameContainer",
        "kind": 6,
        "importPath": "nn_visualizer.ui_components.components_editors.shared.component_name_container.component_name_container",
        "description": "nn_visualizer.ui_components.components_editors.shared.component_name_container.component_name_container",
        "peekOfCode": "class ComponentNameContainer(QWidget):\n    def __init__(self, parent: QWidget, name_change_callback: Callable[[str], None], default_text = '') -> None:\n        QWidget.__init__(self, parent)\n        self.name_change_callback = name_change_callback\n        self.build_layout(default_text)\n    def build_layout(self, default_text):\n        root_layout = QHBoxLayout()\n        label_name = ItemLabel('Name')\n        edit_name = QLineEdit()\n        edit_name.setText(default_text)",
        "detail": "nn_visualizer.ui_components.components_editors.shared.component_name_container.component_name_container",
        "documentation": {}
    },
    {
        "label": "AddUnitButton",
        "kind": 6,
        "importPath": "nn_visualizer.ui_components.components_editors.shared.units_number_change.units_number_change",
        "description": "nn_visualizer.ui_components.components_editors.shared.units_number_change.units_number_change",
        "peekOfCode": "class AddUnitButton(SMLFIconButton):\n    def __init__(self, handler = lambda _: _):\n        SMLFIconButton.__init__(self, icon=qta.icon('mdi.plus', color='white'), width=28, height=28, click_handler=handler)\nclass RemoveUnitButton(SMLFIconButton):\n    def __init__(self, handler = lambda _: _):\n        SMLFIconButton.__init__(self, icon=qta.icon('mdi.minus', color='white'), width=28, height=28, click_handler=handler)\nclass UnitsNumberEditor(QWidget):\n    def __init__(self, editing_dense: EditingLayer) -> None:\n        QWidget.__init__(self)\n        self.setAttribute(Qt.WA_StyledBackground, True)",
        "detail": "nn_visualizer.ui_components.components_editors.shared.units_number_change.units_number_change",
        "documentation": {}
    },
    {
        "label": "RemoveUnitButton",
        "kind": 6,
        "importPath": "nn_visualizer.ui_components.components_editors.shared.units_number_change.units_number_change",
        "description": "nn_visualizer.ui_components.components_editors.shared.units_number_change.units_number_change",
        "peekOfCode": "class RemoveUnitButton(SMLFIconButton):\n    def __init__(self, handler = lambda _: _):\n        SMLFIconButton.__init__(self, icon=qta.icon('mdi.minus', color='white'), width=28, height=28, click_handler=handler)\nclass UnitsNumberEditor(QWidget):\n    def __init__(self, editing_dense: EditingLayer) -> None:\n        QWidget.__init__(self)\n        self.setAttribute(Qt.WA_StyledBackground, True)\n        self.editing_dense = editing_dense\n        root_layout = QHBoxLayout(self)\n        root_layout.setContentsMargins(0, 0, 0, 0)",
        "detail": "nn_visualizer.ui_components.components_editors.shared.units_number_change.units_number_change",
        "documentation": {}
    },
    {
        "label": "UnitsNumberEditor",
        "kind": 6,
        "importPath": "nn_visualizer.ui_components.components_editors.shared.units_number_change.units_number_change",
        "description": "nn_visualizer.ui_components.components_editors.shared.units_number_change.units_number_change",
        "peekOfCode": "class UnitsNumberEditor(QWidget):\n    def __init__(self, editing_dense: EditingLayer) -> None:\n        QWidget.__init__(self)\n        self.setAttribute(Qt.WA_StyledBackground, True)\n        self.editing_dense = editing_dense\n        root_layout = QHBoxLayout(self)\n        root_layout.setContentsMargins(0, 0, 0, 0)\n        add_neuron_button = AddUnitButton(handler=self.add_unit_button_handler)\n        remove_neuron_button = RemoveUnitButton(handler=self.remove_unit_button_handler)\n        root_layout.setAlignment(Qt.AlignCenter)",
        "detail": "nn_visualizer.ui_components.components_editors.shared.units_number_change.units_number_change",
        "documentation": {}
    },
    {
        "label": "SigmoidVisualizerEditor",
        "kind": 6,
        "importPath": "nn_visualizer.ui_components.components_editors.sigmoid_editor.sigmoid_visualizer_editor",
        "description": "nn_visualizer.ui_components.components_editors.sigmoid_editor.sigmoid_visualizer_editor",
        "peekOfCode": "class SigmoidVisualizerEditor(EditorContainer):\n    def __init__(self, editing_sigmoid: EditingSigmoid) -> None:\n        EditorContainer.__init__(self, editing_sigmoid, [])",
        "detail": "nn_visualizer.ui_components.components_editors.sigmoid_editor.sigmoid_visualizer_editor",
        "documentation": {}
    },
    {
        "label": "SoftmaxVisualizerEditor",
        "kind": 6,
        "importPath": "nn_visualizer.ui_components.components_editors.softmax_visualizer_editor.softmax_visualizer_editor",
        "description": "nn_visualizer.ui_components.components_editors.softmax_visualizer_editor.softmax_visualizer_editor",
        "peekOfCode": "class SoftmaxVisualizerEditor(EditorContainer):\n    def __init__(self, editing_softmax: EditingSoftmax) -> None:\n        EditorContainer.__init__(self, editing_softmax, [])",
        "detail": "nn_visualizer.ui_components.components_editors.softmax_visualizer_editor.softmax_visualizer_editor",
        "documentation": {}
    },
    {
        "label": "EditorContainer",
        "kind": 6,
        "importPath": "nn_visualizer.ui_components.components_editors.editor_container",
        "description": "nn_visualizer.ui_components.components_editors.editor_container",
        "peekOfCode": "class EditorContainer(QWidget):\n    def __init__(self, editing_layer: EditingLayer, editor_specifics: list[QWidget] = []):\n        QWidget.__init__(self)\n        self.editing_layer = editing_layer\n        self.setObjectName('DenseVisualizerEditor')\n        self.setAttribute(Qt.WA_StyledBackground, True)\n        self.build_layout(editor_specifics)\n        self.setSizePolicy(\n            QSizePolicy.Expanding,\n            QSizePolicy.Maximum",
        "detail": "nn_visualizer.ui_components.components_editors.editor_container",
        "documentation": {}
    },
    {
        "label": "ConsolePath",
        "kind": 6,
        "importPath": "nn_visualizer.ui_components.console.console",
        "description": "nn_visualizer.ui_components.console.console",
        "peekOfCode": "class ConsolePath():\n    def __init__(self, path: str):\n        self.path = path\n    def go_to_parent(self):\n        self.path = reduce(str.__add__, self.path.split('/')[0:-1], '')\nclass Console(QTextEdit):\n    def __init__(self, application_context: ApplicationContext, handle_load_callback = None):\n        QTextEdit.__init__(self, )\n        self.setObjectName('Console')\n        self.setFixedHeight(200)",
        "detail": "nn_visualizer.ui_components.console.console",
        "documentation": {}
    },
    {
        "label": "Console",
        "kind": 6,
        "importPath": "nn_visualizer.ui_components.console.console",
        "description": "nn_visualizer.ui_components.console.console",
        "peekOfCode": "class Console(QTextEdit):\n    def __init__(self, application_context: ApplicationContext, handle_load_callback = None):\n        QTextEdit.__init__(self, )\n        self.setObjectName('Console')\n        self.setFixedHeight(200)\n        self.application_context = application_context\n        self.setStyleSheet('QTextEdit {{color: white; font-family: Courier;}} #Console {{ background-color: {color}; }}'.format(color=Colors.dark_blue))\n        self.textChanged.connect(self.text_changed_handler)\n        self.current_line = ''\n        self.path = os.getcwd()",
        "detail": "nn_visualizer.ui_components.console.console",
        "documentation": {}
    },
    {
        "label": "NextStepButton",
        "kind": 6,
        "importPath": "nn_visualizer.ui_components.control_panel.buttons.step_buttons.next_step_button",
        "description": "nn_visualizer.ui_components.control_panel.buttons.step_buttons.next_step_button",
        "peekOfCode": "class NextStepButton(SMLFIconButton):\n    def __init__(self, handler = lambda _ : _):\n        SMLFIconButton.__init__(\n            self, icon=qta.icon('mdi.skip-next', color='white'),\n            click_handler=handler,\n            width=32,\n            height=32\n        )",
        "detail": "nn_visualizer.ui_components.control_panel.buttons.step_buttons.next_step_button",
        "documentation": {}
    },
    {
        "label": "PlayFullButton",
        "kind": 6,
        "importPath": "nn_visualizer.ui_components.control_panel.buttons.step_buttons.play_full_button",
        "description": "nn_visualizer.ui_components.control_panel.buttons.step_buttons.play_full_button",
        "peekOfCode": "class PlayFullButton(SMLFIconRoundButton):\n    def __init__(self, application_context: ApplicationContext):\n        SMLFIconRoundButton.__init__(\n            self,\n            icon=qta.icon('mdi.play', color='white'),\n            click_handler=self.handler\n        )\n        self.application_context = application_context\n    def handler(self, event):\n        icon = None",
        "detail": "nn_visualizer.ui_components.control_panel.buttons.step_buttons.play_full_button",
        "documentation": {}
    },
    {
        "label": "ResetButton",
        "kind": 6,
        "importPath": "nn_visualizer.ui_components.control_panel.buttons.step_buttons.reset_button",
        "description": "nn_visualizer.ui_components.control_panel.buttons.step_buttons.reset_button",
        "peekOfCode": "class ResetButton(SMLFIconButton):\n    def __init__(self, handler = lambda _: _):\n        SMLFIconButton.__init__(\n            self, icon=qta.icon('mdi.replay', color='white'),\n            width=36,\n            height=36,\n            click_handler=self.click_handler\n        )\n        self.handler = handler\n    def click_handler(self, event: QMouseEvent):",
        "detail": "nn_visualizer.ui_components.control_panel.buttons.step_buttons.reset_button",
        "documentation": {}
    },
    {
        "label": "SliderContainer",
        "kind": 6,
        "importPath": "nn_visualizer.ui_components.control_panel.control_panel",
        "description": "nn_visualizer.ui_components.control_panel.control_panel",
        "peekOfCode": "class SliderContainer(QWidget):\n    def __init__(self, parent=None):\n        QWidget.__init__(self, parent,)\n        self.epoch_slider = QSlider(parent, orientation=Qt.Orientation.Horizontal)\n        self.epoch_slider.setObjectName('DoubleSlider')\n        self.epoch_slider.setStyleSheet('#DoubleSlider { background-color: transparent; }')\n        self.epoch_value_label = ItemLabel('Epoch: 0')\n        self.epoch_slider.setRange(0, 100)\n        self.epoch_slider.setValue(0)\n        self.epoch_slider.setTracking(True)",
        "detail": "nn_visualizer.ui_components.control_panel.control_panel",
        "documentation": {}
    },
    {
        "label": "BatchSizeSliderContainer",
        "kind": 6,
        "importPath": "nn_visualizer.ui_components.control_panel.control_panel",
        "description": "nn_visualizer.ui_components.control_panel.control_panel",
        "peekOfCode": "class BatchSizeSliderContainer(QWidget):\n    def __init__(self, parent=None):\n        QWidget.__init__(self, parent,)\n        self.batch_size_slider = QSlider(parent, orientation=Qt.Orientation.Horizontal)\n        self.batch_size_slider.setObjectName('DoubleSlider')\n        self.batch_size_slider.setStyleSheet('#DoubleSlider { background-color: transparent; }')\n        self.epoch_value_label = ItemLabel(\"Batch Size: 0\")\n        self.batch_size_slider.setRange(0, 100)\n        self.batch_size_slider.setValue(0)\n        self.batch_size_slider.setTracking(True)",
        "detail": "nn_visualizer.ui_components.control_panel.control_panel",
        "documentation": {}
    },
    {
        "label": "MainButtons",
        "kind": 6,
        "importPath": "nn_visualizer.ui_components.control_panel.control_panel",
        "description": "nn_visualizer.ui_components.control_panel.control_panel",
        "peekOfCode": "class MainButtons(QWidget):\n    def __init__(self, application_context: ApplicationContext, parent=None):\n        QWidget.__init__(self)\n        self.reset_button = ResetButton(handler=None)\n        self.next_step_button = NextStepButton(handler=application_context.next_step_training_click_handler)\n        self.play_full_button = PlayFullButton(application_context=application_context)\n        self.root_layout = QHBoxLayout()\n        self.root_layout.addStretch()\n        self.root_layout.addWidget(self.reset_button)\n        self.root_layout.addWidget(self.play_full_button)",
        "detail": "nn_visualizer.ui_components.control_panel.control_panel",
        "documentation": {}
    },
    {
        "label": "ControlPanel",
        "kind": 6,
        "importPath": "nn_visualizer.ui_components.control_panel.control_panel",
        "description": "nn_visualizer.ui_components.control_panel.control_panel",
        "peekOfCode": "class ControlPanel(QWidget):\n    def __init__(self, application_context: ApplicationContext, parent) -> None:\n        QWidget.__init__(self)\n        self.width = 450\n        self.epochs_slider = SliderContainer()\n        self.root_layout = QVBoxLayout()\n        self.root_layout.setAlignment(Qt.AlignHCenter)\n        self._build_layout(application_context, parent)\n        application_context.pipeline.loss_change_listeners.append(self.listen_loss_change)\n    def _build_layout(self, application_context: ApplicationContext, parent):",
        "detail": "nn_visualizer.ui_components.control_panel.control_panel",
        "documentation": {}
    },
    {
        "label": "LearningRateSliderContainer",
        "kind": 6,
        "importPath": "nn_visualizer.ui_components.control_panel.learning_rate_slider_container",
        "description": "nn_visualizer.ui_components.control_panel.learning_rate_slider_container",
        "peekOfCode": "class LearningRateSliderContainer(QWidget):\n    def __init__(self, application_context: ApplicationContext, parent=None):\n        QWidget.__init__(self, parent,)\n        self.epoch_slider = DoubleSlider(decimals=5, orientation=Qt.Orientation.Horizontal)\n        self.epoch_value_label = ItemLabel('Learning Rate: 1.0')\n        self.epoch_slider.setMinimum(0)\n        self.epoch_slider.setMaximum(5)\n        self.epoch_slider.setValue(1.)\n        self.epoch_slider.setTracking(True)\n        self.epoch_slider.valueChanged.connect(self.value_changed)",
        "detail": "nn_visualizer.ui_components.control_panel.learning_rate_slider_container",
        "documentation": {}
    },
    {
        "label": "SMLFIconButton",
        "kind": 6,
        "importPath": "nn_visualizer.ui_components.customized.button.smlf_icon_button",
        "description": "nn_visualizer.ui_components.customized.button.smlf_icon_button",
        "peekOfCode": "class SMLFIconButton(QPushButton):\n    def __init__(self, icon: QIcon = None, click_handler = lambda event: None, width: int = 64, height: int = 64):\n        QPushButton.__init__(self)\n        self.setIcon(icon)\n        self.setFixedHeight(height)\n        self.setFixedWidth(width)\n        self.setIconSize(QtCore.QSize(int(width*0.8), int(height*0.8)))\n        self.setStyleSheet(\"background-color: {hex}; border: none; border-radius: 4px;\".format(hex = dark_blue))\n        self.click_handler = click_handler\n    def default_style(self) -> dict:",
        "detail": "nn_visualizer.ui_components.customized.button.smlf_icon_button",
        "documentation": {}
    },
    {
        "label": "dark_blue",
        "kind": 5,
        "importPath": "nn_visualizer.ui_components.customized.button.smlf_icon_button",
        "description": "nn_visualizer.ui_components.customized.button.smlf_icon_button",
        "peekOfCode": "dark_blue = '#0C2D48'\nblue = '#2E8BC0'\nbaby_blue = '#B1D4E0'\nmidnight_blue = '#145DA0'\nclass SMLFIconButton(QPushButton):\n    def __init__(self, icon: QIcon = None, click_handler = lambda event: None, width: int = 64, height: int = 64):\n        QPushButton.__init__(self)\n        self.setIcon(icon)\n        self.setFixedHeight(height)\n        self.setFixedWidth(width)",
        "detail": "nn_visualizer.ui_components.customized.button.smlf_icon_button",
        "documentation": {}
    },
    {
        "label": "blue",
        "kind": 5,
        "importPath": "nn_visualizer.ui_components.customized.button.smlf_icon_button",
        "description": "nn_visualizer.ui_components.customized.button.smlf_icon_button",
        "peekOfCode": "blue = '#2E8BC0'\nbaby_blue = '#B1D4E0'\nmidnight_blue = '#145DA0'\nclass SMLFIconButton(QPushButton):\n    def __init__(self, icon: QIcon = None, click_handler = lambda event: None, width: int = 64, height: int = 64):\n        QPushButton.__init__(self)\n        self.setIcon(icon)\n        self.setFixedHeight(height)\n        self.setFixedWidth(width)\n        self.setIconSize(QtCore.QSize(int(width*0.8), int(height*0.8)))",
        "detail": "nn_visualizer.ui_components.customized.button.smlf_icon_button",
        "documentation": {}
    },
    {
        "label": "baby_blue",
        "kind": 5,
        "importPath": "nn_visualizer.ui_components.customized.button.smlf_icon_button",
        "description": "nn_visualizer.ui_components.customized.button.smlf_icon_button",
        "peekOfCode": "baby_blue = '#B1D4E0'\nmidnight_blue = '#145DA0'\nclass SMLFIconButton(QPushButton):\n    def __init__(self, icon: QIcon = None, click_handler = lambda event: None, width: int = 64, height: int = 64):\n        QPushButton.__init__(self)\n        self.setIcon(icon)\n        self.setFixedHeight(height)\n        self.setFixedWidth(width)\n        self.setIconSize(QtCore.QSize(int(width*0.8), int(height*0.8)))\n        self.setStyleSheet(\"background-color: {hex}; border: none; border-radius: 4px;\".format(hex = dark_blue))",
        "detail": "nn_visualizer.ui_components.customized.button.smlf_icon_button",
        "documentation": {}
    },
    {
        "label": "midnight_blue",
        "kind": 5,
        "importPath": "nn_visualizer.ui_components.customized.button.smlf_icon_button",
        "description": "nn_visualizer.ui_components.customized.button.smlf_icon_button",
        "peekOfCode": "midnight_blue = '#145DA0'\nclass SMLFIconButton(QPushButton):\n    def __init__(self, icon: QIcon = None, click_handler = lambda event: None, width: int = 64, height: int = 64):\n        QPushButton.__init__(self)\n        self.setIcon(icon)\n        self.setFixedHeight(height)\n        self.setFixedWidth(width)\n        self.setIconSize(QtCore.QSize(int(width*0.8), int(height*0.8)))\n        self.setStyleSheet(\"background-color: {hex}; border: none; border-radius: 4px;\".format(hex = dark_blue))\n        self.click_handler = click_handler",
        "detail": "nn_visualizer.ui_components.customized.button.smlf_icon_button",
        "documentation": {}
    },
    {
        "label": "SMLFIconRoundButton",
        "kind": 6,
        "importPath": "nn_visualizer.ui_components.customized.button.smlf_icon_round_button",
        "description": "nn_visualizer.ui_components.customized.button.smlf_icon_round_button",
        "peekOfCode": "class SMLFIconRoundButton(QPushButton):\n    def __init__(self, icon: QIcon = None, click_handler = lambda event: None, size: int = 64):\n        QPushButton.__init__(self)\n        self.setIcon(icon)\n        self.setFixedHeight(size)\n        self.setFixedWidth(size)\n        self.setIconSize(QtCore.QSize(int(size*0.8), int(size*0.8)))\n        self.setStyleSheet(\"background-color: {hex}; border: none; border-radius: 32px;\".format(hex = dark_blue))\n        self.click_handler = click_handler\n    def default_style(self) -> dict:",
        "detail": "nn_visualizer.ui_components.customized.button.smlf_icon_round_button",
        "documentation": {}
    },
    {
        "label": "dark_blue",
        "kind": 5,
        "importPath": "nn_visualizer.ui_components.customized.button.smlf_icon_round_button",
        "description": "nn_visualizer.ui_components.customized.button.smlf_icon_round_button",
        "peekOfCode": "dark_blue = '#0C2D48'\nblue = '#2E8BC0'\nbaby_blue = '#B1D4E0'\nmidnight_blue = '#145DA0'\nclass SMLFIconRoundButton(QPushButton):\n    def __init__(self, icon: QIcon = None, click_handler = lambda event: None, size: int = 64):\n        QPushButton.__init__(self)\n        self.setIcon(icon)\n        self.setFixedHeight(size)\n        self.setFixedWidth(size)",
        "detail": "nn_visualizer.ui_components.customized.button.smlf_icon_round_button",
        "documentation": {}
    },
    {
        "label": "blue",
        "kind": 5,
        "importPath": "nn_visualizer.ui_components.customized.button.smlf_icon_round_button",
        "description": "nn_visualizer.ui_components.customized.button.smlf_icon_round_button",
        "peekOfCode": "blue = '#2E8BC0'\nbaby_blue = '#B1D4E0'\nmidnight_blue = '#145DA0'\nclass SMLFIconRoundButton(QPushButton):\n    def __init__(self, icon: QIcon = None, click_handler = lambda event: None, size: int = 64):\n        QPushButton.__init__(self)\n        self.setIcon(icon)\n        self.setFixedHeight(size)\n        self.setFixedWidth(size)\n        self.setIconSize(QtCore.QSize(int(size*0.8), int(size*0.8)))",
        "detail": "nn_visualizer.ui_components.customized.button.smlf_icon_round_button",
        "documentation": {}
    },
    {
        "label": "baby_blue",
        "kind": 5,
        "importPath": "nn_visualizer.ui_components.customized.button.smlf_icon_round_button",
        "description": "nn_visualizer.ui_components.customized.button.smlf_icon_round_button",
        "peekOfCode": "baby_blue = '#B1D4E0'\nmidnight_blue = '#145DA0'\nclass SMLFIconRoundButton(QPushButton):\n    def __init__(self, icon: QIcon = None, click_handler = lambda event: None, size: int = 64):\n        QPushButton.__init__(self)\n        self.setIcon(icon)\n        self.setFixedHeight(size)\n        self.setFixedWidth(size)\n        self.setIconSize(QtCore.QSize(int(size*0.8), int(size*0.8)))\n        self.setStyleSheet(\"background-color: {hex}; border: none; border-radius: 32px;\".format(hex = dark_blue))",
        "detail": "nn_visualizer.ui_components.customized.button.smlf_icon_round_button",
        "documentation": {}
    },
    {
        "label": "midnight_blue",
        "kind": 5,
        "importPath": "nn_visualizer.ui_components.customized.button.smlf_icon_round_button",
        "description": "nn_visualizer.ui_components.customized.button.smlf_icon_round_button",
        "peekOfCode": "midnight_blue = '#145DA0'\nclass SMLFIconRoundButton(QPushButton):\n    def __init__(self, icon: QIcon = None, click_handler = lambda event: None, size: int = 64):\n        QPushButton.__init__(self)\n        self.setIcon(icon)\n        self.setFixedHeight(size)\n        self.setFixedWidth(size)\n        self.setIconSize(QtCore.QSize(int(size*0.8), int(size*0.8)))\n        self.setStyleSheet(\"background-color: {hex}; border: none; border-radius: 32px;\".format(hex = dark_blue))\n        self.click_handler = click_handler",
        "detail": "nn_visualizer.ui_components.customized.button.smlf_icon_round_button",
        "documentation": {}
    },
    {
        "label": "DoubleSlider",
        "kind": 6,
        "importPath": "nn_visualizer.ui_components.customized.double_slider.double_slider",
        "description": "nn_visualizer.ui_components.customized.double_slider.double_slider",
        "peekOfCode": "class DoubleSlider(QSlider):\n    # create our our signal that we can connect to if necessary\n    doubleValueChanged = pyqtSignal(float)\n    def __init__(self, decimals=3, *args, **kargs):\n        super(DoubleSlider, self).__init__( *args, **kargs)\n        self.setObjectName('DoubleSlider')\n        self._multi = 10 ** decimals\n        self.setStyleSheet('#DoubleSlider { background-color: transparent; }')\n        self.valueChanged.connect(self.emitDoubleValueChanged)\n    def emitDoubleValueChanged(self):",
        "detail": "nn_visualizer.ui_components.customized.double_slider.double_slider",
        "documentation": {}
    },
    {
        "label": "DragButton",
        "kind": 6,
        "importPath": "nn_visualizer.ui_components.customized.drag_drop.smlf_drag_button",
        "description": "nn_visualizer.ui_components.customized.drag_drop.smlf_drag_button",
        "peekOfCode": "class DragButton(QPushButton):\n    def __init__(self, parent, text: str, drag_payload: dict = dict({})):\n        QPushButton.__init__(self, parent)\n        self.setEnabled(True)\n        self.setText(text)\n        self.drag_payload = drag_payload\n    def mouseMoveEvent(self, e):\n        drag = QDrag(self)\n        mime = QMimeData()\n        mime.setText(json.dumps(self.drag_payload))",
        "detail": "nn_visualizer.ui_components.customized.drag_drop.smlf_drag_button",
        "documentation": {}
    },
    {
        "label": "ItemLabel",
        "kind": 6,
        "importPath": "nn_visualizer.ui_components.customized.label.item_label",
        "description": "nn_visualizer.ui_components.customized.label.item_label",
        "peekOfCode": "class ItemLabel(QLabel):\n    def __init__(self, text: str = '', size: str = 'md'):\n        QLabel.__init__(self, text)\n        self.setObjectName('ItemLabel')\n        self.setFixedHeight(32)\n        self.setStyleSheet(\"#ItemLabel {{ {style} }}\".format(style=json_style_to_css(self.default_style(size))))\n    def default_style(self, size: str) -> dict:\n        font_size = font_sizes[size]\n        return dict({\n            'font-size': '{size}px'.format(size=font_size),",
        "detail": "nn_visualizer.ui_components.customized.label.item_label",
        "documentation": {}
    },
    {
        "label": "font_sizes",
        "kind": 5,
        "importPath": "nn_visualizer.ui_components.customized.label.item_label",
        "description": "nn_visualizer.ui_components.customized.label.item_label",
        "peekOfCode": "font_sizes = dict({\n    'xs': 8,\n    'sm': 12,\n    'md': 16,\n    'lg': 20,\n    'xs': 24,\n    'xl': 28,\n})\nclass ItemLabel(QLabel):\n    def __init__(self, text: str = '', size: str = 'md'):",
        "detail": "nn_visualizer.ui_components.customized.label.item_label",
        "documentation": {}
    },
    {
        "label": "DerivativesDrawer",
        "kind": 6,
        "importPath": "nn_visualizer.ui_components.derivatives_drawer.derivatives_drawer",
        "description": "nn_visualizer.ui_components.derivatives_drawer.derivatives_drawer",
        "peekOfCode": "class DerivativesDrawer(CanvasDrawable):\n    def __init__(self,\n            layer_index: int,\n            node_index: int,\n            next_layer_node_indexes: list[int],\n            derivatives_colors: list[QColor],\n        ):\n        CanvasDrawable.__init__(self)\n        self.layer_index = layer_index\n        self.node_index = node_index",
        "detail": "nn_visualizer.ui_components.derivatives_drawer.derivatives_drawer",
        "documentation": {}
    },
    {
        "label": "AddBatchNormalizationDragButton",
        "kind": 6,
        "importPath": "nn_visualizer.ui_components.edit_panel.buttons.add_batch_normalization_layer_drag_button",
        "description": "nn_visualizer.ui_components.edit_panel.buttons.add_batch_normalization_layer_drag_button",
        "peekOfCode": "class AddBatchNormalizationDragButton(AddLayerDragButton):\n    def __init__(self, parent, *args, **kwargs):\n        drag_payload = dict({\n            'layer_name': 'BatchNormalization',\n            'units': '3',\n        })\n        AddLayerDragButton.__init__(self, parent, 'Batch Normalization', drag_payload)",
        "detail": "nn_visualizer.ui_components.edit_panel.buttons.add_batch_normalization_layer_drag_button",
        "documentation": {}
    },
    {
        "label": "AddDenseDragButton",
        "kind": 6,
        "importPath": "nn_visualizer.ui_components.edit_panel.buttons.add_dense_layer_drag_button",
        "description": "nn_visualizer.ui_components.edit_panel.buttons.add_dense_layer_drag_button",
        "peekOfCode": "class AddDenseDragButton(AddLayerDragButton):\n    def __init__(self, parent):\n        drag_payload = dict({\n            'layer_name': 'Dense',\n            'units': '3'\n        })\n        AddLayerDragButton.__init__(self, parent, 'Dense', drag_payload)",
        "detail": "nn_visualizer.ui_components.edit_panel.buttons.add_dense_layer_drag_button",
        "documentation": {}
    },
    {
        "label": "AddDropoutDragButton",
        "kind": 6,
        "importPath": "nn_visualizer.ui_components.edit_panel.buttons.add_dropout_layer_drag_button",
        "description": "nn_visualizer.ui_components.edit_panel.buttons.add_dropout_layer_drag_button",
        "peekOfCode": "class AddDropoutDragButton(AddLayerDragButton):\n    def __init__(self, parent):\n        drag_payload = dict({\n            'layer_name': 'Dropout',\n            'units': '3'\n        })\n        AddLayerDragButton.__init__(self, parent, 'Dropout', drag_payload)",
        "detail": "nn_visualizer.ui_components.edit_panel.buttons.add_dropout_layer_drag_button",
        "documentation": {}
    },
    {
        "label": "AddLayerDragButton",
        "kind": 6,
        "importPath": "nn_visualizer.ui_components.edit_panel.buttons.add_layer_drag_button",
        "description": "nn_visualizer.ui_components.edit_panel.buttons.add_layer_drag_button",
        "peekOfCode": "class AddLayerDragButton(DragButton):\n    def __init__(self, parent, layer_name: str, drag_payload: dict = dict({})):\n        DragButton.__init__(self, parent, layer_name, drag_payload=drag_payload)\n        style_tr = json_style_to_css({\n           'border': 'none',\n           'border-radius': '8px',\n           'background': Colors.baby_blue,\n           'padding': '24px',\n           'color': 'white',\n           'font-size': '18px',",
        "detail": "nn_visualizer.ui_components.edit_panel.buttons.add_layer_drag_button",
        "documentation": {}
    },
    {
        "label": "AddReLUDragButton",
        "kind": 6,
        "importPath": "nn_visualizer.ui_components.edit_panel.buttons.add_relu_layer_drag_button",
        "description": "nn_visualizer.ui_components.edit_panel.buttons.add_relu_layer_drag_button",
        "peekOfCode": "class AddReLUDragButton(AddLayerDragButton):\n    def __init__(self, parent):\n        drag_payload = dict({\n            'layer_name': 'ReLU',\n            'units': '3'\n        })\n        AddLayerDragButton.__init__(self, parent, 'ReLU', drag_payload)",
        "detail": "nn_visualizer.ui_components.edit_panel.buttons.add_relu_layer_drag_button",
        "documentation": {}
    },
    {
        "label": "AddSigmoidDragButton",
        "kind": 6,
        "importPath": "nn_visualizer.ui_components.edit_panel.buttons.add_sigmoid_layer_drag_button",
        "description": "nn_visualizer.ui_components.edit_panel.buttons.add_sigmoid_layer_drag_button",
        "peekOfCode": "class AddSigmoidDragButton(AddLayerDragButton):\n    def __init__(self, parent):\n        drag_payload = dict({\n            'layer_name': 'Sigmoid',\n            'units': '3',\n        })\n        AddLayerDragButton.__init__(self, parent, 'Sigmoid', drag_payload)",
        "detail": "nn_visualizer.ui_components.edit_panel.buttons.add_sigmoid_layer_drag_button",
        "documentation": {}
    },
    {
        "label": "AddSoftmaxDragButton",
        "kind": 6,
        "importPath": "nn_visualizer.ui_components.edit_panel.buttons.add_softmax_layer_drag_button",
        "description": "nn_visualizer.ui_components.edit_panel.buttons.add_softmax_layer_drag_button",
        "peekOfCode": "class AddSoftmaxDragButton(AddLayerDragButton):\n    def __init__(self, parent):\n        drag_payload = dict({\n            'layer_name': 'Softmax',\n            'units': '3',\n        })\n        AddLayerDragButton.__init__(self, parent, 'Softmax', drag_payload)",
        "detail": "nn_visualizer.ui_components.edit_panel.buttons.add_softmax_layer_drag_button",
        "documentation": {}
    },
    {
        "label": "AddWidgetsPanel",
        "kind": 6,
        "importPath": "nn_visualizer.ui_components.edit_panel.edit_panel",
        "description": "nn_visualizer.ui_components.edit_panel.edit_panel",
        "peekOfCode": "class AddWidgetsPanel(QWidget):\n    def __init__(self, parent) -> None:\n        QWidget.__init__(self, parent)\n        # self.setAttribute(Qt.WA_StyledBackground, True)\n        # self.setObjectName('AddWidgetsPanel')\n        # self.setStyleSheet('#AddWidgetsPanel {background-color: #af0C2D48; border-radius: 16px; }')\n        effect = QGraphicsDropShadowEffect(\n                offset=QPoint(3, 0), blurRadius=25, color=QColor(\"#AB0C2D48\"))\n        # self.setGraphicsEffect(effect)\n        root_layout = QVBoxLayout()",
        "detail": "nn_visualizer.ui_components.edit_panel.edit_panel",
        "documentation": {}
    },
    {
        "label": "EditPanel",
        "kind": 6,
        "importPath": "nn_visualizer.ui_components.edit_panel.edit_panel",
        "description": "nn_visualizer.ui_components.edit_panel.edit_panel",
        "peekOfCode": "class EditPanel(QWidget):\n    def __init__(self) -> None:\n        QWidget.__init__(self)\n        self.setAttribute(Qt.WA_StyledBackground, True)\n        self.setObjectName('EditPanel')\n        self.setStyleSheet('#EditPanel {background-color: #fafafa; border-radius: 8px; }')\n        self.width = 400\n        self.setFixedWidth(self.width)\n        root_layout = QVBoxLayout()\n        root_layout.addWidget(AddWidgetsPanel(self))",
        "detail": "nn_visualizer.ui_components.edit_panel.edit_panel",
        "documentation": {}
    },
    {
        "label": "LossComboBox",
        "kind": 6,
        "importPath": "nn_visualizer.ui_components.edit_panel.loss_combobox",
        "description": "nn_visualizer.ui_components.edit_panel.loss_combobox",
        "peekOfCode": "class LossComboBox(QComboBox):\n    def __init__(self, parent, on_changed_callback):\n        QComboBox.__init__(self)\n        self.addItem('Mean Squared Loss')\n        self.addItem('Binary Cross Entropy')\n        self.addItem('Categorical Cross Entropy')\n        self.on_changed_callback = on_changed_callback\n        self.activated.connect(self.activated_changed_handler)\n        self.currentTextChanged.connect(self.text_changed_handler)\n        self.currentIndexChanged.connect(self.index_changed_handler)",
        "detail": "nn_visualizer.ui_components.edit_panel.loss_combobox",
        "documentation": {}
    },
    {
        "label": "OptmizerComboBox",
        "kind": 6,
        "importPath": "nn_visualizer.ui_components.edit_panel.optimizer_combox",
        "description": "nn_visualizer.ui_components.edit_panel.optimizer_combox",
        "peekOfCode": "class OptmizerComboBox(QComboBox):\n    def __init__(self, parent, on_changed_callback):\n        QComboBox.__init__(self)\n        self.addItem('Sthocastic Gradient Descent')\n        self.addItem('AdaGrad')\n        self.addItem('AdaDelta')\n        self.on_changed_callback = on_changed_callback\n        self.activated.connect(self.activated_changed_handler)\n        self.currentTextChanged.connect(self.text_changed_handler)\n        self.currentIndexChanged.connect(self.index_changed_handler)",
        "detail": "nn_visualizer.ui_components.edit_panel.optimizer_combox",
        "documentation": {}
    },
    {
        "label": "DefaultBatchNormalizationVisualizerLayoutData",
        "kind": 6,
        "importPath": "nn_visualizer.ui_components.layout_data.default_batch_normalization_layout_data",
        "description": "nn_visualizer.ui_components.layout_data.default_batch_normalization_layout_data",
        "peekOfCode": "class DefaultBatchNormalizationVisualizerLayoutData(LayerVisualizerLayoutData):\n    SPACE_BETWEEN_NODES_CENTER = 50\n    PADDING_VERTICAL = 20\n    PADDING_HORIZONTAL = 30\n    PADDING_LEFT = PADDING_RIGHT = PADDING_HORIZONTAL // 2\n    PADDING_TOP = PADDING_BOTTOM = PADDING_VERTICAL // 2\n    NODE_RADIUS = 15\n    NODE_DIAM = NODE_RADIUS * 2\n    SPACE_BETWEEN_NODES = SPACE_BETWEEN_NODES_CENTER - (2 * NODE_RADIUS)\n    WIDTH = NODE_RADIUS + 2 * PADDING_HORIZONTAL",
        "detail": "nn_visualizer.ui_components.layout_data.default_batch_normalization_layout_data",
        "documentation": {}
    },
    {
        "label": "DefaultBinaryCrossEntropyLayoutData",
        "kind": 6,
        "importPath": "nn_visualizer.ui_components.layout_data.default_binary_crossentropy_visualizer",
        "description": "nn_visualizer.ui_components.layout_data.default_binary_crossentropy_visualizer",
        "peekOfCode": "class DefaultBinaryCrossEntropyLayoutData(LayerVisualizerLayoutData):\n    SPACE_BETWEEN_NODES_CENTER = 50\n    PADDING_VERTICAL = 20\n    PADDING_HORIZONTAL = 30\n    PADDING_LEFT = PADDING_RIGHT = PADDING_HORIZONTAL // 2\n    PADDING_TOP = PADDING_BOTTOM = PADDING_VERTICAL // 2\n    NODE_RADIUS = 15\n    NODE_DIAM = NODE_RADIUS * 2\n    SPACE_BETWEEN_NODES = SPACE_BETWEEN_NODES_CENTER - (2 * NODE_RADIUS)\n    WIDTH = NODE_RADIUS + 2 * PADDING_HORIZONTAL",
        "detail": "nn_visualizer.ui_components.layout_data.default_binary_crossentropy_visualizer",
        "documentation": {}
    },
    {
        "label": "DefaultDenseVisualizerLayoutData",
        "kind": 6,
        "importPath": "nn_visualizer.ui_components.layout_data.default_dense_visualizer_layout_data",
        "description": "nn_visualizer.ui_components.layout_data.default_dense_visualizer_layout_data",
        "peekOfCode": "class DefaultDenseVisualizerLayoutData(LayerVisualizerLayoutData):\n    SPACE_BETWEEN_NODES_CENTER = 50\n    PADDING_VERTICAL = 20\n    PADDING_HORIZONTAL = 30\n    PADDING_LEFT = PADDING_RIGHT = PADDING_HORIZONTAL // 2\n    PADDING_TOP = PADDING_BOTTOM = PADDING_VERTICAL // 2\n    NODE_RADIUS = 15\n    NODE_DIAM = NODE_RADIUS * 2\n    SPACE_BETWEEN_NODES = SPACE_BETWEEN_NODES_CENTER - (2 * NODE_RADIUS)\n    WIDTH = NODE_RADIUS + 2 * PADDING_HORIZONTAL",
        "detail": "nn_visualizer.ui_components.layout_data.default_dense_visualizer_layout_data",
        "documentation": {}
    },
    {
        "label": "DefaultDropoutVisualizerLayoutData",
        "kind": 6,
        "importPath": "nn_visualizer.ui_components.layout_data.default_dropout_visualizer_layout_data",
        "description": "nn_visualizer.ui_components.layout_data.default_dropout_visualizer_layout_data",
        "peekOfCode": "class DefaultDropoutVisualizerLayoutData(LayerVisualizerLayoutData):\n    SPACE_BETWEEN_NODES_CENTER = 50\n    PADDING_VERTICAL = 20\n    PADDING_HORIZONTAL = 30\n    PADDING_LEFT = PADDING_RIGHT = PADDING_HORIZONTAL // 2\n    PADDING_TOP = PADDING_BOTTOM = PADDING_VERTICAL // 2\n    NODE_RADIUS = 15\n    NODE_DIAM = NODE_RADIUS * 2\n    SPACE_BETWEEN_NODES = SPACE_BETWEEN_NODES_CENTER - (2 * NODE_RADIUS)\n    WIDTH = NODE_RADIUS + 2 * PADDING_HORIZONTAL",
        "detail": "nn_visualizer.ui_components.layout_data.default_dropout_visualizer_layout_data",
        "documentation": {}
    },
    {
        "label": "DefaultInputVisualizerLayoutData",
        "kind": 6,
        "importPath": "nn_visualizer.ui_components.layout_data.default_input_layout_data",
        "description": "nn_visualizer.ui_components.layout_data.default_input_layout_data",
        "peekOfCode": "class DefaultInputVisualizerLayoutData(LayerVisualizerLayoutData):\n    SPACE_BETWEEN_NODES_CENTER = 50\n    PADDING_VERTICAL = 20\n    PADDING_HORIZONTAL = 30\n    PADDING_LEFT = PADDING_RIGHT = PADDING_HORIZONTAL // 2\n    PADDING_TOP = PADDING_BOTTOM = PADDING_VERTICAL // 2\n    NODE_RADIUS = 15\n    NODE_DIAM = NODE_RADIUS * 2\n    SPACE_BETWEEN_NODES = SPACE_BETWEEN_NODES_CENTER - (2 * NODE_RADIUS)\n    WIDTH = NODE_RADIUS + 2 * PADDING_HORIZONTAL",
        "detail": "nn_visualizer.ui_components.layout_data.default_input_layout_data",
        "documentation": {}
    },
    {
        "label": "DefaultMeanSquaredLossVisualizerLayoutData",
        "kind": 6,
        "importPath": "nn_visualizer.ui_components.layout_data.default_mean_squared_loss_visualizer_data",
        "description": "nn_visualizer.ui_components.layout_data.default_mean_squared_loss_visualizer_data",
        "peekOfCode": "class DefaultMeanSquaredLossVisualizerLayoutData(LayerVisualizerLayoutData):\n    SPACE_BETWEEN_NODES_CENTER = 50\n    PADDING_VERTICAL = 20\n    PADDING_HORIZONTAL = 30\n    PADDING_LEFT = PADDING_RIGHT = PADDING_HORIZONTAL // 2\n    PADDING_TOP = PADDING_BOTTOM = PADDING_VERTICAL // 2\n    NODE_RADIUS = 15\n    NODE_DIAM = NODE_RADIUS * 2\n    SPACE_BETWEEN_NODES = SPACE_BETWEEN_NODES_CENTER - 2 * NODE_RADIUS\n    WIDTH = NODE_RADIUS + 2 * PADDING_HORIZONTAL",
        "detail": "nn_visualizer.ui_components.layout_data.default_mean_squared_loss_visualizer_data",
        "documentation": {}
    },
    {
        "label": "DefaultReLUVisualizerLayoutData",
        "kind": 6,
        "importPath": "nn_visualizer.ui_components.layout_data.default_relu_visualizer_layout_data",
        "description": "nn_visualizer.ui_components.layout_data.default_relu_visualizer_layout_data",
        "peekOfCode": "class DefaultReLUVisualizerLayoutData(LayerVisualizerLayoutData):\n    SPACE_BETWEEN_NODES_CENTER = 50\n    PADDING_VERTICAL = 20\n    PADDING_HORIZONTAL = 30\n    PADDING_LEFT = PADDING_RIGHT = PADDING_HORIZONTAL // 2\n    PADDING_TOP = PADDING_BOTTOM = PADDING_VERTICAL // 2\n    NODE_RADIUS = 15\n    NODE_DIAM = NODE_RADIUS * 2\n    SPACE_BETWEEN_NODES = SPACE_BETWEEN_NODES_CENTER - (2 * NODE_RADIUS)\n    WIDTH = NODE_RADIUS + 2 * PADDING_HORIZONTAL",
        "detail": "nn_visualizer.ui_components.layout_data.default_relu_visualizer_layout_data",
        "documentation": {}
    },
    {
        "label": "DefaultSigmoidVisualizerLayoutData",
        "kind": 6,
        "importPath": "nn_visualizer.ui_components.layout_data.default_sigmoid_layout_data",
        "description": "nn_visualizer.ui_components.layout_data.default_sigmoid_layout_data",
        "peekOfCode": "class DefaultSigmoidVisualizerLayoutData(LayerVisualizerLayoutData):\n    SPACE_BETWEEN_NODES_CENTER = 50\n    PADDING_VERTICAL = 20\n    PADDING_HORIZONTAL = 30\n    PADDING_LEFT = PADDING_RIGHT = PADDING_HORIZONTAL // 2\n    PADDING_TOP = PADDING_BOTTOM = PADDING_VERTICAL // 2\n    NODE_RADIUS = 15\n    NODE_DIAM = NODE_RADIUS * 2\n    SPACE_BETWEEN_NODES = SPACE_BETWEEN_NODES_CENTER - (2 * NODE_RADIUS)\n    WIDTH = NODE_RADIUS + 2 * PADDING_HORIZONTAL",
        "detail": "nn_visualizer.ui_components.layout_data.default_sigmoid_layout_data",
        "documentation": {}
    },
    {
        "label": "DefaultSoftmaxVisualizerLayoutData",
        "kind": 6,
        "importPath": "nn_visualizer.ui_components.layout_data.default_softmax_visualizer_layout_data",
        "description": "nn_visualizer.ui_components.layout_data.default_softmax_visualizer_layout_data",
        "peekOfCode": "class DefaultSoftmaxVisualizerLayoutData(LayerVisualizerLayoutData):\n    SPACE_BETWEEN_NODES_CENTER = 50\n    PADDING_VERTICAL = 20\n    PADDING_HORIZONTAL = 30\n    PADDING_LEFT = PADDING_RIGHT = PADDING_HORIZONTAL // 2\n    PADDING_TOP = PADDING_BOTTOM = PADDING_VERTICAL // 2\n    NODE_RADIUS = 15\n    NODE_DIAM = NODE_RADIUS * 2\n    SPACE_BETWEEN_NODES = SPACE_BETWEEN_NODES_CENTER - (2 * NODE_RADIUS)\n    WIDTH = NODE_RADIUS + 2 * PADDING_HORIZONTAL",
        "detail": "nn_visualizer.ui_components.layout_data.default_softmax_visualizer_layout_data",
        "documentation": {}
    },
    {
        "label": "TrainLoss",
        "kind": 6,
        "importPath": "nn_visualizer.ui_components.losses.losses_panel",
        "description": "nn_visualizer.ui_components.losses.losses_panel",
        "peekOfCode": "class TrainLoss(pg.PlotWidget):\n    def __init__(self):\n        pg.PlotWidget.__init__(self)\n        self.graphWidget = pg.PlotWidget()\n        self.imv = pg.ImageView()\nclass TestLoss(pg.PlotWidget):\n    def __init__(self):\n        pg.PlotWidget.__init__(self)\n        self.graphWidget = pg.PlotWidget()\nclass LossesPanel(QWidget):",
        "detail": "nn_visualizer.ui_components.losses.losses_panel",
        "documentation": {}
    },
    {
        "label": "TestLoss",
        "kind": 6,
        "importPath": "nn_visualizer.ui_components.losses.losses_panel",
        "description": "nn_visualizer.ui_components.losses.losses_panel",
        "peekOfCode": "class TestLoss(pg.PlotWidget):\n    def __init__(self):\n        pg.PlotWidget.__init__(self)\n        self.graphWidget = pg.PlotWidget()\nclass LossesPanel(QWidget):\n    def __init__(self, parent):\n        QWidget.__init__(self, parent)\n        plot_widget = pg.PlotWidget(background='#145DA0', parent=self)\n        plot_widget2 = pg.PlotWidget(background='#145DA0', parent=self)\n        self.plot = plot_widget.plot(np.arange(0), np.zeros(0), pen='w')",
        "detail": "nn_visualizer.ui_components.losses.losses_panel",
        "documentation": {}
    },
    {
        "label": "LossesPanel",
        "kind": 6,
        "importPath": "nn_visualizer.ui_components.losses.losses_panel",
        "description": "nn_visualizer.ui_components.losses.losses_panel",
        "peekOfCode": "class LossesPanel(QWidget):\n    def __init__(self, parent):\n        QWidget.__init__(self, parent)\n        plot_widget = pg.PlotWidget(background='#145DA0', parent=self)\n        plot_widget2 = pg.PlotWidget(background='#145DA0', parent=self)\n        self.plot = plot_widget.plot(np.arange(0), np.zeros(0), pen='w')\n        self.validation_plot = plot_widget2.plot(np.arange(0), np.zeros(0))\n        vb = self.plot.getViewBox()       \n        vb.setAspectLocked(lock=False)\n        vb.setAutoVisible(y=1.0)",
        "detail": "nn_visualizer.ui_components.losses.losses_panel",
        "documentation": {}
    },
    {
        "label": "MainWindowMenuBar",
        "kind": 6,
        "importPath": "nn_visualizer.ui_components.menubar.main_window_menu_bar",
        "description": "nn_visualizer.ui_components.menubar.main_window_menu_bar",
        "peekOfCode": "class MainWindowMenuBar(QMenuBar):\n    def __init__(self, parent: QWidget = None, open_file_callback = None, switch_view_mode_callback = None):\n        print(parent)\n        QMenu.__init__(self, parent)\n        self._parent = parent\n        self.open_file_callback = open_file_callback\n        # self.setFixedHeight(50)\n        effect = QGraphicsDropShadowEffect(\n        offset=QPoint(3, 3), blurRadius=25, color=QColor(\"#e0e0e0\"))\n        self.setGraphicsEffect(effect)",
        "detail": "nn_visualizer.ui_components.menubar.main_window_menu_bar",
        "documentation": {}
    },
    {
        "label": "CurrentPipelineAnimation",
        "kind": 6,
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.animations.current_pipeline_animation",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.animations.current_pipeline_animation",
        "peekOfCode": "class CurrentPipelineAnimation(QVariantAnimation):\n    def __init__(self, parent: QWidget = None, polygon: Polygon = None, update = None) -> None:\n        self.polygon = polygon\n        self._parent = parent\n        self.update_callback = update\n        QVariantAnimation.__init__(self,\n            parent,\n            valueChanged=self._animate,\n            startValue=0.0,\n            endValue=1.0,",
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.animations.current_pipeline_animation",
        "documentation": {}
    },
    {
        "label": "BatchNormalizationUnitVisualizer",
        "kind": 6,
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.batch_normalization_visualizer.batch_normalization_unit_visualizer",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.batch_normalization_visualizer.batch_normalization_unit_visualizer",
        "peekOfCode": "class BatchNormalizationUnitVisualizer(CanvasDrawable):\n    def __init__(self, x, y, layout_data: LayerVisualizerLayoutData):\n        CanvasDrawable.__init__(self)\n        self.width = 300\n        self.height = 300\n        self.x = x\n        self.y = y\n        self.is_selected = False\n        self.layout_data = layout_data\n    def draw(self, painter: QPainter):",
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.batch_normalization_visualizer.batch_normalization_unit_visualizer",
        "documentation": {}
    },
    {
        "label": "BatchNormalizationVisualizer",
        "kind": 6,
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.batch_normalization_visualizer.batch_normalization_visualizer",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.batch_normalization_visualizer.batch_normalization_visualizer",
        "peekOfCode": "class BatchNormalizationVisualizer(CanvasDrawable):\n    def __init__(self, layout_data: LayerVisualizerLayoutData,\n                parent = None,\n                on_selection_callback = None,\n                on_node_selection_callback = None,\n                name='Batch Normalization'):\n        CanvasDrawable.__init__(self)\n        self.layout_data = layout_data\n        self.previous_layer_units_origins = []\n        self.x, self.y = layout_data.get_origin()",
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.batch_normalization_visualizer.batch_normalization_visualizer",
        "documentation": {}
    },
    {
        "label": "ConnectionVisualizer",
        "kind": 6,
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.dense_visualizer.connection_visualizer",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.dense_visualizer.connection_visualizer",
        "peekOfCode": "class ConnectionVisualizer(CanvasDrawable):\n    def __init__(self):\n        CanvasDrawable.__init__(self)",
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.dense_visualizer.connection_visualizer",
        "documentation": {}
    },
    {
        "label": "VisualizerUnit",
        "kind": 6,
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.dense_visualizer.unit_visualizer",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.dense_visualizer.unit_visualizer",
        "peekOfCode": "class VisualizerUnit(CanvasDrawable):\n    def __init__(self, x = -1, y = -1, layout_data: LayerVisualizerLayoutData = None, index: int = 0):\n        CanvasDrawable.__init__(self)\n        self.x = x\n        self.y = y\n        self.selected = False\n        self.layout_data = layout_data\n        self.index = index\n        # self.output_origin = self.layout_data.get_output_units_origins[index]\n    def draw(self, painter: QPainter):",
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.dense_visualizer.unit_visualizer",
        "documentation": {}
    },
    {
        "label": "DenseVisualizer",
        "kind": 6,
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.dense_visualizer.visualizer_dense_layer",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.dense_visualizer.visualizer_dense_layer",
        "peekOfCode": "class DenseVisualizer(CanvasDrawable):\n    def __init__(\n            self,\n            layout_data: LayerVisualizerLayoutData,\n            parent = None,\n            on_selection_callback = None,\n            on_node_selection_callback = None,\n            name: str = 'Dense',\n            index: int = 0,\n        ):",
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.dense_visualizer.visualizer_dense_layer",
        "documentation": {}
    },
    {
        "label": "DropoutVisualizer",
        "kind": 6,
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.dropout_visualizer.dropout_visualizer",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.dropout_visualizer.dropout_visualizer",
        "peekOfCode": "class DropoutVisualizer(CanvasDrawable):\n    def __init__(self, units: int, layout_data: LayerVisualizerLayoutData, parent = None, on_selection_callback = None, name: str = 'Dropout'):\n        CanvasDrawable.__init__(self)\n        self.layout_data = layout_data\n        self.name = name\n        self.previous_layer_units_origins = []\n        self.x, self.y = layout_data.get_origin()\n        self._set_polygon()\n        self.drawable_units = self._build_drawable_units()\n        self.selected = False",
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.dropout_visualizer.dropout_visualizer",
        "documentation": {}
    },
    {
        "label": "InputUnitVisualizer",
        "kind": 6,
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.input_visualizer.input_unit_visualizer",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.input_visualizer.input_unit_visualizer",
        "peekOfCode": "class InputUnitVisualizer(CanvasDrawable):\n    def __init__(self, x, y, layout_data: LayerVisualizerLayoutData):\n        CanvasDrawable.__init__(self)\n        self.width = 300\n        self.height = 300\n        self.x = x\n        self.y = y\n        self.is_selected = False\n        self.layout_data = layout_data\n    def draw(self, painter: QPainter):",
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.input_visualizer.input_unit_visualizer",
        "documentation": {}
    },
    {
        "label": "InputVisualizer",
        "kind": 6,
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.input_visualizer.input_visualizer",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.input_visualizer.input_visualizer",
        "peekOfCode": "class InputVisualizer(CanvasDrawable):\n    def __init__(self, units: int, layout_data: LayerVisualizerLayoutData, parent = None, on_selection_callback = None, name: str = 'Input'):\n        CanvasDrawable.__init__(self)\n        self.layout_data = layout_data\n        self.name = name\n        self.previous_layer_units_origins = []\n        self.x, self.y = layout_data.get_origin()\n        self._set_polygon()\n        self.drawable_units = self._build_drawable_units()\n        self.selected = False",
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.input_visualizer.input_visualizer",
        "documentation": {}
    },
    {
        "label": "BinaryCrossEntropyVisualizer",
        "kind": 6,
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.losses_visualizer.binary_cross_entropy_visualizer.binary_cross_entropy_visualizer",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.losses_visualizer.binary_cross_entropy_visualizer.binary_cross_entropy_visualizer",
        "peekOfCode": "class BinaryCrossEntropyVisualizer(CanvasDrawable):\n    def __init__(self, sme: BinaryCrossEntropy, layout_data: LayerVisualizerLayoutData, parent = None, on_selection_callback = None):\n        self.sme = sme\n        self.parent = parent\n        self.layout_data = layout_data\n        self.x, self.y = layout_data.get_origin()\n        self.selected = False\n        self.polygon = Polygon.from_vertices(\n            vertices=[\n                Point(self.x, self.y),",
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.losses_visualizer.binary_cross_entropy_visualizer.binary_cross_entropy_visualizer",
        "documentation": {}
    },
    {
        "label": "LossVisualizerUnit",
        "kind": 6,
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.losses_visualizer.mean_squared_error_visualizer.loss_unit_visualizer_unit",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.losses_visualizer.mean_squared_error_visualizer.loss_unit_visualizer_unit",
        "peekOfCode": "class LossVisualizerUnit(LayerVisualizerUnit):\n    UNIT_RADIUS = 20\n    def __init__(self, x = -1, y = -1, input_unit_origins = []):\n        LayerVisualizerUnit.__init__(self)\n        self.x = x\n        self.y = y\n        self.width = 300\n        self.height = 300\n        self.is_selected = False\n        self.input_units_origins = input_unit_origins",
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.losses_visualizer.mean_squared_error_visualizer.loss_unit_visualizer_unit",
        "documentation": {}
    },
    {
        "label": "MeanSquaredErrorVisualizer",
        "kind": 6,
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.losses_visualizer.mean_squared_error_visualizer.mean_squared_error_visualizer",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.losses_visualizer.mean_squared_error_visualizer.mean_squared_error_visualizer",
        "peekOfCode": "class MeanSquaredErrorVisualizer(CanvasDrawable):\n    def __init__(self, layout_data: LayerVisualizerLayoutData, parent = None):\n        self.parent = parent\n        self.layout_data = layout_data\n        self.x, self.y = layout_data.get_origin()\n        self.polygon = Polygon.from_vertices(\n            vertices=[\n                Point(self.x, self.y),\n                Point(self.x + self.layout_data.width(), self.y),\n                Point(self.x + self.layout_data.width(), self.y + self.layout_data.height()),",
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.losses_visualizer.mean_squared_error_visualizer.mean_squared_error_visualizer",
        "documentation": {}
    },
    {
        "label": "ReLUUnitVisualizer",
        "kind": 6,
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.relu_visualizer.relu_unit_visualizer",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.relu_visualizer.relu_unit_visualizer",
        "peekOfCode": "class ReLUUnitVisualizer(CanvasDrawable):\n    def __init__(self, x, y, layout_data: ReLUVisualizerLayoutData):\n        CanvasDrawable.__init__(self)\n        self.x = x\n        self.y = y\n        self.is_selected = False\n        self.layout_data = layout_data\n    def draw(self, painter: QPainter):\n        unit_point = QPoint(int(self.x), int(self.y))\n        radius = self.layout_data.get_unit_radius()",
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.relu_visualizer.relu_unit_visualizer",
        "documentation": {}
    },
    {
        "label": "ReLUVisualizer",
        "kind": 6,
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.relu_visualizer.relu_visualizer",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.relu_visualizer.relu_visualizer",
        "peekOfCode": "class ReLUVisualizer(CanvasDrawable):\n    def __init__(self,\n            units: int,\n            layout_data: LayerVisualizerLayoutData,\n            parent = None,\n            on_selection_callback = None,\n            on_node_selection_callback = None, \n            name: str = 'ReLU'):\n        CanvasDrawable.__init__(self)\n        self.on_selection_callback = on_selection_callback",
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.relu_visualizer.relu_visualizer",
        "documentation": {}
    },
    {
        "label": "SigmoidVisualizer",
        "kind": 6,
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.sigmoid_visualizer.sigmoid_visualizer",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.sigmoid_visualizer.sigmoid_visualizer",
        "peekOfCode": "class SigmoidVisualizer(CanvasDrawable):\n    def __init__(self,\n                layout_data: LayerVisualizerLayoutData, \n                parent = None,\n                on_selection_callback=None,\n                on_node_selection_callback=None,\n                name=''):\n        CanvasDrawable.__init__(self)\n        self.on_selection_callback = on_selection_callback\n        self.on_node_selection_callback = on_node_selection_callback",
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.sigmoid_visualizer.sigmoid_visualizer",
        "documentation": {}
    },
    {
        "label": "SigmoidVisualizerUnit",
        "kind": 6,
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.sigmoid_visualizer.sigmoid_visualizer_unit",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.sigmoid_visualizer.sigmoid_visualizer_unit",
        "peekOfCode": "class SigmoidVisualizerUnit(CanvasDrawable):\n    def __init__(self, x = -1, y = -1, radius=1.0):\n        CanvasDrawable.__init__(self)\n        self.x = x\n        self.y = y\n        self.is_selected = False\n        self.radius = radius\n        self.selected = False\n    def draw(self, painter: QPainter):\n        unit_point = QPoint(int(self.x), int(self.y))",
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.sigmoid_visualizer.sigmoid_visualizer_unit",
        "documentation": {}
    },
    {
        "label": "SoftmaxVisualizer",
        "kind": 6,
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.softmax_visualizer.softmax_visualizer",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.softmax_visualizer.softmax_visualizer",
        "peekOfCode": "class SoftmaxVisualizer(CanvasDrawable):\n    def __init__(self, units: int, layout_data: LayerVisualizerLayoutData, parent = None, on_selection_callback = None, name: str = 'ReLU'):\n        CanvasDrawable.__init__(self)\n        self.layout_data = layout_data\n        self.name = name\n        self.previous_layer_units_origins = []\n        self.x, self.y = layout_data.get_origin()\n        self._set_polygon()\n        self.drawable_units = self._build_drawable_units()\n        self.selected = False",
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.softmax_visualizer.softmax_visualizer",
        "documentation": {}
    },
    {
        "label": "LayerVisualizerLayoutData",
        "kind": 6,
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.layer_layout_data",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.layer_layout_data",
        "peekOfCode": "class LayerVisualizerLayoutData():\n    def __init__(self):\n        pass\n    @abstractmethod\n    def width(self) -> float:\n        pass\n    @abstractmethod\n    def height(self) -> float:\n        pass\n    @abstractmethod",
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.layer_layout_data",
        "documentation": {}
    },
    {
        "label": "Showing",
        "kind": 6,
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.layer_unit_visualizer",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.layer_unit_visualizer",
        "peekOfCode": "class Showing(Enum):\n    SHOWING_FORWARD_CONNECTIONS = 0,\n    SHOWING_BACKWARD_CONNECTIONS = 1,\n    SHOWING_BACKWARD_CONNECTIONS_IN_PATH = 2,\nclass LayerVisualizerUnit(CanvasDrawable):\n    def __init__(self, layout_data: LayerVisualizerLayoutData = None, index: int = 0, on_node_selection_callback = None):\n        CanvasDrawable.__init__(self)\n        self.selected = False\n        self.layout_data = layout_data\n        self.index = index",
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.layer_unit_visualizer",
        "documentation": {}
    },
    {
        "label": "LayerVisualizerUnit",
        "kind": 6,
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.layer_unit_visualizer",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.layer_unit_visualizer",
        "peekOfCode": "class LayerVisualizerUnit(CanvasDrawable):\n    def __init__(self, layout_data: LayerVisualizerLayoutData = None, index: int = 0, on_node_selection_callback = None):\n        CanvasDrawable.__init__(self)\n        self.selected = False\n        self.layout_data = layout_data\n        self.index = index\n        self.on_node_selection_callback = on_node_selection_callback\n        self.showing_info = Showing.SHOWING_FORWARD_CONNECTIONS\n    def draw(self, painter: QPainter):\n        painter.save()",
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.layer_unit_visualizer",
        "documentation": {}
    },
    {
        "label": "line_width_from_ndarray",
        "kind": 2,
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.strategies",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.strategies",
        "peekOfCode": "def line_width_from_ndarray(ndarray: np.ndarray, value: float):\n    from scipy.interpolate import interp1d\n    max = np.max(ndarray)\n    min = np.min(ndarray)\n    line_width_range = [1, 5]\n    ndarray_range = [min, max]\n    width_interp = interp1d(ndarray_range, line_width_range)\n    return width_interp(value)\ndef line_color_from_derivative(value: float):\n    from scipy.interpolate import interp1d",
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.strategies",
        "documentation": {}
    },
    {
        "label": "line_color_from_derivative",
        "kind": 2,
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.strategies",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.strategies",
        "peekOfCode": "def line_color_from_derivative(value: float):\n    from scipy.interpolate import interp1d\n    derivatives_range = [0, .1]\n    colors_range = [200, 0]\n    if value > derivatives_range[1]:\n        return 0\n    color_interp = interp1d([0, 5], [255, 0])\n    return color_interp(value)\ndef line_color_from_derivative(value):\n    value = np.abs(value)",
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.strategies",
        "documentation": {}
    },
    {
        "label": "line_color_from_derivative",
        "kind": 2,
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.strategies",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.strategies",
        "peekOfCode": "def line_color_from_derivative(value):\n    value = np.abs(value)\n    minimum, maximum = 0, .1\n    minimum, maximum = float(minimum), float(maximum)\n    ratio = 2 * (np.log(value+1)-minimum) / (maximum - minimum)\n    b = int(max(0, min(255, 255*(1 - ratio))))\n    r = int(max(0, min(255, 255*(ratio - 1))))\n    g = 255 - b - r\n    return r, g, b\ndef draw_single_connected_backward_connection(",
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.strategies",
        "documentation": {}
    },
    {
        "label": "draw_single_connected_backward_connection",
        "kind": 2,
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.strategies",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.strategies",
        "peekOfCode": "def draw_single_connected_backward_connection(\n        painter: QPainter,\n        layer_layout_data: LayerVisualizerLayoutData,\n        index: int,\n    ):\n    units_origins = layer_layout_data.get_units_origins()\n    unit_origin = units_origins[index]\n    unit_radius = layer_layout_data.get_unit_radius()\n    output_origins = layer_layout_data.get_output_units_origins()\n    output_origin = output_origins[index]",
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.strategies",
        "documentation": {}
    },
    {
        "label": "draw_fully_connected_backward_connections",
        "kind": 2,
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.strategies",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.strategies",
        "peekOfCode": "def draw_fully_connected_backward_connections(\n        painter: QPainter,\n        layer_layout_data: LayerVisualizerLayoutData,\n        index: int\n    ):\n    units_origins = layer_layout_data.get_units_origins()\n    unit_origin = units_origins[index]\n    unit_radius = layer_layout_data.get_unit_radius()\n    output_origins = layer_layout_data.get_output_units_origins()\n    derivatives = layer_layout_data.get_backpropagation_derivatives()",
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.strategies",
        "documentation": {}
    },
    {
        "label": "draw_single_connected_forward_connection",
        "kind": 2,
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.strategies",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.strategies",
        "peekOfCode": "def draw_single_connected_forward_connection(\n        painter: QPainter,\n        layer_layout_data: LayerVisualizerLayoutData,\n        index: int,\n    ):\n    units_origins = layer_layout_data.get_units_origins()\n    unit_origin = units_origins[index]\n    unit_radius = layer_layout_data.get_unit_radius()\n    input_origins = layer_layout_data.get_input_units_origins()\n    input_origin = input_origins[index]",
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.strategies",
        "documentation": {}
    },
    {
        "label": "draw_fully_connected_forward_connections",
        "kind": 2,
        "importPath": "nn_visualizer.ui_components.smlf_components_visualizers.strategies",
        "description": "nn_visualizer.ui_components.smlf_components_visualizers.strategies",
        "peekOfCode": "def draw_fully_connected_forward_connections(\n        painter: QPainter,\n        layer_layout_data: LayerVisualizerLayoutData,\n        index: int\n    ):\n    units_origins = layer_layout_data.get_units_origins()\n    unit_origin = units_origins[index]\n    unit_radius = layer_layout_data.get_unit_radius()\n    input_origins = layer_layout_data.get_input_units_origins()\n    derivatives = layer_layout_data.get_backpropagation_derivatives()",
        "detail": "nn_visualizer.ui_components.smlf_components_visualizers.strategies",
        "documentation": {}
    },
    {
        "label": "component_editor_style",
        "kind": 5,
        "importPath": "nn_visualizer.ui_components.theme.styles",
        "description": "nn_visualizer.ui_components.theme.styles",
        "peekOfCode": "component_editor_style = dict({\n    'background-color': '#e0e0e0',\n    'border-radius': '1px',\n})",
        "detail": "nn_visualizer.ui_components.theme.styles",
        "documentation": {}
    },
    {
        "label": "TextSize",
        "kind": 6,
        "importPath": "nn_visualizer.ui_components.theme.theme",
        "description": "nn_visualizer.ui_components.theme.theme",
        "peekOfCode": "class TextSize(Enum):\n    extra_small = 8\n    small = 16\n    medium = 24\n    large = 28\n    extra_large = 32\nclass Colors():\n    dark_blue = '#0C2D48'\n    blue = '#2E8BC0'\n    baby_blue = '#B1D4E0'",
        "detail": "nn_visualizer.ui_components.theme.theme",
        "documentation": {}
    },
    {
        "label": "Colors",
        "kind": 6,
        "importPath": "nn_visualizer.ui_components.theme.theme",
        "description": "nn_visualizer.ui_components.theme.theme",
        "peekOfCode": "class Colors():\n    dark_blue = '#0C2D48'\n    blue = '#2E8BC0'\n    baby_blue = '#B1D4E0'\n    midnight_blue = '#145DA0'\n    selected_color = 'purple'\n    def __init__(self):\n        pass",
        "detail": "nn_visualizer.ui_components.theme.theme",
        "documentation": {}
    },
    {
        "label": "json_style_to_css",
        "kind": 2,
        "importPath": "nn_visualizer.ui_components.theme.utils",
        "description": "nn_visualizer.ui_components.theme.utils",
        "peekOfCode": "def json_style_to_css(json: dict) -> str:\n    kv_to_string = lambda key, value: '{key}: {value}'.format(key=key, value=value)\n    style_props = list(starmap(kv_to_string, zip(json.keys(), json.values())))\n    return reduce(lambda acc, curr: '{acc}{curr};'.format(acc=acc, curr=curr), style_props, '')\ndef json_style_to_id_css(id: str,json: dict):\n    return '#{id} {{ {style} }}'.format(id=id, style=json_style_to_css(json))",
        "detail": "nn_visualizer.ui_components.theme.utils",
        "documentation": {}
    },
    {
        "label": "json_style_to_id_css",
        "kind": 2,
        "importPath": "nn_visualizer.ui_components.theme.utils",
        "description": "nn_visualizer.ui_components.theme.utils",
        "peekOfCode": "def json_style_to_id_css(id: str,json: dict):\n    return '#{id} {{ {style} }}'.format(id=id, style=json_style_to_css(json))",
        "detail": "nn_visualizer.ui_components.theme.utils",
        "documentation": {}
    },
    {
        "label": "CanvasDrawable",
        "kind": 6,
        "importPath": "nn_visualizer.ui_components.canvas_drawable",
        "description": "nn_visualizer.ui_components.canvas_drawable",
        "peekOfCode": "class CanvasDrawable():\n    def __init__(self):\n        pass\n    @abstractmethod\n    def draw(painter: QPainter):\n        pass\n    @abstractmethod\n    def width(self) -> float:\n        pass\n    @abstractmethod",
        "detail": "nn_visualizer.ui_components.canvas_drawable",
        "documentation": {}
    },
    {
        "label": "CanvasWidget",
        "kind": 6,
        "importPath": "nn_visualizer.ui_components.canvas_widget",
        "description": "nn_visualizer.ui_components.canvas_widget",
        "peekOfCode": "class CanvasWidget(QWidget):\n    def __init__(self, application_context: ApplicationContext, height = 0, width = 0, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.setAcceptDrops(True)\n        self.setSizePolicy(\n            QSizePolicy.MinimumExpanding,\n            QSizePolicy.Expanding\n        )\n        self.drawables: list[CanvasDrawable] = []\n        self.mousePressEvent = self.mousePressEvent",
        "detail": "nn_visualizer.ui_components.canvas_widget",
        "documentation": {}
    },
    {
        "label": "clickable",
        "kind": 2,
        "importPath": "nn_visualizer.ui_components.clickable",
        "description": "nn_visualizer.ui_components.clickable",
        "peekOfCode": "def clickable(widget):\n    class Filter(QObject):\n        clicked = pyqtSignal()\n        def eventFilter(self, obj, event):\n            if obj == widget:\n                if event.type() == QEvent.Enter:\n                    if obj.rect().contains(event.pos()):\n                        self.clicked.emit()\n                        return True\n            return False",
        "detail": "nn_visualizer.ui_components.clickable",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "nn_visualizer.app",
        "description": "nn_visualizer.app",
        "peekOfCode": "class Window(QWidget):\n    def __init__(self):\n        super().__init__()\n        self.setStyleSheet('background: #e0e0e0;')\n        self.menubar = MainWindowMenuBar(parent=self,\n                open_file_callback=self.open_file_callback,\n                switch_view_mode_callback=self.switch_view_mode_callback,\n        )\n        self.layout_data = LayoutData(self, self.on_selection_callback, self.on_node_selection_callback)\n        pipeline = Pipeline([], next_callback=self.update_pipeline_callback)",
        "detail": "nn_visualizer.app",
        "documentation": {}
    },
    {
        "label": "START_DRAWING_X",
        "kind": 5,
        "importPath": "nn_visualizer.app",
        "description": "nn_visualizer.app",
        "peekOfCode": "START_DRAWING_X = 20\nSTART_DRAWING_Y = 20\nCANVAS_WIDTH = 1400\nCANVAS_HEIGHT = 500\nclass Window(QWidget):\n    def __init__(self):\n        super().__init__()\n        self.setStyleSheet('background: #e0e0e0;')\n        self.menubar = MainWindowMenuBar(parent=self,\n                open_file_callback=self.open_file_callback,",
        "detail": "nn_visualizer.app",
        "documentation": {}
    },
    {
        "label": "START_DRAWING_Y",
        "kind": 5,
        "importPath": "nn_visualizer.app",
        "description": "nn_visualizer.app",
        "peekOfCode": "START_DRAWING_Y = 20\nCANVAS_WIDTH = 1400\nCANVAS_HEIGHT = 500\nclass Window(QWidget):\n    def __init__(self):\n        super().__init__()\n        self.setStyleSheet('background: #e0e0e0;')\n        self.menubar = MainWindowMenuBar(parent=self,\n                open_file_callback=self.open_file_callback,\n                switch_view_mode_callback=self.switch_view_mode_callback,",
        "detail": "nn_visualizer.app",
        "documentation": {}
    },
    {
        "label": "CANVAS_WIDTH",
        "kind": 5,
        "importPath": "nn_visualizer.app",
        "description": "nn_visualizer.app",
        "peekOfCode": "CANVAS_WIDTH = 1400\nCANVAS_HEIGHT = 500\nclass Window(QWidget):\n    def __init__(self):\n        super().__init__()\n        self.setStyleSheet('background: #e0e0e0;')\n        self.menubar = MainWindowMenuBar(parent=self,\n                open_file_callback=self.open_file_callback,\n                switch_view_mode_callback=self.switch_view_mode_callback,\n        )",
        "detail": "nn_visualizer.app",
        "documentation": {}
    },
    {
        "label": "CANVAS_HEIGHT",
        "kind": 5,
        "importPath": "nn_visualizer.app",
        "description": "nn_visualizer.app",
        "peekOfCode": "CANVAS_HEIGHT = 500\nclass Window(QWidget):\n    def __init__(self):\n        super().__init__()\n        self.setStyleSheet('background: #e0e0e0;')\n        self.menubar = MainWindowMenuBar(parent=self,\n                open_file_callback=self.open_file_callback,\n                switch_view_mode_callback=self.switch_view_mode_callback,\n        )\n        self.layout_data = LayoutData(self, self.on_selection_callback, self.on_node_selection_callback)",
        "detail": "nn_visualizer.app",
        "documentation": {}
    },
    {
        "label": "App",
        "kind": 5,
        "importPath": "nn_visualizer.app",
        "description": "nn_visualizer.app",
        "peekOfCode": "App = QApplication(sys.argv)\nwindow = Window()\nsys.exit(App.exec())",
        "detail": "nn_visualizer.app",
        "documentation": {}
    },
    {
        "label": "window",
        "kind": 5,
        "importPath": "nn_visualizer.app",
        "description": "nn_visualizer.app",
        "peekOfCode": "window = Window()\nsys.exit(App.exec())",
        "detail": "nn_visualizer.app",
        "documentation": {}
    },
    {
        "label": "LayoutData",
        "kind": 6,
        "importPath": "nn_visualizer.layout_data",
        "description": "nn_visualizer.layout_data",
        "peekOfCode": "class LayoutData():\n    def __init__(self, parent, on_selection_callback, on_node_selection_callback):\n        self.on_selection_callback = on_selection_callback\n        self.on_node_selection_callback = on_node_selection_callback\n        self.current_x = 20\n        self.parent = parent\n        self.x_origin = 20 \n        self.layers = []\n    def add_input(self, editing_input: EditingInput):\n        def generate_selection_callback(index: int):",
        "detail": "nn_visualizer.layout_data",
        "documentation": {}
    },
    {
        "label": "TestReLU",
        "kind": 6,
        "importPath": "test.layers.convolutional.conv2d_layer_test",
        "description": "test.layers.convolutional.conv2d_layer_test",
        "peekOfCode": "class TestReLU(unittest.TestCase):\n    '''    \n        Tests for checking if parameters shapes are being set correctly\n    '''\n    def test_output_shape_w_valid_padding(self):\n        input_size = (10, 10, 3)\n        padding_mode = 'valid'\n        layer = Conv2DLayer(input_size=input_size, kernel_size=(3,3), depth=5, padding_mode=padding_mode)\n        self.assertEqual(layer.output_shape, (5, 8, 8))\n    def test_output_shape_w_same_padding(self):",
        "detail": "test.layers.convolutional.conv2d_layer_test",
        "documentation": {}
    },
    {
        "label": "TestReLU",
        "kind": 6,
        "importPath": "test.layers.relu.relu_test",
        "description": "test.layers.relu.relu_test",
        "peekOfCode": "class TestReLU(unittest.TestCase):\n    def test_shapes_on_forward(self):\n        layer = ReLU(5)\n        batch = np.ndarray((2, 5), buffer=np.array([\n            [-1., .0, .1, 1, -1.],\n            [-1., .0, .1, 1, -1.],\n        ]))\n        layer.forward(batch)\n        self.assertEqual(layer.output.shape, (2, 5))\n    def test_output_values_on_forward(self):",
        "detail": "test.layers.relu.relu_test",
        "documentation": {}
    },
    {
        "label": "get",
        "kind": 2,
        "importPath": "iris_dataset",
        "description": "iris_dataset",
        "peekOfCode": "def get():\n    from sklearn.datasets import load_iris\n    from sklearn.preprocessing import OneHotEncoder, StandardScaler, normalize\n    import numpy as np\n    from sklearn.model_selection import train_test_split\n    iris = load_iris()\n    X = iris['data']\n    y = iris['target']\n    names = iris['target_names']\n    feature_names = iris['feature_names']",
        "detail": "iris_dataset",
        "documentation": {}
    }
]